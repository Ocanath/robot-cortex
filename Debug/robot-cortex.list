
robot-cortex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000354c  080001e0  080001e0  000101e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800372c  0800372c  0001372c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003744  08003744  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  08003744  08003744  00013744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800374c  0800374c  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800374c  0800374c  0001374c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003750  08003750  00013750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08003754  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  200001d8  0800392c  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c8  0800392c  000203c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000174b7  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002831  00000000  00000000  000376bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001030  00000000  00000000  00039ef0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f88  00000000  00000000  0003af20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024bdd  00000000  00000000  0003bea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d5f7  00000000  00000000  00060a85  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e659c  00000000  00000000  0006e07c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00154618  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bb4  00000000  00000000  00154694  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000b71e  00000000  00000000  00157248  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	00000000 	.word	0x00000000
 8000200:	08003714 	.word	0x08003714

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001dc 	.word	0x200001dc
 800021c:	08003714 	.word	0x08003714

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b972 	b.w	800051c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	4688      	mov	r8, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14b      	bne.n	80002f6 <__udivmoddi4+0xa6>
 800025e:	428a      	cmp	r2, r1
 8000260:	4615      	mov	r5, r2
 8000262:	d967      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0720 	rsb	r7, r2, #32
 800026e:	fa01 f302 	lsl.w	r3, r1, r2
 8000272:	fa20 f707 	lsr.w	r7, r0, r7
 8000276:	4095      	lsls	r5, r2
 8000278:	ea47 0803 	orr.w	r8, r7, r3
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbb8 f7fe 	udiv	r7, r8, lr
 8000288:	fa1f fc85 	uxth.w	ip, r5
 800028c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000290:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000294:	fb07 f10c 	mul.w	r1, r7, ip
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18eb      	adds	r3, r5, r3
 800029e:	f107 30ff 	add.w	r0, r7, #4294967295
 80002a2:	f080 811b 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8118 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002ac:	3f02      	subs	r7, #2
 80002ae:	442b      	add	r3, r5
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c4:	45a4      	cmp	ip, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	192c      	adds	r4, r5, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ce:	f080 8107 	bcs.w	80004e0 <__udivmoddi4+0x290>
 80002d2:	45a4      	cmp	ip, r4
 80002d4:	f240 8104 	bls.w	80004e0 <__udivmoddi4+0x290>
 80002d8:	3802      	subs	r0, #2
 80002da:	442c      	add	r4, r5
 80002dc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002e0:	eba4 040c 	sub.w	r4, r4, ip
 80002e4:	2700      	movs	r7, #0
 80002e6:	b11e      	cbz	r6, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c6 4300 	strd	r4, r3, [r6]
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d909      	bls.n	800030e <__udivmoddi4+0xbe>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80eb 	beq.w	80004d6 <__udivmoddi4+0x286>
 8000300:	2700      	movs	r7, #0
 8000302:	e9c6 0100 	strd	r0, r1, [r6]
 8000306:	4638      	mov	r0, r7
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	fab3 f783 	clz	r7, r3
 8000312:	2f00      	cmp	r7, #0
 8000314:	d147      	bne.n	80003a6 <__udivmoddi4+0x156>
 8000316:	428b      	cmp	r3, r1
 8000318:	d302      	bcc.n	8000320 <__udivmoddi4+0xd0>
 800031a:	4282      	cmp	r2, r0
 800031c:	f200 80fa 	bhi.w	8000514 <__udivmoddi4+0x2c4>
 8000320:	1a84      	subs	r4, r0, r2
 8000322:	eb61 0303 	sbc.w	r3, r1, r3
 8000326:	2001      	movs	r0, #1
 8000328:	4698      	mov	r8, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d0e0      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800032e:	e9c6 4800 	strd	r4, r8, [r6]
 8000332:	e7dd      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000334:	b902      	cbnz	r2, 8000338 <__udivmoddi4+0xe8>
 8000336:	deff      	udf	#255	; 0xff
 8000338:	fab2 f282 	clz	r2, r2
 800033c:	2a00      	cmp	r2, #0
 800033e:	f040 808f 	bne.w	8000460 <__udivmoddi4+0x210>
 8000342:	1b49      	subs	r1, r1, r5
 8000344:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000348:	fa1f f885 	uxth.w	r8, r5
 800034c:	2701      	movs	r7, #1
 800034e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fb0e 111c 	mls	r1, lr, ip, r1
 8000358:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800035c:	fb08 f10c 	mul.w	r1, r8, ip
 8000360:	4299      	cmp	r1, r3
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x124>
 8000364:	18eb      	adds	r3, r5, r3
 8000366:	f10c 30ff 	add.w	r0, ip, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4299      	cmp	r1, r3
 800036e:	f200 80cd 	bhi.w	800050c <__udivmoddi4+0x2bc>
 8000372:	4684      	mov	ip, r0
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	b2a3      	uxth	r3, r4
 8000378:	fbb1 f0fe 	udiv	r0, r1, lr
 800037c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000380:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000384:	fb08 f800 	mul.w	r8, r8, r0
 8000388:	45a0      	cmp	r8, r4
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x14c>
 800038c:	192c      	adds	r4, r5, r4
 800038e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x14a>
 8000394:	45a0      	cmp	r8, r4
 8000396:	f200 80b6 	bhi.w	8000506 <__udivmoddi4+0x2b6>
 800039a:	4618      	mov	r0, r3
 800039c:	eba4 0408 	sub.w	r4, r4, r8
 80003a0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a4:	e79f      	b.n	80002e6 <__udivmoddi4+0x96>
 80003a6:	f1c7 0c20 	rsb	ip, r7, #32
 80003aa:	40bb      	lsls	r3, r7
 80003ac:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003b0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003b4:	fa01 f407 	lsl.w	r4, r1, r7
 80003b8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003bc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003c0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003c4:	4325      	orrs	r5, r4
 80003c6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ca:	0c2c      	lsrs	r4, r5, #16
 80003cc:	fb08 3319 	mls	r3, r8, r9, r3
 80003d0:	fa1f fa8e 	uxth.w	sl, lr
 80003d4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d8:	fb09 f40a 	mul.w	r4, r9, sl
 80003dc:	429c      	cmp	r4, r3
 80003de:	fa02 f207 	lsl.w	r2, r2, r7
 80003e2:	fa00 f107 	lsl.w	r1, r0, r7
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ec:	f109 30ff 	add.w	r0, r9, #4294967295
 80003f0:	f080 8087 	bcs.w	8000502 <__udivmoddi4+0x2b2>
 80003f4:	429c      	cmp	r4, r3
 80003f6:	f240 8084 	bls.w	8000502 <__udivmoddi4+0x2b2>
 80003fa:	f1a9 0902 	sub.w	r9, r9, #2
 80003fe:	4473      	add	r3, lr
 8000400:	1b1b      	subs	r3, r3, r4
 8000402:	b2ad      	uxth	r5, r5
 8000404:	fbb3 f0f8 	udiv	r0, r3, r8
 8000408:	fb08 3310 	mls	r3, r8, r0, r3
 800040c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000410:	fb00 fa0a 	mul.w	sl, r0, sl
 8000414:	45a2      	cmp	sl, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1e 0404 	adds.w	r4, lr, r4
 800041c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000420:	d26b      	bcs.n	80004fa <__udivmoddi4+0x2aa>
 8000422:	45a2      	cmp	sl, r4
 8000424:	d969      	bls.n	80004fa <__udivmoddi4+0x2aa>
 8000426:	3802      	subs	r0, #2
 8000428:	4474      	add	r4, lr
 800042a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800042e:	fba0 8902 	umull	r8, r9, r0, r2
 8000432:	eba4 040a 	sub.w	r4, r4, sl
 8000436:	454c      	cmp	r4, r9
 8000438:	46c2      	mov	sl, r8
 800043a:	464b      	mov	r3, r9
 800043c:	d354      	bcc.n	80004e8 <__udivmoddi4+0x298>
 800043e:	d051      	beq.n	80004e4 <__udivmoddi4+0x294>
 8000440:	2e00      	cmp	r6, #0
 8000442:	d069      	beq.n	8000518 <__udivmoddi4+0x2c8>
 8000444:	ebb1 050a 	subs.w	r5, r1, sl
 8000448:	eb64 0403 	sbc.w	r4, r4, r3
 800044c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000450:	40fd      	lsrs	r5, r7
 8000452:	40fc      	lsrs	r4, r7
 8000454:	ea4c 0505 	orr.w	r5, ip, r5
 8000458:	e9c6 5400 	strd	r5, r4, [r6]
 800045c:	2700      	movs	r7, #0
 800045e:	e747      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000460:	f1c2 0320 	rsb	r3, r2, #32
 8000464:	fa20 f703 	lsr.w	r7, r0, r3
 8000468:	4095      	lsls	r5, r2
 800046a:	fa01 f002 	lsl.w	r0, r1, r2
 800046e:	fa21 f303 	lsr.w	r3, r1, r3
 8000472:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000476:	4338      	orrs	r0, r7
 8000478:	0c01      	lsrs	r1, r0, #16
 800047a:	fbb3 f7fe 	udiv	r7, r3, lr
 800047e:	fa1f f885 	uxth.w	r8, r5
 8000482:	fb0e 3317 	mls	r3, lr, r7, r3
 8000486:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048a:	fb07 f308 	mul.w	r3, r7, r8
 800048e:	428b      	cmp	r3, r1
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x256>
 8000496:	1869      	adds	r1, r5, r1
 8000498:	f107 3cff 	add.w	ip, r7, #4294967295
 800049c:	d22f      	bcs.n	80004fe <__udivmoddi4+0x2ae>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d92d      	bls.n	80004fe <__udivmoddi4+0x2ae>
 80004a2:	3f02      	subs	r7, #2
 80004a4:	4429      	add	r1, r5
 80004a6:	1acb      	subs	r3, r1, r3
 80004a8:	b281      	uxth	r1, r0
 80004aa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ae:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b6:	fb00 f308 	mul.w	r3, r0, r8
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x27e>
 80004be:	1869      	adds	r1, r5, r1
 80004c0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c4:	d217      	bcs.n	80004f6 <__udivmoddi4+0x2a6>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d915      	bls.n	80004f6 <__udivmoddi4+0x2a6>
 80004ca:	3802      	subs	r0, #2
 80004cc:	4429      	add	r1, r5
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004d4:	e73b      	b.n	800034e <__udivmoddi4+0xfe>
 80004d6:	4637      	mov	r7, r6
 80004d8:	4630      	mov	r0, r6
 80004da:	e709      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004dc:	4607      	mov	r7, r0
 80004de:	e6e7      	b.n	80002b0 <__udivmoddi4+0x60>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6fb      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e4:	4541      	cmp	r1, r8
 80004e6:	d2ab      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004e8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ec:	eb69 020e 	sbc.w	r2, r9, lr
 80004f0:	3801      	subs	r0, #1
 80004f2:	4613      	mov	r3, r2
 80004f4:	e7a4      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f6:	4660      	mov	r0, ip
 80004f8:	e7e9      	b.n	80004ce <__udivmoddi4+0x27e>
 80004fa:	4618      	mov	r0, r3
 80004fc:	e795      	b.n	800042a <__udivmoddi4+0x1da>
 80004fe:	4667      	mov	r7, ip
 8000500:	e7d1      	b.n	80004a6 <__udivmoddi4+0x256>
 8000502:	4681      	mov	r9, r0
 8000504:	e77c      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000506:	3802      	subs	r0, #2
 8000508:	442c      	add	r4, r5
 800050a:	e747      	b.n	800039c <__udivmoddi4+0x14c>
 800050c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000510:	442b      	add	r3, r5
 8000512:	e72f      	b.n	8000374 <__udivmoddi4+0x124>
 8000514:	4638      	mov	r0, r7
 8000516:	e708      	b.n	800032a <__udivmoddi4+0xda>
 8000518:	4637      	mov	r7, r6
 800051a:	e6e9      	b.n	80002f0 <__udivmoddi4+0xa0>

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <CAN_Init>:
uint32_t				can_tx_mailbox;



void CAN_Init(void)
{
 8000520:	b500      	push	{lr}
 8000522:	b08b      	sub	sp, #44	; 0x2c
	CAN_FilterTypeDef  sFilterConfig;

	/*##-1- Configure the CAN peripheral #######################################*/
	hcan1.Instance = CAN1;
 8000524:	4825      	ldr	r0, [pc, #148]	; (80005bc <CAN_Init+0x9c>)
 8000526:	4b26      	ldr	r3, [pc, #152]	; (80005c0 <CAN_Init+0xa0>)
 8000528:	6003      	str	r3, [r0, #0]
	hcan1.Init.Prescaler = 16;
 800052a:	2310      	movs	r3, #16
 800052c:	6043      	str	r3, [r0, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 800052e:	2300      	movs	r3, #0
 8000530:	6083      	str	r3, [r0, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000532:	60c3      	str	r3, [r0, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_9TQ;
 8000534:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000538:	6102      	str	r2, [r0, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_8TQ;
 800053a:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 800053e:	6142      	str	r2, [r0, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8000540:	7603      	strb	r3, [r0, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 8000542:	7643      	strb	r3, [r0, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8000544:	7683      	strb	r3, [r0, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 8000546:	76c3      	strb	r3, [r0, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000548:	7703      	strb	r3, [r0, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 800054a:	7743      	strb	r3, [r0, #29]

	if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800054c:	f000 ffa2 	bl	8001494 <HAL_CAN_Init>
 8000550:	2800      	cmp	r0, #0
 8000552:	d12a      	bne.n	80005aa <CAN_Init+0x8a>
		/* Initialization Error */
		Error_Handler();
	}

	/*##-2- Configure the CAN Filter ###########################################*/
	sFilterConfig.FilterBank = 0;
 8000554:	2300      	movs	r3, #0
 8000556:	9305      	str	r3, [sp, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;	//use id list
 8000558:	9306      	str	r3, [sp, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;	//16 bit for idlist
 800055a:	2201      	movs	r2, #1
 800055c:	9207      	str	r2, [sp, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 800055e:	9300      	str	r3, [sp, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 8000560:	9301      	str	r3, [sp, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000562:	9302      	str	r3, [sp, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;	//deactivate incoming filter. we getting it all
 8000564:	9303      	str	r3, [sp, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000566:	9304      	str	r3, [sp, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8000568:	9208      	str	r2, [sp, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 800056a:	230e      	movs	r3, #14
 800056c:	9309      	str	r3, [sp, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 800056e:	4669      	mov	r1, sp
 8000570:	4812      	ldr	r0, [pc, #72]	; (80005bc <CAN_Init+0x9c>)
 8000572:	f001 f835 	bl	80015e0 <HAL_CAN_ConfigFilter>
 8000576:	b9d8      	cbnz	r0, 80005b0 <CAN_Init+0x90>
		/* Filter configuration Error */
		Error_Handler();
	}

	/*##-3- Start the CAN peripheral ###########################################*/
	if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8000578:	4810      	ldr	r0, [pc, #64]	; (80005bc <CAN_Init+0x9c>)
 800057a:	f001 f8af 	bl	80016dc <HAL_CAN_Start>
 800057e:	b9d0      	cbnz	r0, 80005b6 <CAN_Init+0x96>
//		/* Notification Error */
//		Error_Handler();
//	}

	/*##-5- Configure Transmission process #####################################*/
	can_tx_header.StdId = 23;
 8000580:	4a10      	ldr	r2, [pc, #64]	; (80005c4 <CAN_Init+0xa4>)
 8000582:	2317      	movs	r3, #23
 8000584:	6013      	str	r3, [r2, #0]
	can_tx_header.ExtId = 0x00;
 8000586:	2300      	movs	r3, #0
 8000588:	6053      	str	r3, [r2, #4]
	can_tx_header.RTR = CAN_RTR_DATA;
 800058a:	60d3      	str	r3, [r2, #12]
	can_tx_header.IDE = CAN_ID_STD;
 800058c:	6093      	str	r3, [r2, #8]
	can_tx_header.DLC = sizeof(float);	//4
 800058e:	2104      	movs	r1, #4
 8000590:	6111      	str	r1, [r2, #16]
	can_tx_header.TransmitGlobalTime = DISABLE;
 8000592:	7513      	strb	r3, [r2, #20]

	can_rx_header.StdId = 0x000;	//gets loaded by getmessage
 8000594:	4a0c      	ldr	r2, [pc, #48]	; (80005c8 <CAN_Init+0xa8>)
 8000596:	6013      	str	r3, [r2, #0]
	can_rx_header.ExtId = 0x00;
 8000598:	6053      	str	r3, [r2, #4]
	can_rx_header.IDE = CAN_ID_STD;
 800059a:	6093      	str	r3, [r2, #8]
	can_rx_header.RTR = CAN_RTR_DATA;
 800059c:	60d3      	str	r3, [r2, #12]
	can_rx_header.DLC = sizeof(float);	//4
 800059e:	6111      	str	r1, [r2, #16]
	can_rx_header.Timestamp = 0;
 80005a0:	6153      	str	r3, [r2, #20]
	can_rx_header.FilterMatchIndex = 0;
 80005a2:	6193      	str	r3, [r2, #24]
}
 80005a4:	b00b      	add	sp, #44	; 0x2c
 80005a6:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 80005aa:	f000 f9b7 	bl	800091c <Error_Handler>
 80005ae:	e7d1      	b.n	8000554 <CAN_Init+0x34>
		Error_Handler();
 80005b0:	f000 f9b4 	bl	800091c <Error_Handler>
 80005b4:	e7e0      	b.n	8000578 <CAN_Init+0x58>
		Error_Handler();
 80005b6:	f000 f9b1 	bl	800091c <Error_Handler>
 80005ba:	e7e1      	b.n	8000580 <CAN_Init+0x60>
 80005bc:	2000039c 	.word	0x2000039c
 80005c0:	40006400 	.word	0x40006400
 80005c4:	20000260 	.word	0x20000260
 80005c8:	200001fc 	.word	0x200001fc

080005cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b570      	push	{r4, r5, r6, lr}
 80005ce:	b0b4      	sub	sp, #208	; 0xd0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d0:	2230      	movs	r2, #48	; 0x30
 80005d2:	2100      	movs	r1, #0
 80005d4:	a828      	add	r0, sp, #160	; 0xa0
 80005d6:	f003 f895 	bl	8003704 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005da:	2400      	movs	r4, #0
 80005dc:	9423      	str	r4, [sp, #140]	; 0x8c
 80005de:	9424      	str	r4, [sp, #144]	; 0x90
 80005e0:	9425      	str	r4, [sp, #148]	; 0x94
 80005e2:	9426      	str	r4, [sp, #152]	; 0x98
 80005e4:	9427      	str	r4, [sp, #156]	; 0x9c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005e6:	2680      	movs	r6, #128	; 0x80
 80005e8:	4632      	mov	r2, r6
 80005ea:	4621      	mov	r1, r4
 80005ec:	a803      	add	r0, sp, #12
 80005ee:	f003 f889 	bl	8003704 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f2:	4b1e      	ldr	r3, [pc, #120]	; (800066c <SystemClock_Config+0xa0>)
 80005f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005f6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80005fa:	641a      	str	r2, [r3, #64]	; 0x40
 80005fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000602:	9301      	str	r3, [sp, #4]
 8000604:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000606:	4a1a      	ldr	r2, [pc, #104]	; (8000670 <SystemClock_Config+0xa4>)
 8000608:	6813      	ldr	r3, [r2, #0]
 800060a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800060e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000612:	6013      	str	r3, [r2, #0]
 8000614:	6813      	ldr	r3, [r2, #0]
 8000616:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800061a:	9302      	str	r3, [sp, #8]
 800061c:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800061e:	2502      	movs	r5, #2
 8000620:	9528      	str	r5, [sp, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000622:	2301      	movs	r3, #1
 8000624:	932b      	str	r3, [sp, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000626:	2310      	movs	r3, #16
 8000628:	932c      	str	r3, [sp, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062a:	952e      	str	r5, [sp, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800062c:	942f      	str	r4, [sp, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 800062e:	2308      	movs	r3, #8
 8000630:	9330      	str	r3, [sp, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000632:	2390      	movs	r3, #144	; 0x90
 8000634:	9331      	str	r3, [sp, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000636:	9532      	str	r5, [sp, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000638:	9533      	str	r5, [sp, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063a:	a828      	add	r0, sp, #160	; 0xa0
 800063c:	f001 fc3a 	bl	8001eb4 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000640:	230f      	movs	r3, #15
 8000642:	9323      	str	r3, [sp, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000644:	9524      	str	r5, [sp, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000646:	9425      	str	r4, [sp, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000648:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800064c:	9326      	str	r3, [sp, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800064e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000652:	9327      	str	r3, [sp, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000654:	2104      	movs	r1, #4
 8000656:	a823      	add	r0, sp, #140	; 0x8c
 8000658:	f001 fe9a 	bl	8002390 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800065c:	9603      	str	r6, [sp, #12]
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800065e:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000660:	a803      	add	r0, sp, #12
 8000662:	f001 ff6f 	bl	8002544 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8000666:	b034      	add	sp, #208	; 0xd0
 8000668:	bd70      	pop	{r4, r5, r6, pc}
 800066a:	bf00      	nop
 800066c:	40023800 	.word	0x40023800
 8000670:	40007000 	.word	0x40007000

08000674 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
void MX_ADC1_Init(void)
{
 8000674:	b570      	push	{r4, r5, r6, lr}
 8000676:	b084      	sub	sp, #16

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8000678:	2500      	movs	r5, #0
 800067a:	9500      	str	r5, [sp, #0]
 800067c:	9501      	str	r5, [sp, #4]
 800067e:	9502      	str	r5, [sp, #8]
 8000680:	9503      	str	r5, [sp, #12]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8000682:	4c10      	ldr	r4, [pc, #64]	; (80006c4 <MX_ADC1_Init+0x50>)
 8000684:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <MX_ADC1_Init+0x54>)
 8000686:	6023      	str	r3, [r4, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000688:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800068c:	6063      	str	r3, [r4, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800068e:	60a5      	str	r5, [r4, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000690:	6125      	str	r5, [r4, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000692:	61a5      	str	r5, [r4, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000694:	f884 5020 	strb.w	r5, [r4, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000698:	62e5      	str	r5, [r4, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800069a:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <MX_ADC1_Init+0x58>)
 800069c:	62a3      	str	r3, [r4, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800069e:	60e5      	str	r5, [r4, #12]
	hadc1.Init.NbrOfConversion = 1;
 80006a0:	2601      	movs	r6, #1
 80006a2:	61e6      	str	r6, [r4, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80006a4:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006a8:	6166      	str	r6, [r4, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006aa:	4620      	mov	r0, r4
 80006ac:	f000 fde0 	bl	8001270 <HAL_ADC_Init>
	{
		Error_Handler();
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 80006b0:	9500      	str	r5, [sp, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80006b2:	9601      	str	r6, [sp, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006b4:	9502      	str	r5, [sp, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b6:	4669      	mov	r1, sp
 80006b8:	4620      	mov	r0, r4
 80006ba:	f000 fe05 	bl	80012c8 <HAL_ADC_ConfigChannel>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80006be:	b004      	add	sp, #16
 80006c0:	bd70      	pop	{r4, r5, r6, pc}
 80006c2:	bf00      	nop
 80006c4:	20000218 	.word	0x20000218
 80006c8:	40012000 	.word	0x40012000
 80006cc:	0f000001 	.word	0x0f000001

080006d0 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
void MX_SPI1_Init(void)
{
 80006d0:	b508      	push	{r3, lr}

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80006d2:	480e      	ldr	r0, [pc, #56]	; (800070c <MX_SPI1_Init+0x3c>)
 80006d4:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <MX_SPI1_Init+0x40>)
 80006d6:	6003      	str	r3, [r0, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80006d8:	f44f 7382 	mov.w	r3, #260	; 0x104
 80006dc:	6043      	str	r3, [r0, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006de:	2300      	movs	r3, #0
 80006e0:	6083      	str	r3, [r0, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006e2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80006e6:	60c2      	str	r2, [r0, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006e8:	6103      	str	r3, [r0, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006ea:	6143      	str	r3, [r0, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80006ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006f0:	6182      	str	r2, [r0, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80006f2:	2238      	movs	r2, #56	; 0x38
 80006f4:	61c2      	str	r2, [r0, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006f6:	6203      	str	r3, [r0, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006f8:	6243      	str	r3, [r0, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006fa:	6283      	str	r3, [r0, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 80006fc:	2207      	movs	r2, #7
 80006fe:	62c2      	str	r2, [r0, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000700:	6303      	str	r3, [r0, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000702:	2308      	movs	r3, #8
 8000704:	6343      	str	r3, [r0, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000706:	f002 f991 	bl	8002a2c <HAL_SPI_Init>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 800070a:	bd08      	pop	{r3, pc}
 800070c:	200002b8 	.word	0x200002b8
 8000710:	40013000 	.word	0x40013000

08000714 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
void MX_TIM1_Init(void)
{
 8000714:	b570      	push	{r4, r5, r6, lr}
 8000716:	b096      	sub	sp, #88	; 0x58

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000718:	2400      	movs	r4, #0
 800071a:	9413      	str	r4, [sp, #76]	; 0x4c
 800071c:	9414      	str	r4, [sp, #80]	; 0x50
 800071e:	9415      	str	r4, [sp, #84]	; 0x54
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000720:	940c      	str	r4, [sp, #48]	; 0x30
 8000722:	940d      	str	r4, [sp, #52]	; 0x34
 8000724:	940e      	str	r4, [sp, #56]	; 0x38
 8000726:	940f      	str	r4, [sp, #60]	; 0x3c
 8000728:	9410      	str	r4, [sp, #64]	; 0x40
 800072a:	9411      	str	r4, [sp, #68]	; 0x44
 800072c:	9412      	str	r4, [sp, #72]	; 0x48
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800072e:	222c      	movs	r2, #44	; 0x2c
 8000730:	4621      	mov	r1, r4
 8000732:	a801      	add	r0, sp, #4
 8000734:	f002 ffe6 	bl	8003704 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000738:	4d22      	ldr	r5, [pc, #136]	; (80007c4 <MX_TIM1_Init+0xb0>)
 800073a:	4b23      	ldr	r3, [pc, #140]	; (80007c8 <MX_TIM1_Init+0xb4>)
 800073c:	602b      	str	r3, [r5, #0]
	htim1.Init.Prescaler = 4;
 800073e:	2604      	movs	r6, #4
 8000740:	606e      	str	r6, [r5, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000742:	60ac      	str	r4, [r5, #8]
	htim1.Init.Period = 255;
 8000744:	23ff      	movs	r3, #255	; 0xff
 8000746:	60eb      	str	r3, [r5, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000748:	612c      	str	r4, [r5, #16]
	htim1.Init.RepetitionCounter = 0;
 800074a:	616c      	str	r4, [r5, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800074c:	61ac      	str	r4, [r5, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800074e:	4628      	mov	r0, r5
 8000750:	f002 fb3a 	bl	8002dc8 <HAL_TIM_PWM_Init>
	{
		Error_Handler();
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000754:	9413      	str	r4, [sp, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000756:	9414      	str	r4, [sp, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000758:	9415      	str	r4, [sp, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800075a:	a913      	add	r1, sp, #76	; 0x4c
 800075c:	4628      	mov	r0, r5
 800075e:	f002 fc57 	bl	8003010 <HAL_TIMEx_MasterConfigSynchronization>
	{
		Error_Handler();
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000762:	2360      	movs	r3, #96	; 0x60
 8000764:	930c      	str	r3, [sp, #48]	; 0x30
	sConfigOC.Pulse = 0;
 8000766:	940d      	str	r4, [sp, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000768:	940e      	str	r4, [sp, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800076a:	940f      	str	r4, [sp, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800076c:	9410      	str	r4, [sp, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800076e:	9411      	str	r4, [sp, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000770:	9412      	str	r4, [sp, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000772:	4622      	mov	r2, r4
 8000774:	a90c      	add	r1, sp, #48	; 0x30
 8000776:	4628      	mov	r0, r5
 8000778:	f002 fb78 	bl	8002e6c <HAL_TIM_PWM_ConfigChannel>
	{
		Error_Handler();
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800077c:	4632      	mov	r2, r6
 800077e:	a90c      	add	r1, sp, #48	; 0x30
 8000780:	4628      	mov	r0, r5
 8000782:	f002 fb73 	bl	8002e6c <HAL_TIM_PWM_ConfigChannel>
	{
		Error_Handler();
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000786:	2208      	movs	r2, #8
 8000788:	a90c      	add	r1, sp, #48	; 0x30
 800078a:	4628      	mov	r0, r5
 800078c:	f002 fb6e 	bl	8002e6c <HAL_TIM_PWM_ConfigChannel>
	{
		Error_Handler();
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000790:	9401      	str	r4, [sp, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000792:	9402      	str	r4, [sp, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000794:	9403      	str	r4, [sp, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000796:	9404      	str	r4, [sp, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000798:	9405      	str	r4, [sp, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800079a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800079e:	9306      	str	r3, [sp, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 80007a0:	9407      	str	r4, [sp, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80007a2:	9408      	str	r4, [sp, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80007a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80007a8:	9309      	str	r3, [sp, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 80007aa:	940a      	str	r4, [sp, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007ac:	940b      	str	r4, [sp, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007ae:	eb0d 0106 	add.w	r1, sp, r6
 80007b2:	4628      	mov	r0, r5
 80007b4:	f002 fc7c 	bl	80030b0 <HAL_TIMEx_ConfigBreakDeadTime>
		Error_Handler();
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 80007b8:	4628      	mov	r0, r5
 80007ba:	f000 fbbd 	bl	8000f38 <HAL_TIM_MspPostInit>

}
 80007be:	b016      	add	sp, #88	; 0x58
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	bf00      	nop
 80007c4:	20000278 	.word	0x20000278
 80007c8:	40010000 	.word	0x40010000

080007cc <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
void MX_USART2_UART_Init(void)
{
 80007cc:	b508      	push	{r3, lr}
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80007ce:	4809      	ldr	r0, [pc, #36]	; (80007f4 <MX_USART2_UART_Init+0x28>)
 80007d0:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <MX_USART2_UART_Init+0x2c>)
 80007d2:	6003      	str	r3, [r0, #0]
	huart2.Init.BaudRate = 115200;
 80007d4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80007d8:	6043      	str	r3, [r0, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007da:	2300      	movs	r3, #0
 80007dc:	6083      	str	r3, [r0, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80007de:	60c3      	str	r3, [r0, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80007e0:	6103      	str	r3, [r0, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80007e2:	220c      	movs	r2, #12
 80007e4:	6142      	str	r2, [r0, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e6:	6183      	str	r3, [r0, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e8:	61c3      	str	r3, [r0, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ea:	6203      	str	r3, [r0, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007ec:	6243      	str	r3, [r0, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ee:	f002 ff34 	bl	800365a <HAL_UART_Init>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80007f2:	bd08      	pop	{r3, pc}
 80007f4:	2000031c 	.word	0x2000031c
 80007f8:	40004400 	.word	0x40004400

080007fc <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
void MX_GPIO_Init(void)
{
 80007fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000800:	b088      	sub	sp, #32
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000802:	2400      	movs	r4, #0
 8000804:	9403      	str	r4, [sp, #12]
 8000806:	9404      	str	r4, [sp, #16]
 8000808:	9405      	str	r4, [sp, #20]
 800080a:	9406      	str	r4, [sp, #24]
 800080c:	9407      	str	r4, [sp, #28]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800080e:	4b3e      	ldr	r3, [pc, #248]	; (8000908 <MX_GPIO_Init+0x10c>)
 8000810:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000812:	f042 0204 	orr.w	r2, r2, #4
 8000816:	631a      	str	r2, [r3, #48]	; 0x30
 8000818:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800081a:	f002 0204 	and.w	r2, r2, #4
 800081e:	9200      	str	r2, [sp, #0]
 8000820:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000822:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000824:	f042 0201 	orr.w	r2, r2, #1
 8000828:	631a      	str	r2, [r3, #48]	; 0x30
 800082a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800082c:	f002 0201 	and.w	r2, r2, #1
 8000830:	9201      	str	r2, [sp, #4]
 8000832:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000834:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000836:	f042 0202 	orr.w	r2, r2, #2
 800083a:	631a      	str	r2, [r3, #48]	; 0x30
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0302 	and.w	r3, r3, #2
 8000842:	9302      	str	r3, [sp, #8]
 8000844:	9b02      	ldr	r3, [sp, #8]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, NRF_SS_Pin|NRF_CE_Pin, GPIO_PIN_RESET);
 8000846:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000918 <MX_GPIO_Init+0x11c>
 800084a:	4622      	mov	r2, r4
 800084c:	f248 0104 	movw	r1, #32772	; 0x8004
 8000850:	4640      	mov	r0, r8
 8000852:	f001 fb29 	bl	8001ea8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(EN_HP_GPIO_Port, EN_HP_Pin, GPIO_PIN_RESET);
 8000856:	4d2d      	ldr	r5, [pc, #180]	; (800090c <MX_GPIO_Init+0x110>)
 8000858:	4622      	mov	r2, r4
 800085a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800085e:	4628      	mov	r0, r5
 8000860:	f001 fb22 	bl	8001ea8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(MPU_SS_GPIO_Port, MPU_SS_Pin, GPIO_PIN_RESET);
 8000864:	4e2a      	ldr	r6, [pc, #168]	; (8000910 <MX_GPIO_Init+0x114>)
 8000866:	4622      	mov	r2, r4
 8000868:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800086c:	4630      	mov	r0, r6
 800086e:	f001 fb1b 	bl	8001ea8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : NRF_INT_Pin */
	GPIO_InitStruct.Pin = NRF_INT_Pin;
 8000872:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000876:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000878:	2302      	movs	r3, #2
 800087a:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	9405      	str	r4, [sp, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087e:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct.Alternate = GPIO_AF15_EVENTOUT;
 8000880:	230f      	movs	r3, #15
 8000882:	9307      	str	r3, [sp, #28]
	HAL_GPIO_Init(NRF_INT_GPIO_Port, &GPIO_InitStruct);
 8000884:	a903      	add	r1, sp, #12
 8000886:	4640      	mov	r0, r8
 8000888:	f001 fa2c 	bl	8001ce4 <HAL_GPIO_Init>

	/*Configure GPIO pins : NRF_SS_Pin NRF_CE_Pin */
	GPIO_InitStruct.Pin = NRF_SS_Pin|NRF_CE_Pin;
 800088c:	f248 0304 	movw	r3, #32772	; 0x8004
 8000890:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000892:	2701      	movs	r7, #1
 8000894:	9704      	str	r7, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	9405      	str	r4, [sp, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000898:	9406      	str	r4, [sp, #24]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800089a:	a903      	add	r1, sp, #12
 800089c:	4640      	mov	r0, r8
 800089e:	f001 fa21 	bl	8001ce4 <HAL_GPIO_Init>

	/*Configure GPIO pin : EN_HP_Pin */
	GPIO_InitStruct.Pin = EN_HP_Pin;
 80008a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008a6:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a8:	9704      	str	r7, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	9405      	str	r4, [sp, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	9406      	str	r4, [sp, #24]
	HAL_GPIO_Init(EN_HP_GPIO_Port, &GPIO_InitStruct);
 80008ae:	a903      	add	r1, sp, #12
 80008b0:	4628      	mov	r0, r5
 80008b2:	f001 fa17 	bl	8001ce4 <HAL_GPIO_Init>

	/*Configure GPIO pins : GP_SW_Pin SWITCH_Pin */
	GPIO_InitStruct.Pin = GP_SW_Pin|SWITCH_Pin;
 80008b6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80008ba:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008bc:	9404      	str	r4, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	9405      	str	r4, [sp, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c0:	a903      	add	r1, sp, #12
 80008c2:	4628      	mov	r0, r5
 80008c4:	f001 fa0e 	bl	8001ce4 <HAL_GPIO_Init>

	/*Configure GPIO pin : MPU_INT_Pin */
	GPIO_InitStruct.Pin = MPU_INT_Pin;
 80008c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80008cc:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ce:	4b11      	ldr	r3, [pc, #68]	; (8000914 <MX_GPIO_Init+0x118>)
 80008d0:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	9405      	str	r4, [sp, #20]
	HAL_GPIO_Init(MPU_INT_GPIO_Port, &GPIO_InitStruct);
 80008d4:	a903      	add	r1, sp, #12
 80008d6:	4630      	mov	r0, r6
 80008d8:	f001 fa04 	bl	8001ce4 <HAL_GPIO_Init>

	/*Configure GPIO pin : MPU_SS_Pin */
	GPIO_InitStruct.Pin = MPU_SS_Pin;
 80008dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008e0:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e2:	9704      	str	r7, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	9405      	str	r4, [sp, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e6:	9406      	str	r4, [sp, #24]
	HAL_GPIO_Init(MPU_SS_GPIO_Port, &GPIO_InitStruct);
 80008e8:	a903      	add	r1, sp, #12
 80008ea:	4630      	mov	r0, r6
 80008ec:	f001 f9fa 	bl	8001ce4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB3 PB4 PB5 PB6
                           PB7 */
	GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80008f0:	23f8      	movs	r3, #248	; 0xf8
 80008f2:	9303      	str	r3, [sp, #12]
			|GPIO_PIN_7;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008f4:	2303      	movs	r3, #3
 80008f6:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	9405      	str	r4, [sp, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008fa:	a903      	add	r1, sp, #12
 80008fc:	4628      	mov	r0, r5
 80008fe:	f001 f9f1 	bl	8001ce4 <HAL_GPIO_Init>

}
 8000902:	b008      	add	sp, #32
 8000904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000908:	40023800 	.word	0x40023800
 800090c:	40020400 	.word	0x40020400
 8000910:	40020000 	.word	0x40020000
 8000914:	10110000 	.word	0x10110000
 8000918:	40020800 	.word	0x40020800

0800091c <Error_Handler>:
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 800091c:	4770      	bx	lr
	...

08000920 <can_comm_misc>:
				.misc_cmd = LED_OFF
		}
};

void can_comm_misc(joint * chain, int num_joints)
{
 8000920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000922:	4606      	mov	r6, r0
 8000924:	460f      	mov	r7, r1
	for(int i = 0; i < num_joints; i++)
 8000926:	2500      	movs	r5, #0
 8000928:	e000      	b.n	800092c <can_comm_misc+0xc>
 800092a:	3501      	adds	r5, #1
 800092c:	42bd      	cmp	r5, r7
 800092e:	da34      	bge.n	800099a <can_comm_misc+0x7a>
	{
		can_tx_header.StdId = 0x7FF - chain[i].id;
 8000930:	2398      	movs	r3, #152	; 0x98
 8000932:	fb03 f305 	mul.w	r3, r3, r5
 8000936:	18f2      	adds	r2, r6, r3
 8000938:	5af1      	ldrh	r1, [r6, r3]
 800093a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800093e:	1a5b      	subs	r3, r3, r1
 8000940:	4916      	ldr	r1, [pc, #88]	; (800099c <can_comm_misc+0x7c>)
 8000942:	600b      	str	r3, [r1, #0]
		can_tx_data.d[3]=chain[i].misc_cmd;
 8000944:	f892 3094 	ldrb.w	r3, [r2, #148]	; 0x94
 8000948:	4a15      	ldr	r2, [pc, #84]	; (80009a0 <can_comm_misc+0x80>)
 800094a:	70d3      	strb	r3, [r2, #3]
		HAL_CAN_AddTxMessage(&hcan1, &can_tx_header, can_tx_data.d, &can_tx_mailbox);
 800094c:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <can_comm_misc+0x84>)
 800094e:	4816      	ldr	r0, [pc, #88]	; (80009a8 <can_comm_misc+0x88>)
 8000950:	f000 fef2 	bl	8001738 <HAL_CAN_AddTxMessage>

		for(uint32_t exp_ts = HAL_GetTick()+1; HAL_GetTick() < exp_ts;)
 8000954:	f000 fbd8 	bl	8001108 <HAL_GetTick>
 8000958:	1c44      	adds	r4, r0, #1
 800095a:	f000 fbd5 	bl	8001108 <HAL_GetTick>
 800095e:	42a0      	cmp	r0, r4
 8000960:	d206      	bcs.n	8000970 <can_comm_misc+0x50>
		{
			if(HAL_CAN_IsTxMessagePending(&hcan1,can_tx_mailbox) == 0)
 8000962:	4b10      	ldr	r3, [pc, #64]	; (80009a4 <can_comm_misc+0x84>)
 8000964:	6819      	ldr	r1, [r3, #0]
 8000966:	4810      	ldr	r0, [pc, #64]	; (80009a8 <can_comm_misc+0x88>)
 8000968:	f000 ff5b 	bl	8001822 <HAL_CAN_IsTxMessagePending>
 800096c:	2800      	cmp	r0, #0
 800096e:	d1f4      	bne.n	800095a <can_comm_misc+0x3a>
				break;
		}
		for(uint32_t exp_ts = HAL_GetTick()+10;  HAL_GetTick() < exp_ts;)
 8000970:	f000 fbca 	bl	8001108 <HAL_GetTick>
 8000974:	f100 040a 	add.w	r4, r0, #10
 8000978:	f000 fbc6 	bl	8001108 <HAL_GetTick>
 800097c:	42a0      	cmp	r0, r4
 800097e:	d2d4      	bcs.n	800092a <can_comm_misc+0xa>
		{
			if(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) >= 1)
 8000980:	2100      	movs	r1, #0
 8000982:	4809      	ldr	r0, [pc, #36]	; (80009a8 <can_comm_misc+0x88>)
 8000984:	f000 fff9 	bl	800197a <HAL_CAN_GetRxFifoFillLevel>
 8000988:	2800      	cmp	r0, #0
 800098a:	d0f5      	beq.n	8000978 <can_comm_misc+0x58>
			{
				if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &can_rx_header, can_rx_data.d) != HAL_OK)
 800098c:	4b07      	ldr	r3, [pc, #28]	; (80009ac <can_comm_misc+0x8c>)
 800098e:	4a08      	ldr	r2, [pc, #32]	; (80009b0 <can_comm_misc+0x90>)
 8000990:	2100      	movs	r1, #0
 8000992:	4805      	ldr	r0, [pc, #20]	; (80009a8 <can_comm_misc+0x88>)
 8000994:	f000 ff57 	bl	8001846 <HAL_CAN_GetRxMessage>
				{}
				break;
 8000998:	e7c7      	b.n	800092a <can_comm_misc+0xa>
			}
		}
	}
}
 800099a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800099c:	20000260 	.word	0x20000260
 80009a0:	20000000 	.word	0x20000000
 80009a4:	200001f8 	.word	0x200001f8
 80009a8:	2000039c 	.word	0x2000039c
 80009ac:	200001f4 	.word	0x200001f4
 80009b0:	200001fc 	.word	0x200001fc

080009b4 <can_comm_motor>:

void can_comm_motor(joint * chain, int num_joints)
{
 80009b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80009b8:	4607      	mov	r7, r0
 80009ba:	4688      	mov	r8, r1
	for(int i = 0; i < num_joints; i++)
 80009bc:	2600      	movs	r6, #0
 80009be:	e016      	b.n	80009ee <can_comm_motor+0x3a>
				{
					if(can_rx_header.StdId == chain[i].id)
						chain[i].q = can_rx_data.v;
					else
					{
						for(int sb = 0; sb < num_joints; sb++)	//sb = search base
 80009c0:	3201      	adds	r2, #1
 80009c2:	4542      	cmp	r2, r8
 80009c4:	da12      	bge.n	80009ec <can_comm_motor+0x38>
						{
							int sidx = (sb + i) % num_joints;
 80009c6:	18b1      	adds	r1, r6, r2
 80009c8:	fb91 f3f8 	sdiv	r3, r1, r8
 80009cc:	fb08 1113 	mls	r1, r8, r3, r1
							if(can_rx_header.StdId == chain[sidx].id)
 80009d0:	2398      	movs	r3, #152	; 0x98
 80009d2:	fb03 f301 	mul.w	r3, r3, r1
 80009d6:	18f9      	adds	r1, r7, r3
 80009d8:	5afb      	ldrh	r3, [r7, r3]
 80009da:	4298      	cmp	r0, r3
 80009dc:	d1f0      	bne.n	80009c0 <can_comm_motor+0xc>
								chain[sidx].q = can_rx_data.v;
 80009de:	4b24      	ldr	r3, [pc, #144]	; (8000a70 <can_comm_motor+0xbc>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80009e6:	e7eb      	b.n	80009c0 <can_comm_motor+0xc>
						for(int sb = 0; sb < num_joints; sb++)	//sb = search base
 80009e8:	2200      	movs	r2, #0
 80009ea:	e7ea      	b.n	80009c2 <can_comm_motor+0xe>
	for(int i = 0; i < num_joints; i++)
 80009ec:	3601      	adds	r6, #1
 80009ee:	4546      	cmp	r6, r8
 80009f0:	da3b      	bge.n	8000a6a <can_comm_motor+0xb6>
		can_tx_header.StdId = chain[i].id;
 80009f2:	2598      	movs	r5, #152	; 0x98
 80009f4:	fb05 f506 	mul.w	r5, r5, r6
 80009f8:	eb07 0905 	add.w	r9, r7, r5
 80009fc:	5b7b      	ldrh	r3, [r7, r5]
 80009fe:	491d      	ldr	r1, [pc, #116]	; (8000a74 <can_comm_motor+0xc0>)
 8000a00:	600b      	str	r3, [r1, #0]
		HAL_CAN_AddTxMessage(&hcan1, &can_tx_header, chain[i].tau.d, &can_tx_mailbox);
 8000a02:	4b1d      	ldr	r3, [pc, #116]	; (8000a78 <can_comm_motor+0xc4>)
 8000a04:	f109 028c 	add.w	r2, r9, #140	; 0x8c
 8000a08:	481c      	ldr	r0, [pc, #112]	; (8000a7c <can_comm_motor+0xc8>)
 8000a0a:	f000 fe95 	bl	8001738 <HAL_CAN_AddTxMessage>
		for(uint32_t exp_ts = HAL_GetTick()+1; HAL_GetTick() < exp_ts;)
 8000a0e:	f000 fb7b 	bl	8001108 <HAL_GetTick>
 8000a12:	1c44      	adds	r4, r0, #1
 8000a14:	f000 fb78 	bl	8001108 <HAL_GetTick>
 8000a18:	42a0      	cmp	r0, r4
 8000a1a:	d206      	bcs.n	8000a2a <can_comm_motor+0x76>
			if(HAL_CAN_IsTxMessagePending(&hcan1,can_tx_mailbox) == 0)
 8000a1c:	4b16      	ldr	r3, [pc, #88]	; (8000a78 <can_comm_motor+0xc4>)
 8000a1e:	6819      	ldr	r1, [r3, #0]
 8000a20:	4816      	ldr	r0, [pc, #88]	; (8000a7c <can_comm_motor+0xc8>)
 8000a22:	f000 fefe 	bl	8001822 <HAL_CAN_IsTxMessagePending>
 8000a26:	2800      	cmp	r0, #0
 8000a28:	d1f4      	bne.n	8000a14 <can_comm_motor+0x60>
		for(uint32_t exp_ts = HAL_GetTick()+10;  HAL_GetTick() < exp_ts;)
 8000a2a:	f000 fb6d 	bl	8001108 <HAL_GetTick>
 8000a2e:	f100 040a 	add.w	r4, r0, #10
 8000a32:	f000 fb69 	bl	8001108 <HAL_GetTick>
 8000a36:	42a0      	cmp	r0, r4
 8000a38:	d2d8      	bcs.n	80009ec <can_comm_motor+0x38>
			if(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) >= 1)
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	480f      	ldr	r0, [pc, #60]	; (8000a7c <can_comm_motor+0xc8>)
 8000a3e:	f000 ff9c 	bl	800197a <HAL_CAN_GetRxFifoFillLevel>
 8000a42:	2800      	cmp	r0, #0
 8000a44:	d0f5      	beq.n	8000a32 <can_comm_motor+0x7e>
				if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &can_rx_header, can_rx_data.d) == HAL_OK)
 8000a46:	4b0a      	ldr	r3, [pc, #40]	; (8000a70 <can_comm_motor+0xbc>)
 8000a48:	4a0d      	ldr	r2, [pc, #52]	; (8000a80 <can_comm_motor+0xcc>)
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	480b      	ldr	r0, [pc, #44]	; (8000a7c <can_comm_motor+0xc8>)
 8000a4e:	f000 fefa 	bl	8001846 <HAL_CAN_GetRxMessage>
 8000a52:	2800      	cmp	r0, #0
 8000a54:	d1ca      	bne.n	80009ec <can_comm_motor+0x38>
					if(can_rx_header.StdId == chain[i].id)
 8000a56:	4b0a      	ldr	r3, [pc, #40]	; (8000a80 <can_comm_motor+0xcc>)
 8000a58:	6818      	ldr	r0, [r3, #0]
 8000a5a:	5b7b      	ldrh	r3, [r7, r5]
 8000a5c:	4298      	cmp	r0, r3
 8000a5e:	d1c3      	bne.n	80009e8 <can_comm_motor+0x34>
						chain[i].q = can_rx_data.v;
 8000a60:	4b03      	ldr	r3, [pc, #12]	; (8000a70 <can_comm_motor+0xbc>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f8c9 3088 	str.w	r3, [r9, #136]	; 0x88
 8000a68:	e7c0      	b.n	80009ec <can_comm_motor+0x38>
				}
				break;
			}
		}
	}
}
 8000a6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a6e:	bf00      	nop
 8000a70:	200001f4 	.word	0x200001f4
 8000a74:	20000260 	.word	0x20000260
 8000a78:	200001f8 	.word	0x200001f8
 8000a7c:	2000039c 	.word	0x2000039c
 8000a80:	200001fc 	.word	0x200001fc

08000a84 <main>:

int main(void)
{
 8000a84:	b530      	push	{r4, r5, lr}
 8000a86:	b085      	sub	sp, #20

	HAL_Init();
 8000a88:	f000 fb26 	bl	80010d8 <HAL_Init>

	SystemClock_Config();
 8000a8c:	f7ff fd9e 	bl	80005cc <SystemClock_Config>

	MX_GPIO_Init();
 8000a90:	f7ff feb4 	bl	80007fc <MX_GPIO_Init>
	MX_ADC1_Init();
 8000a94:	f7ff fdee 	bl	8000674 <MX_ADC1_Init>
	HAL_Delay(100);
 8000a98:	2064      	movs	r0, #100	; 0x64
 8000a9a:	f000 fb3b 	bl	8001114 <HAL_Delay>
	CAN_Init();
 8000a9e:	f7ff fd3f 	bl	8000520 <CAN_Init>
	//	MX_CAN1_Init();
	MX_USART2_UART_Init();
 8000aa2:	f7ff fe93 	bl	80007cc <MX_USART2_UART_Init>
	MX_SPI1_Init();
 8000aa6:	f7ff fe13 	bl	80006d0 <MX_SPI1_Init>
	MX_TIM1_Init();
 8000aaa:	f7ff fe33 	bl	8000714 <MX_TIM1_Init>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000aae:	4c55      	ldr	r4, [pc, #340]	; (8000c04 <main+0x180>)
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	4620      	mov	r0, r4
 8000ab4:	f002 fa86 	bl	8002fc4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000ab8:	2104      	movs	r1, #4
 8000aba:	4620      	mov	r0, r4
 8000abc:	f002 fa82 	bl	8002fc4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000ac0:	2108      	movs	r1, #8
 8000ac2:	4620      	mov	r0, r4
 8000ac4:	f002 fa7e 	bl	8002fc4 <HAL_TIM_PWM_Start>

	can_comm_misc(chain,NUM_JOINTS);
 8000ac8:	4c4f      	ldr	r4, [pc, #316]	; (8000c08 <main+0x184>)
 8000aca:	2103      	movs	r1, #3
 8000acc:	4620      	mov	r0, r4
 8000ace:	f7ff ff27 	bl	8000920 <can_comm_misc>
	HAL_Delay(100);
 8000ad2:	2064      	movs	r0, #100	; 0x64
 8000ad4:	f000 fb1e 	bl	8001114 <HAL_Delay>
	chain[0].misc_cmd = DIS_UART_ENC;
 8000ad8:	2335      	movs	r3, #53	; 0x35
 8000ada:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
	can_comm_misc(chain,NUM_JOINTS);
 8000ade:	2103      	movs	r1, #3
 8000ae0:	4620      	mov	r0, r4
 8000ae2:	f7ff ff1d 	bl	8000920 <can_comm_misc>

	int led_state = NUM_JOINTS;
	uint32_t can_tx_ts = 0;
	chain[0].tau.v = 15.f;
 8000ae6:	4b49      	ldr	r3, [pc, #292]	; (8000c0c <main+0x188>)
 8000ae8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	chain[1].tau.v = 0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
	can_comm_motor(chain, NUM_JOINTS);
 8000af2:	2103      	movs	r1, #3
 8000af4:	4620      	mov	r0, r4
 8000af6:	f7ff ff5d 	bl	80009b4 <can_comm_motor>

	rgb_play((rgb_t){0,255,0});
 8000afa:	2400      	movs	r4, #0
 8000afc:	f88d 4004 	strb.w	r4, [sp, #4]
 8000b00:	23ff      	movs	r3, #255	; 0xff
 8000b02:	f88d 3005 	strb.w	r3, [sp, #5]
 8000b06:	f88d 4006 	strb.w	r4, [sp, #6]
 8000b0a:	9801      	ldr	r0, [sp, #4]
 8000b0c:	f000 f882 	bl	8000c14 <rgb_play>
	int led_state = NUM_JOINTS;
 8000b10:	2503      	movs	r5, #3
 8000b12:	e064      	b.n	8000bde <main+0x15a>
	{
		if(HAL_GetTick()>can_tx_ts)
		{
			if(led_state == NUM_JOINTS)
			{
				rgb_play((rgb_t){0,255,0});
 8000b14:	2400      	movs	r4, #0
 8000b16:	f88d 4008 	strb.w	r4, [sp, #8]
 8000b1a:	23ff      	movs	r3, #255	; 0xff
 8000b1c:	f88d 3009 	strb.w	r3, [sp, #9]
 8000b20:	f88d 400a 	strb.w	r4, [sp, #10]
 8000b24:	9802      	ldr	r0, [sp, #8]
 8000b26:	f000 f875 	bl	8000c14 <rgb_play>
				for(int i = 0; i < NUM_JOINTS; i++)
 8000b2a:	4623      	mov	r3, r4
 8000b2c:	e007      	b.n	8000b3e <main+0xba>
					chain[i].misc_cmd = LED_OFF;
 8000b2e:	4936      	ldr	r1, [pc, #216]	; (8000c08 <main+0x184>)
 8000b30:	2298      	movs	r2, #152	; 0x98
 8000b32:	fb02 1203 	mla	r2, r2, r3, r1
 8000b36:	21fe      	movs	r1, #254	; 0xfe
 8000b38:	f882 1094 	strb.w	r1, [r2, #148]	; 0x94
				for(int i = 0; i < NUM_JOINTS; i++)
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	2b02      	cmp	r3, #2
 8000b40:	ddf5      	ble.n	8000b2e <main+0xaa>
 8000b42:	e010      	b.n	8000b66 <main+0xe2>
			}
			else
			{
				rgb_play((rgb_t){0,0,0});
				for(int i = 0; i < NUM_JOINTS; i++)
					chain[i].misc_cmd = LED_OFF;
 8000b44:	4930      	ldr	r1, [pc, #192]	; (8000c08 <main+0x184>)
 8000b46:	2298      	movs	r2, #152	; 0x98
 8000b48:	fb02 1203 	mla	r2, r2, r3, r1
 8000b4c:	21fe      	movs	r1, #254	; 0xfe
 8000b4e:	f882 1094 	strb.w	r1, [r2, #148]	; 0x94
				for(int i = 0; i < NUM_JOINTS; i++)
 8000b52:	3301      	adds	r3, #1
 8000b54:	2b02      	cmp	r3, #2
 8000b56:	ddf5      	ble.n	8000b44 <main+0xc0>
				chain[led_state].misc_cmd = LED_ON;
 8000b58:	4a2b      	ldr	r2, [pc, #172]	; (8000c08 <main+0x184>)
 8000b5a:	2398      	movs	r3, #152	; 0x98
 8000b5c:	fb03 2305 	mla	r3, r3, r5, r2
 8000b60:	22de      	movs	r2, #222	; 0xde
 8000b62:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
			}

			led_state = (led_state + 1) % (NUM_JOINTS + 1);
 8000b66:	3501      	adds	r5, #1
 8000b68:	426b      	negs	r3, r5
 8000b6a:	f005 0503 	and.w	r5, r5, #3
 8000b6e:	f003 0303 	and.w	r3, r3, #3
 8000b72:	bf58      	it	pl
 8000b74:	425d      	negpl	r5, r3
			can_tx_ts = HAL_GetTick()+1000;
 8000b76:	f000 fac7 	bl	8001108 <HAL_GetTick>
 8000b7a:	f500 747a 	add.w	r4, r0, #1000	; 0x3e8
			can_comm_misc(chain,NUM_JOINTS);
 8000b7e:	2103      	movs	r1, #3
 8000b80:	4821      	ldr	r0, [pc, #132]	; (8000c08 <main+0x184>)
 8000b82:	f7ff fecd 	bl	8000920 <can_comm_misc>
		}
		float t = ((float)HAL_GetTick())*.001f;
 8000b86:	f000 fabf 	bl	8001108 <HAL_GetTick>
 8000b8a:	ee07 0a90 	vmov	s15, r0
 8000b8e:	eeb8 0a67 	vcvt.f32.u32	s0, s15
		chain[0].qd = 3.f*sin_fast(t);
 8000b92:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8000c10 <main+0x18c>
 8000b96:	ee20 0a27 	vmul.f32	s0, s0, s15
 8000b9a:	f000 f87b 	bl	8000c94 <sin_fast>
 8000b9e:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8000ba2:	ee20 0a27 	vmul.f32	s0, s0, s15
 8000ba6:	4818      	ldr	r0, [pc, #96]	; (8000c08 <main+0x184>)
 8000ba8:	ed80 0a24 	vstr	s0, [r0, #144]	; 0x90
		chain[0].tau.v = 5.f*(chain[0].qd - chain[0].q);
 8000bac:	edd0 7a22 	vldr	s15, [r0, #136]	; 0x88
 8000bb0:	ee70 7a67 	vsub.f32	s15, s0, s15
 8000bb4:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8000bb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bbc:	edc0 7a23 	vstr	s15, [r0, #140]	; 0x8c
		chain[1].qd = -chain[0].qd;
 8000bc0:	eeb1 0a40 	vneg.f32	s0, s0
 8000bc4:	ed80 0a4a 	vstr	s0, [r0, #296]	; 0x128
		chain[1].tau.v = 5.f*(chain[1].qd-chain[1].q);
 8000bc8:	edd0 7a48 	vldr	s15, [r0, #288]	; 0x120
 8000bcc:	ee30 0a67 	vsub.f32	s0, s0, s15
 8000bd0:	ee20 0a07 	vmul.f32	s0, s0, s14
 8000bd4:	ed80 0a49 	vstr	s0, [r0, #292]	; 0x124
		can_comm_motor(chain, NUM_JOINTS);
 8000bd8:	2103      	movs	r1, #3
 8000bda:	f7ff feeb 	bl	80009b4 <can_comm_motor>
		if(HAL_GetTick()>can_tx_ts)
 8000bde:	f000 fa93 	bl	8001108 <HAL_GetTick>
 8000be2:	42a0      	cmp	r0, r4
 8000be4:	d9cf      	bls.n	8000b86 <main+0x102>
			if(led_state == NUM_JOINTS)
 8000be6:	2d03      	cmp	r5, #3
 8000be8:	d094      	beq.n	8000b14 <main+0x90>
				rgb_play((rgb_t){0,0,0});
 8000bea:	2400      	movs	r4, #0
 8000bec:	f88d 400c 	strb.w	r4, [sp, #12]
 8000bf0:	f88d 400d 	strb.w	r4, [sp, #13]
 8000bf4:	f88d 400e 	strb.w	r4, [sp, #14]
 8000bf8:	9803      	ldr	r0, [sp, #12]
 8000bfa:	f000 f80b 	bl	8000c14 <rgb_play>
				for(int i = 0; i < NUM_JOINTS; i++)
 8000bfe:	4623      	mov	r3, r4
 8000c00:	e7a8      	b.n	8000b54 <main+0xd0>
 8000c02:	bf00      	nop
 8000c04:	20000278 	.word	0x20000278
 8000c08:	20000004 	.word	0x20000004
 8000c0c:	41700000 	.word	0x41700000
 8000c10:	3a83126f 	.word	0x3a83126f

08000c14 <rgb_play>:
 *      Author: Ocanath Robotman
 */
#include "rgb.h"

void rgb_play(rgb_t rgb)
{
 8000c14:	b082      	sub	sp, #8
 8000c16:	9001      	str	r0, [sp, #4]
	TIMER_UPDATE_DUTY(rgb.b, rgb.g, rgb.r);
 8000c18:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <rgb_play+0x2c>)
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	f042 0202 	orr.w	r2, r2, #2
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8000c26:	635a      	str	r2, [r3, #52]	; 0x34
 8000c28:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8000c2c:	639a      	str	r2, [r3, #56]	; 0x38
 8000c2e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8000c32:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	f022 0202 	bic.w	r2, r2, #2
 8000c3a:	601a      	str	r2, [r3, #0]
}
 8000c3c:	b002      	add	sp, #8
 8000c3e:	4770      	bx	lr
 8000c40:	40010000 	.word	0x40010000

08000c44 <fmod_2pi>:
 */
float fmod_2pi(float in)
{
	uint8_t aneg = 0;
	float in_eval = in;
	if(in < 0)
 8000c44:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8000c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c4c:	d412      	bmi.n	8000c74 <fmod_2pi+0x30>
	float in_eval = in;
 8000c4e:	eef0 7a40 	vmov.f32	s15, s0
	uint8_t aneg = 0;
 8000c52:	2300      	movs	r3, #0
	{
		aneg = 1;
		in_eval = -in;
	}
	float fv = (float)((int)(in_eval*ONE_BY_TWO_PI));
 8000c54:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000c8c <fmod_2pi+0x48>
 8000c58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	if(aneg == 1)
 8000c64:	b953      	cbnz	r3, 8000c7c <fmod_2pi+0x38>
		fv = (-fv)-1;
	return in-TWO_PI*fv;
 8000c66:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8000c90 <fmod_2pi+0x4c>
 8000c6a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000c6e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8000c72:	4770      	bx	lr
		in_eval = -in;
 8000c74:	eef1 7a40 	vneg.f32	s15, s0
		aneg = 1;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	e7eb      	b.n	8000c54 <fmod_2pi+0x10>
		fv = (-fv)-1;
 8000c7c:	eef1 7a67 	vneg.f32	s15, s15
 8000c80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000c84:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000c88:	e7ed      	b.n	8000c66 <fmod_2pi+0x22>
 8000c8a:	bf00      	nop
 8000c8c:	3e22f981 	.word	0x3e22f981
 8000c90:	40c90fdb 	.word	0x40c90fdb

08000c94 <sin_fast>:
{
 8000c94:	b508      	push	{r3, lr}
 8000c96:	ed2d 8b02 	vpush	{d8}
	theta = fmod_2pi(theta+PI)-PI;	//get theta into the range of -pi to pi. this line wraps any arbitrary theta to -pi to pi
 8000c9a:	ed9f 8a37 	vldr	s16, [pc, #220]	; 8000d78 <sin_fast+0xe4>
 8000c9e:	ee30 0a08 	vadd.f32	s0, s0, s16
 8000ca2:	f7ff ffcf 	bl	8000c44 <fmod_2pi>
 8000ca6:	ee30 0a48 	vsub.f32	s0, s0, s16
	if(theta > HALF_PI && theta <= PI)	// if positive and in quadrant II, put in quadrant I (same)
 8000caa:	eddf 7a34 	vldr	s15, [pc, #208]	; 8000d7c <sin_fast+0xe8>
 8000cae:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cb6:	dd1e      	ble.n	8000cf6 <sin_fast+0x62>
 8000cb8:	eeb4 0ac8 	vcmpe.f32	s0, s16
 8000cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cc0:	d819      	bhi.n	8000cf6 <sin_fast+0x62>
		theta = PI - theta;
 8000cc2:	ee38 0a40 	vsub.f32	s0, s16, s0
	uint8_t is_neg = 0;
 8000cc6:	2300      	movs	r3, #0
	float theta_2 = theta*theta;
 8000cc8:	ee60 7a00 	vmul.f32	s15, s0, s0
	float theta_3 = theta_2*theta;
 8000ccc:	ee20 7a27 	vmul.f32	s14, s0, s15
	float theta_5 = theta_3*theta_2;
 8000cd0:	ee67 7a87 	vmul.f32	s15, s15, s14
	float res = theta-theta_3*ONE_BY_THREE_FACTORIAL + theta_5 * ONE_BY_FIVE_FACTORIAL;
 8000cd4:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8000d80 <sin_fast+0xec>
 8000cd8:	ee27 7a26 	vmul.f32	s14, s14, s13
 8000cdc:	ee30 0a47 	vsub.f32	s0, s0, s14
 8000ce0:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8000d84 <sin_fast+0xf0>
 8000ce4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ce8:	ee30 0a27 	vadd.f32	s0, s0, s15
	if(is_neg == 1)
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d140      	bne.n	8000d72 <sin_fast+0xde>
}
 8000cf0:	ecbd 8b02 	vpop	{d8}
 8000cf4:	bd08      	pop	{r3, pc}
	else if (theta >= PI && theta < THREE_BY_TWO_PI)  // if positive and in quadrant III (possible for cosine)
 8000cf6:	eddf 7a20 	vldr	s15, [pc, #128]	; 8000d78 <sin_fast+0xe4>
 8000cfa:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d02:	db0c      	blt.n	8000d1e <sin_fast+0x8a>
 8000d04:	eddf 7a20 	vldr	s15, [pc, #128]	; 8000d88 <sin_fast+0xf4>
 8000d08:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d10:	d505      	bpl.n	8000d1e <sin_fast+0x8a>
		theta = theta - PI;
 8000d12:	eddf 7a19 	vldr	s15, [pc, #100]	; 8000d78 <sin_fast+0xe4>
 8000d16:	ee30 0a67 	vsub.f32	s0, s0, s15
		is_neg = 1;
 8000d1a:	2301      	movs	r3, #1
		theta = theta - PI;
 8000d1c:	e7d4      	b.n	8000cc8 <sin_fast+0x34>
	else if (theta > THREE_BY_TWO_PI && theta < TWO_PI)  // if positive and in quadrant IV (edge case of cosine, rare but possible)
 8000d1e:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8000d88 <sin_fast+0xf4>
 8000d22:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d2a:	dd0a      	ble.n	8000d42 <sin_fast+0xae>
 8000d2c:	eddf 7a17 	vldr	s15, [pc, #92]	; 8000d8c <sin_fast+0xf8>
 8000d30:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d38:	d503      	bpl.n	8000d42 <sin_fast+0xae>
		theta = theta - TWO_PI;
 8000d3a:	ee30 0a67 	vsub.f32	s0, s0, s15
	uint8_t is_neg = 0;
 8000d3e:	2300      	movs	r3, #0
		theta = theta - TWO_PI;
 8000d40:	e7c2      	b.n	8000cc8 <sin_fast+0x34>
	else if (theta < -HALF_PI && theta >= -PI ) // if negative and in quadrant III,
 8000d42:	eddf 7a13 	vldr	s15, [pc, #76]	; 8000d90 <sin_fast+0xfc>
 8000d46:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d4e:	d50c      	bpl.n	8000d6a <sin_fast+0xd6>
 8000d50:	eddf 7a10 	vldr	s15, [pc, #64]	; 8000d94 <sin_fast+0x100>
 8000d54:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d5c:	db07      	blt.n	8000d6e <sin_fast+0xda>
		theta = PI + theta;
 8000d5e:	eddf 7a06 	vldr	s15, [pc, #24]	; 8000d78 <sin_fast+0xe4>
 8000d62:	ee30 0a27 	vadd.f32	s0, s0, s15
		is_neg = 1;
 8000d66:	2301      	movs	r3, #1
 8000d68:	e7ae      	b.n	8000cc8 <sin_fast+0x34>
	uint8_t is_neg = 0;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	e7ac      	b.n	8000cc8 <sin_fast+0x34>
 8000d6e:	2300      	movs	r3, #0
 8000d70:	e7aa      	b.n	8000cc8 <sin_fast+0x34>
		return -res;
 8000d72:	eeb1 0a40 	vneg.f32	s0, s0
 8000d76:	e7bb      	b.n	8000cf0 <sin_fast+0x5c>
 8000d78:	40490fdb 	.word	0x40490fdb
 8000d7c:	3fc90fdb 	.word	0x3fc90fdb
 8000d80:	3e2aaaab 	.word	0x3e2aaaab
 8000d84:	3c088889 	.word	0x3c088889
 8000d88:	4096cbe4 	.word	0x4096cbe4
 8000d8c:	40c90fdb 	.word	0x40c90fdb
 8000d90:	bfc90fdb 	.word	0xbfc90fdb
 8000d94:	c0490fdb 	.word	0xc0490fdb

08000d98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d98:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d9a:	4b0a      	ldr	r3, [pc, #40]	; (8000dc4 <HAL_MspInit+0x2c>)
 8000d9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d9e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000da2:	641a      	str	r2, [r3, #64]	; 0x40
 8000da4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000da6:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000daa:	9200      	str	r2, [sp, #0]
 8000dac:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000db0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000db4:	645a      	str	r2, [r3, #68]	; 0x44
 8000db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dbc:	9301      	str	r3, [sp, #4]
 8000dbe:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dc0:	b002      	add	sp, #8
 8000dc2:	4770      	bx	lr
 8000dc4:	40023800 	.word	0x40023800

08000dc8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000dc8:	b500      	push	{lr}
 8000dca:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	2300      	movs	r3, #0
 8000dce:	9303      	str	r3, [sp, #12]
 8000dd0:	9304      	str	r3, [sp, #16]
 8000dd2:	9305      	str	r3, [sp, #20]
 8000dd4:	9306      	str	r3, [sp, #24]
 8000dd6:	9307      	str	r3, [sp, #28]
  if(hadc->Instance==ADC1)
 8000dd8:	6802      	ldr	r2, [r0, #0]
 8000dda:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000dde:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d002      	beq.n	8000dec <HAL_ADC_MspInit+0x24>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000de6:	b009      	add	sp, #36	; 0x24
 8000de8:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dec:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8000df0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000df2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000df6:	645a      	str	r2, [r3, #68]	; 0x44
 8000df8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000dfa:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8000dfe:	9201      	str	r2, [sp, #4]
 8000e00:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e04:	f042 0201 	orr.w	r2, r2, #1
 8000e08:	631a      	str	r2, [r3, #48]	; 0x30
 8000e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0c:	f003 0301 	and.w	r3, r3, #1
 8000e10:	9302      	str	r3, [sp, #8]
 8000e12:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e14:	2303      	movs	r3, #3
 8000e16:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e18:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1a:	a903      	add	r1, sp, #12
 8000e1c:	4801      	ldr	r0, [pc, #4]	; (8000e24 <HAL_ADC_MspInit+0x5c>)
 8000e1e:	f000 ff61 	bl	8001ce4 <HAL_GPIO_Init>
}
 8000e22:	e7e0      	b.n	8000de6 <HAL_ADC_MspInit+0x1e>
 8000e24:	40020000 	.word	0x40020000

08000e28 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000e28:	b500      	push	{lr}
 8000e2a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	9303      	str	r3, [sp, #12]
 8000e30:	9304      	str	r3, [sp, #16]
 8000e32:	9305      	str	r3, [sp, #20]
 8000e34:	9306      	str	r3, [sp, #24]
 8000e36:	9307      	str	r3, [sp, #28]
  if(hcan->Instance==CAN1)
 8000e38:	6802      	ldr	r2, [r0, #0]
 8000e3a:	4b18      	ldr	r3, [pc, #96]	; (8000e9c <HAL_CAN_MspInit+0x74>)
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d002      	beq.n	8000e46 <HAL_CAN_MspInit+0x1e>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000e40:	b009      	add	sp, #36	; 0x24
 8000e42:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e46:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8000e4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e4c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000e50:	641a      	str	r2, [r3, #64]	; 0x40
 8000e52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e54:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8000e58:	9201      	str	r2, [sp, #4]
 8000e5a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e5e:	f042 0202 	orr.w	r2, r2, #2
 8000e62:	631a      	str	r2, [r3, #48]	; 0x30
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	f003 0302 	and.w	r3, r3, #2
 8000e6a:	9302      	str	r3, [sp, #8]
 8000e6c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e6e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e72:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e74:	2302      	movs	r3, #2
 8000e76:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000e7c:	2309      	movs	r3, #9
 8000e7e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e80:	a903      	add	r1, sp, #12
 8000e82:	4807      	ldr	r0, [pc, #28]	; (8000ea0 <HAL_CAN_MspInit+0x78>)
 8000e84:	f000 ff2e 	bl	8001ce4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	4611      	mov	r1, r2
 8000e8c:	2014      	movs	r0, #20
 8000e8e:	f000 fed3 	bl	8001c38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000e92:	2014      	movs	r0, #20
 8000e94:	f000 ff02 	bl	8001c9c <HAL_NVIC_EnableIRQ>
}
 8000e98:	e7d2      	b.n	8000e40 <HAL_CAN_MspInit+0x18>
 8000e9a:	bf00      	nop
 8000e9c:	40006400 	.word	0x40006400
 8000ea0:	40020400 	.word	0x40020400

08000ea4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ea4:	b500      	push	{lr}
 8000ea6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	9303      	str	r3, [sp, #12]
 8000eac:	9304      	str	r3, [sp, #16]
 8000eae:	9305      	str	r3, [sp, #20]
 8000eb0:	9306      	str	r3, [sp, #24]
 8000eb2:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI1)
 8000eb4:	6802      	ldr	r2, [r0, #0]
 8000eb6:	4b13      	ldr	r3, [pc, #76]	; (8000f04 <HAL_SPI_MspInit+0x60>)
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d002      	beq.n	8000ec2 <HAL_SPI_MspInit+0x1e>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ebc:	b009      	add	sp, #36	; 0x24
 8000ebe:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ec2:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8000ec6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000ec8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000ecc:	645a      	str	r2, [r3, #68]	; 0x44
 8000ece:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000ed0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8000ed4:	9201      	str	r2, [sp, #4]
 8000ed6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000eda:	f042 0201 	orr.w	r2, r2, #1
 8000ede:	631a      	str	r2, [r3, #48]	; 0x30
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	9302      	str	r3, [sp, #8]
 8000ee8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000eea:	23e0      	movs	r3, #224	; 0xe0
 8000eec:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ef6:	2305      	movs	r3, #5
 8000ef8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efa:	a903      	add	r1, sp, #12
 8000efc:	4802      	ldr	r0, [pc, #8]	; (8000f08 <HAL_SPI_MspInit+0x64>)
 8000efe:	f000 fef1 	bl	8001ce4 <HAL_GPIO_Init>
}
 8000f02:	e7db      	b.n	8000ebc <HAL_SPI_MspInit+0x18>
 8000f04:	40013000 	.word	0x40013000
 8000f08:	40020000 	.word	0x40020000

08000f0c <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM1)
 8000f0c:	6802      	ldr	r2, [r0, #0]
 8000f0e:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <HAL_TIM_PWM_MspInit+0x28>)
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d000      	beq.n	8000f16 <HAL_TIM_PWM_MspInit+0xa>
 8000f14:	4770      	bx	lr
{
 8000f16:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f18:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8000f1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000f1e:	f042 0201 	orr.w	r2, r2, #1
 8000f22:	645a      	str	r2, [r3, #68]	; 0x44
 8000f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	9301      	str	r3, [sp, #4]
 8000f2c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000f2e:	b002      	add	sp, #8
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	40010000 	.word	0x40010000

08000f38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f38:	b500      	push	{lr}
 8000f3a:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	9301      	str	r3, [sp, #4]
 8000f40:	9302      	str	r3, [sp, #8]
 8000f42:	9303      	str	r3, [sp, #12]
 8000f44:	9304      	str	r3, [sp, #16]
 8000f46:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM1)
 8000f48:	6802      	ldr	r2, [r0, #0]
 8000f4a:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <HAL_TIM_MspPostInit+0x4c>)
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d002      	beq.n	8000f56 <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000f50:	b007      	add	sp, #28
 8000f52:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f56:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8000f5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f5c:	f042 0201 	orr.w	r2, r2, #1
 8000f60:	631a      	str	r2, [r3, #48]	; 0x30
 8000f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f64:	f003 0301 	and.w	r3, r3, #1
 8000f68:	9300      	str	r3, [sp, #0]
 8000f6a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000f6c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000f70:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f72:	2302      	movs	r3, #2
 8000f74:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f76:	2301      	movs	r3, #1
 8000f78:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7a:	a901      	add	r1, sp, #4
 8000f7c:	4802      	ldr	r0, [pc, #8]	; (8000f88 <HAL_TIM_MspPostInit+0x50>)
 8000f7e:	f000 feb1 	bl	8001ce4 <HAL_GPIO_Init>
}
 8000f82:	e7e5      	b.n	8000f50 <HAL_TIM_MspPostInit+0x18>
 8000f84:	40010000 	.word	0x40010000
 8000f88:	40020000 	.word	0x40020000

08000f8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f8c:	b500      	push	{lr}
 8000f8e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f90:	2300      	movs	r3, #0
 8000f92:	9303      	str	r3, [sp, #12]
 8000f94:	9304      	str	r3, [sp, #16]
 8000f96:	9305      	str	r3, [sp, #20]
 8000f98:	9306      	str	r3, [sp, #24]
 8000f9a:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART2)
 8000f9c:	6802      	ldr	r2, [r0, #0]
 8000f9e:	4b13      	ldr	r3, [pc, #76]	; (8000fec <HAL_UART_MspInit+0x60>)
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d002      	beq.n	8000faa <HAL_UART_MspInit+0x1e>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fa4:	b009      	add	sp, #36	; 0x24
 8000fa6:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART2_CLK_ENABLE();
 8000faa:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8000fae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fb0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000fb4:	641a      	str	r2, [r3, #64]	; 0x40
 8000fb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fb8:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000fbc:	9201      	str	r2, [sp, #4]
 8000fbe:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fc2:	f042 0201 	orr.w	r2, r2, #1
 8000fc6:	631a      	str	r2, [r3, #48]	; 0x30
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	9302      	str	r3, [sp, #8]
 8000fd0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000fd2:	230c      	movs	r3, #12
 8000fd4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fde:	2307      	movs	r3, #7
 8000fe0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe2:	a903      	add	r1, sp, #12
 8000fe4:	4802      	ldr	r0, [pc, #8]	; (8000ff0 <HAL_UART_MspInit+0x64>)
 8000fe6:	f000 fe7d 	bl	8001ce4 <HAL_GPIO_Init>
}
 8000fea:	e7db      	b.n	8000fa4 <HAL_UART_MspInit+0x18>
 8000fec:	40004400 	.word	0x40004400
 8000ff0:	40020000 	.word	0x40020000

08000ff4 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ff4:	4770      	bx	lr

08000ff6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ff6:	e7fe      	b.n	8000ff6 <HardFault_Handler>

08000ff8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff8:	e7fe      	b.n	8000ff8 <MemManage_Handler>

08000ffa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ffa:	e7fe      	b.n	8000ffa <BusFault_Handler>

08000ffc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ffc:	e7fe      	b.n	8000ffc <UsageFault_Handler>

08000ffe <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ffe:	4770      	bx	lr

08001000 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001000:	4770      	bx	lr

08001002 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001002:	4770      	bx	lr

08001004 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001004:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001006:	f000 f873 	bl	80010f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800100a:	bd08      	pop	{r3, pc}

0800100c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800100c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800100e:	4802      	ldr	r0, [pc, #8]	; (8001018 <CAN1_RX0_IRQHandler+0xc>)
 8001010:	f000 fcd3 	bl	80019ba <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001014:	bd08      	pop	{r3, pc}
 8001016:	bf00      	nop
 8001018:	2000039c 	.word	0x2000039c

0800101c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800101c:	4b05      	ldr	r3, [pc, #20]	; (8001034 <SystemInit+0x18>)
 800101e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001022:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001026:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800102a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800102e:	609a      	str	r2, [r3, #8]
#endif
}
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001038:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001070 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800103c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800103e:	e003      	b.n	8001048 <LoopCopyDataInit>

08001040 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001040:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001042:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001044:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001046:	3104      	adds	r1, #4

08001048 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001048:	480b      	ldr	r0, [pc, #44]	; (8001078 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800104a:	4b0c      	ldr	r3, [pc, #48]	; (800107c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800104c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800104e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001050:	d3f6      	bcc.n	8001040 <CopyDataInit>
  ldr  r2, =_sbss
 8001052:	4a0b      	ldr	r2, [pc, #44]	; (8001080 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001054:	e002      	b.n	800105c <LoopFillZerobss>

08001056 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001056:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001058:	f842 3b04 	str.w	r3, [r2], #4

0800105c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800105c:	4b09      	ldr	r3, [pc, #36]	; (8001084 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800105e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001060:	d3f9      	bcc.n	8001056 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001062:	f7ff ffdb 	bl	800101c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001066:	f002 fb29 	bl	80036bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800106a:	f7ff fd0b 	bl	8000a84 <main>
  bx  lr    
 800106e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001070:	20040000 	.word	0x20040000
  ldr  r3, =_sidata
 8001074:	08003754 	.word	0x08003754
  ldr  r0, =_sdata
 8001078:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800107c:	200001d8 	.word	0x200001d8
  ldr  r2, =_sbss
 8001080:	200001d8 	.word	0x200001d8
  ldr  r3, = _ebss
 8001084:	200003c8 	.word	0x200003c8

08001088 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001088:	e7fe      	b.n	8001088 <ADC_IRQHandler>
	...

0800108c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800108c:	b510      	push	{r4, lr}
 800108e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001090:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <HAL_InitTick+0x40>)
 8001092:	7818      	ldrb	r0, [r3, #0]
 8001094:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001098:	fbb3 f3f0 	udiv	r3, r3, r0
 800109c:	4a0c      	ldr	r2, [pc, #48]	; (80010d0 <HAL_InitTick+0x44>)
 800109e:	6810      	ldr	r0, [r2, #0]
 80010a0:	fbb0 f0f3 	udiv	r0, r0, r3
 80010a4:	f000 fe08 	bl	8001cb8 <HAL_SYSTICK_Config>
 80010a8:	b968      	cbnz	r0, 80010c6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010aa:	2c0f      	cmp	r4, #15
 80010ac:	d901      	bls.n	80010b2 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80010ae:	2001      	movs	r0, #1
 80010b0:	e00a      	b.n	80010c8 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010b2:	2200      	movs	r2, #0
 80010b4:	4621      	mov	r1, r4
 80010b6:	f04f 30ff 	mov.w	r0, #4294967295
 80010ba:	f000 fdbd 	bl	8001c38 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010be:	4b05      	ldr	r3, [pc, #20]	; (80010d4 <HAL_InitTick+0x48>)
 80010c0:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80010c2:	2000      	movs	r0, #0
 80010c4:	e000      	b.n	80010c8 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80010c6:	2001      	movs	r0, #1
}
 80010c8:	bd10      	pop	{r4, pc}
 80010ca:	bf00      	nop
 80010cc:	200001d0 	.word	0x200001d0
 80010d0:	200001cc 	.word	0x200001cc
 80010d4:	200001d4 	.word	0x200001d4

080010d8 <HAL_Init>:
{
 80010d8:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010da:	2003      	movs	r0, #3
 80010dc:	f000 fd9a 	bl	8001c14 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80010e0:	2000      	movs	r0, #0
 80010e2:	f7ff ffd3 	bl	800108c <HAL_InitTick>
  HAL_MspInit();
 80010e6:	f7ff fe57 	bl	8000d98 <HAL_MspInit>
}
 80010ea:	2000      	movs	r0, #0
 80010ec:	bd08      	pop	{r3, pc}
	...

080010f0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80010f0:	4a03      	ldr	r2, [pc, #12]	; (8001100 <HAL_IncTick+0x10>)
 80010f2:	6811      	ldr	r1, [r2, #0]
 80010f4:	4b03      	ldr	r3, [pc, #12]	; (8001104 <HAL_IncTick+0x14>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	440b      	add	r3, r1
 80010fa:	6013      	str	r3, [r2, #0]
}
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	200003c4 	.word	0x200003c4
 8001104:	200001d0 	.word	0x200001d0

08001108 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001108:	4b01      	ldr	r3, [pc, #4]	; (8001110 <HAL_GetTick+0x8>)
 800110a:	6818      	ldr	r0, [r3, #0]
}
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	200003c4 	.word	0x200003c4

08001114 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001114:	b538      	push	{r3, r4, r5, lr}
 8001116:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001118:	f7ff fff6 	bl	8001108 <HAL_GetTick>
 800111c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800111e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001122:	d002      	beq.n	800112a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001124:	4b04      	ldr	r3, [pc, #16]	; (8001138 <HAL_Delay+0x24>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800112a:	f7ff ffed 	bl	8001108 <HAL_GetTick>
 800112e:	1b40      	subs	r0, r0, r5
 8001130:	42a0      	cmp	r0, r4
 8001132:	d3fa      	bcc.n	800112a <HAL_Delay+0x16>
  {
  }
}
 8001134:	bd38      	pop	{r3, r4, r5, pc}
 8001136:	bf00      	nop
 8001138:	200001d0 	.word	0x200001d0

0800113c <ADC_Init>:
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800113c:	4b4a      	ldr	r3, [pc, #296]	; (8001268 <ADC_Init+0x12c>)
 800113e:	685a      	ldr	r2, [r3, #4]
 8001140:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001144:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001146:	685a      	ldr	r2, [r3, #4]
 8001148:	6841      	ldr	r1, [r0, #4]
 800114a:	430a      	orrs	r2, r1
 800114c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800114e:	6802      	ldr	r2, [r0, #0]
 8001150:	6853      	ldr	r3, [r2, #4]
 8001152:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001156:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001158:	6802      	ldr	r2, [r0, #0]
 800115a:	6853      	ldr	r3, [r2, #4]
 800115c:	6901      	ldr	r1, [r0, #16]
 800115e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001162:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001164:	6802      	ldr	r2, [r0, #0]
 8001166:	6853      	ldr	r3, [r2, #4]
 8001168:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800116c:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800116e:	6802      	ldr	r2, [r0, #0]
 8001170:	6853      	ldr	r3, [r2, #4]
 8001172:	6881      	ldr	r1, [r0, #8]
 8001174:	430b      	orrs	r3, r1
 8001176:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001178:	6802      	ldr	r2, [r0, #0]
 800117a:	6893      	ldr	r3, [r2, #8]
 800117c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001180:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001182:	6802      	ldr	r2, [r0, #0]
 8001184:	6893      	ldr	r3, [r2, #8]
 8001186:	68c1      	ldr	r1, [r0, #12]
 8001188:	430b      	orrs	r3, r1
 800118a:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800118c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800118e:	4b37      	ldr	r3, [pc, #220]	; (800126c <ADC_Init+0x130>)
 8001190:	429a      	cmp	r2, r3
 8001192:	d04b      	beq.n	800122c <ADC_Init+0xf0>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001194:	6802      	ldr	r2, [r0, #0]
 8001196:	6893      	ldr	r3, [r2, #8]
 8001198:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800119c:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800119e:	6802      	ldr	r2, [r0, #0]
 80011a0:	6893      	ldr	r3, [r2, #8]
 80011a2:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80011a4:	430b      	orrs	r3, r1
 80011a6:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80011a8:	6802      	ldr	r2, [r0, #0]
 80011aa:	6893      	ldr	r3, [r2, #8]
 80011ac:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80011b0:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80011b2:	6802      	ldr	r2, [r0, #0]
 80011b4:	6893      	ldr	r3, [r2, #8]
 80011b6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80011b8:	430b      	orrs	r3, r1
 80011ba:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80011bc:	6802      	ldr	r2, [r0, #0]
 80011be:	6893      	ldr	r3, [r2, #8]
 80011c0:	f023 0302 	bic.w	r3, r3, #2
 80011c4:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80011c6:	6802      	ldr	r2, [r0, #0]
 80011c8:	6893      	ldr	r3, [r2, #8]
 80011ca:	6981      	ldr	r1, [r0, #24]
 80011cc:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 80011d0:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80011d2:	f890 3020 	ldrb.w	r3, [r0, #32]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d133      	bne.n	8001242 <ADC_Init+0x106>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80011da:	6802      	ldr	r2, [r0, #0]
 80011dc:	6853      	ldr	r3, [r2, #4]
 80011de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80011e2:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80011e4:	6802      	ldr	r2, [r0, #0]
 80011e6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80011e8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80011ec:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80011ee:	6801      	ldr	r1, [r0, #0]
 80011f0:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80011f2:	69c2      	ldr	r2, [r0, #28]
 80011f4:	3a01      	subs	r2, #1
 80011f6:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80011fa:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80011fc:	6802      	ldr	r2, [r0, #0]
 80011fe:	6893      	ldr	r3, [r2, #8]
 8001200:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001204:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001206:	6802      	ldr	r2, [r0, #0]
 8001208:	6893      	ldr	r3, [r2, #8]
 800120a:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
 800120e:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8001212:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001214:	6802      	ldr	r2, [r0, #0]
 8001216:	6893      	ldr	r3, [r2, #8]
 8001218:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800121c:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800121e:	6802      	ldr	r2, [r0, #0]
 8001220:	6893      	ldr	r3, [r2, #8]
 8001222:	6941      	ldr	r1, [r0, #20]
 8001224:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8001228:	6093      	str	r3, [r2, #8]
}
 800122a:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800122c:	6802      	ldr	r2, [r0, #0]
 800122e:	6893      	ldr	r3, [r2, #8]
 8001230:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001234:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001236:	6802      	ldr	r2, [r0, #0]
 8001238:	6893      	ldr	r3, [r2, #8]
 800123a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800123e:	6093      	str	r3, [r2, #8]
 8001240:	e7bc      	b.n	80011bc <ADC_Init+0x80>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001242:	6802      	ldr	r2, [r0, #0]
 8001244:	6853      	ldr	r3, [r2, #4]
 8001246:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800124a:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800124c:	6802      	ldr	r2, [r0, #0]
 800124e:	6853      	ldr	r3, [r2, #4]
 8001250:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001254:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001256:	6801      	ldr	r1, [r0, #0]
 8001258:	684b      	ldr	r3, [r1, #4]
 800125a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800125c:	3a01      	subs	r2, #1
 800125e:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8001262:	604b      	str	r3, [r1, #4]
 8001264:	e7be      	b.n	80011e4 <ADC_Init+0xa8>
 8001266:	bf00      	nop
 8001268:	40012300 	.word	0x40012300
 800126c:	0f000001 	.word	0x0f000001

08001270 <HAL_ADC_Init>:
  if(hadc == NULL)
 8001270:	b328      	cbz	r0, 80012be <HAL_ADC_Init+0x4e>
{
 8001272:	b510      	push	{r4, lr}
 8001274:	4604      	mov	r4, r0
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001276:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001278:	b143      	cbz	r3, 800128c <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800127a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800127c:	f013 0f10 	tst.w	r3, #16
 8001280:	d00b      	beq.n	800129a <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 8001282:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8001284:	2300      	movs	r3, #0
 8001286:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800128a:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 800128c:	f7ff fd9c 	bl	8000dc8 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8001290:	2300      	movs	r3, #0
 8001292:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 8001294:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001298:	e7ef      	b.n	800127a <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 800129a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800129c:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <HAL_ADC_Init+0x54>)
 800129e:	4013      	ands	r3, r2
 80012a0:	f043 0302 	orr.w	r3, r3, #2
 80012a4:	6423      	str	r3, [r4, #64]	; 0x40
    ADC_Init(hadc);
 80012a6:	4620      	mov	r0, r4
 80012a8:	f7ff ff48 	bl	800113c <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 80012ac:	2000      	movs	r0, #0
 80012ae:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80012b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012b2:	f023 0303 	bic.w	r3, r3, #3
 80012b6:	f043 0301 	orr.w	r3, r3, #1
 80012ba:	6423      	str	r3, [r4, #64]	; 0x40
 80012bc:	e7e2      	b.n	8001284 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 80012be:	2001      	movs	r0, #1
}
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	ffffeefd 	.word	0xffffeefd

080012c8 <HAL_ADC_ConfigChannel>:
{
 80012c8:	b430      	push	{r4, r5}
 80012ca:	b082      	sub	sp, #8
  __IO uint32_t counter = 0;
 80012cc:	2300      	movs	r3, #0
 80012ce:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80012d0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	f000 80d1 	beq.w	800147c <HAL_ADC_ConfigChannel+0x1b4>
 80012da:	2301      	movs	r3, #1
 80012dc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80012e0:	680b      	ldr	r3, [r1, #0]
 80012e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80012e6:	bf18      	it	ne
 80012e8:	2b09      	cmpne	r3, #9
 80012ea:	d922      	bls.n	8001332 <HAL_ADC_ConfigChannel+0x6a>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80012ec:	6805      	ldr	r5, [r0, #0]
 80012ee:	68ea      	ldr	r2, [r5, #12]
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80012f6:	3b1e      	subs	r3, #30
 80012f8:	2407      	movs	r4, #7
 80012fa:	fa04 f303 	lsl.w	r3, r4, r3
 80012fe:	ea22 0303 	bic.w	r3, r2, r3
 8001302:	60eb      	str	r3, [r5, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001304:	680b      	ldr	r3, [r1, #0]
 8001306:	4a5e      	ldr	r2, [pc, #376]	; (8001480 <HAL_ADC_ConfigChannel+0x1b8>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d00b      	beq.n	8001324 <HAL_ADC_ConfigChannel+0x5c>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800130c:	6805      	ldr	r5, [r0, #0]
 800130e:	68ea      	ldr	r2, [r5, #12]
 8001310:	688c      	ldr	r4, [r1, #8]
 8001312:	b29b      	uxth	r3, r3
 8001314:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001318:	3b1e      	subs	r3, #30
 800131a:	fa04 f303 	lsl.w	r3, r4, r3
 800131e:	4313      	orrs	r3, r2
 8001320:	60eb      	str	r3, [r5, #12]
 8001322:	e01b      	b.n	800135c <HAL_ADC_ConfigChannel+0x94>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001324:	6802      	ldr	r2, [r0, #0]
 8001326:	68d3      	ldr	r3, [r2, #12]
 8001328:	688c      	ldr	r4, [r1, #8]
 800132a:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 800132e:	60d3      	str	r3, [r2, #12]
 8001330:	e014      	b.n	800135c <HAL_ADC_ConfigChannel+0x94>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001332:	6805      	ldr	r5, [r0, #0]
 8001334:	692a      	ldr	r2, [r5, #16]
 8001336:	b29b      	uxth	r3, r3
 8001338:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800133c:	2407      	movs	r4, #7
 800133e:	fa04 f303 	lsl.w	r3, r4, r3
 8001342:	ea22 0303 	bic.w	r3, r2, r3
 8001346:	612b      	str	r3, [r5, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001348:	6805      	ldr	r5, [r0, #0]
 800134a:	692a      	ldr	r2, [r5, #16]
 800134c:	688c      	ldr	r4, [r1, #8]
 800134e:	880b      	ldrh	r3, [r1, #0]
 8001350:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001354:	fa04 f303 	lsl.w	r3, r4, r3
 8001358:	4313      	orrs	r3, r2
 800135a:	612b      	str	r3, [r5, #16]
  if (sConfig->Rank < 7)
 800135c:	684b      	ldr	r3, [r1, #4]
 800135e:	2b06      	cmp	r3, #6
 8001360:	d828      	bhi.n	80013b4 <HAL_ADC_ConfigChannel+0xec>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001362:	6805      	ldr	r5, [r0, #0]
 8001364:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001366:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800136a:	3b05      	subs	r3, #5
 800136c:	241f      	movs	r4, #31
 800136e:	fa04 f303 	lsl.w	r3, r4, r3
 8001372:	ea22 0303 	bic.w	r3, r2, r3
 8001376:	636b      	str	r3, [r5, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001378:	6805      	ldr	r5, [r0, #0]
 800137a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800137c:	684b      	ldr	r3, [r1, #4]
 800137e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001382:	3b05      	subs	r3, #5
 8001384:	880c      	ldrh	r4, [r1, #0]
 8001386:	fa04 f303 	lsl.w	r3, r4, r3
 800138a:	4313      	orrs	r3, r2
 800138c:	636b      	str	r3, [r5, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800138e:	6802      	ldr	r2, [r0, #0]
 8001390:	4b3c      	ldr	r3, [pc, #240]	; (8001484 <HAL_ADC_ConfigChannel+0x1bc>)
 8001392:	429a      	cmp	r2, r3
 8001394:	d03e      	beq.n	8001414 <HAL_ADC_ConfigChannel+0x14c>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001396:	6802      	ldr	r2, [r0, #0]
 8001398:	4b3a      	ldr	r3, [pc, #232]	; (8001484 <HAL_ADC_ConfigChannel+0x1bc>)
 800139a:	429a      	cmp	r2, r3
 800139c:	d044      	beq.n	8001428 <HAL_ADC_ConfigChannel+0x160>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800139e:	6802      	ldr	r2, [r0, #0]
 80013a0:	4b38      	ldr	r3, [pc, #224]	; (8001484 <HAL_ADC_ConfigChannel+0x1bc>)
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d049      	beq.n	800143a <HAL_ADC_ConfigChannel+0x172>
  __HAL_UNLOCK(hadc);
 80013a6:	2300      	movs	r3, #0
 80013a8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80013ac:	4618      	mov	r0, r3
}
 80013ae:	b002      	add	sp, #8
 80013b0:	bc30      	pop	{r4, r5}
 80013b2:	4770      	bx	lr
  else if (sConfig->Rank < 13)
 80013b4:	2b0c      	cmp	r3, #12
 80013b6:	d816      	bhi.n	80013e6 <HAL_ADC_ConfigChannel+0x11e>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80013b8:	6805      	ldr	r5, [r0, #0]
 80013ba:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80013bc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80013c0:	3b23      	subs	r3, #35	; 0x23
 80013c2:	241f      	movs	r4, #31
 80013c4:	fa04 f303 	lsl.w	r3, r4, r3
 80013c8:	ea22 0303 	bic.w	r3, r2, r3
 80013cc:	632b      	str	r3, [r5, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80013ce:	6805      	ldr	r5, [r0, #0]
 80013d0:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80013d2:	684b      	ldr	r3, [r1, #4]
 80013d4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80013d8:	3b23      	subs	r3, #35	; 0x23
 80013da:	880c      	ldrh	r4, [r1, #0]
 80013dc:	fa04 f303 	lsl.w	r3, r4, r3
 80013e0:	4313      	orrs	r3, r2
 80013e2:	632b      	str	r3, [r5, #48]	; 0x30
 80013e4:	e7d3      	b.n	800138e <HAL_ADC_ConfigChannel+0xc6>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80013e6:	6805      	ldr	r5, [r0, #0]
 80013e8:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80013ea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80013ee:	3b41      	subs	r3, #65	; 0x41
 80013f0:	241f      	movs	r4, #31
 80013f2:	fa04 f303 	lsl.w	r3, r4, r3
 80013f6:	ea22 0303 	bic.w	r3, r2, r3
 80013fa:	62eb      	str	r3, [r5, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80013fc:	6805      	ldr	r5, [r0, #0]
 80013fe:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001400:	684b      	ldr	r3, [r1, #4]
 8001402:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001406:	3b41      	subs	r3, #65	; 0x41
 8001408:	880c      	ldrh	r4, [r1, #0]
 800140a:	fa04 f303 	lsl.w	r3, r4, r3
 800140e:	4313      	orrs	r3, r2
 8001410:	62eb      	str	r3, [r5, #44]	; 0x2c
 8001412:	e7bc      	b.n	800138e <HAL_ADC_ConfigChannel+0xc6>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001414:	680b      	ldr	r3, [r1, #0]
 8001416:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800141a:	d1bc      	bne.n	8001396 <HAL_ADC_ConfigChannel+0xce>
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800141c:	4a1a      	ldr	r2, [pc, #104]	; (8001488 <HAL_ADC_ConfigChannel+0x1c0>)
 800141e:	6853      	ldr	r3, [r2, #4]
 8001420:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001424:	6053      	str	r3, [r2, #4]
 8001426:	e7b6      	b.n	8001396 <HAL_ADC_ConfigChannel+0xce>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001428:	680b      	ldr	r3, [r1, #0]
 800142a:	2b12      	cmp	r3, #18
 800142c:	d1b7      	bne.n	800139e <HAL_ADC_ConfigChannel+0xd6>
    ADC->CCR |= ADC_CCR_VBATE;
 800142e:	4a16      	ldr	r2, [pc, #88]	; (8001488 <HAL_ADC_ConfigChannel+0x1c0>)
 8001430:	6853      	ldr	r3, [r2, #4]
 8001432:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001436:	6053      	str	r3, [r2, #4]
 8001438:	e7b1      	b.n	800139e <HAL_ADC_ConfigChannel+0xd6>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800143a:	680b      	ldr	r3, [r1, #0]
 800143c:	4a10      	ldr	r2, [pc, #64]	; (8001480 <HAL_ADC_ConfigChannel+0x1b8>)
 800143e:	2b11      	cmp	r3, #17
 8001440:	bf18      	it	ne
 8001442:	4293      	cmpne	r3, r2
 8001444:	d1af      	bne.n	80013a6 <HAL_ADC_ConfigChannel+0xde>
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001446:	4a10      	ldr	r2, [pc, #64]	; (8001488 <HAL_ADC_ConfigChannel+0x1c0>)
 8001448:	6853      	ldr	r3, [r2, #4]
 800144a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800144e:	6053      	str	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001450:	680a      	ldr	r2, [r1, #0]
 8001452:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <HAL_ADC_ConfigChannel+0x1b8>)
 8001454:	429a      	cmp	r2, r3
 8001456:	d1a6      	bne.n	80013a6 <HAL_ADC_ConfigChannel+0xde>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001458:	4b0c      	ldr	r3, [pc, #48]	; (800148c <HAL_ADC_ConfigChannel+0x1c4>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a0c      	ldr	r2, [pc, #48]	; (8001490 <HAL_ADC_ConfigChannel+0x1c8>)
 800145e:	fba2 2303 	umull	r2, r3, r2, r3
 8001462:	0c9b      	lsrs	r3, r3, #18
 8001464:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001468:	005a      	lsls	r2, r3, #1
 800146a:	9201      	str	r2, [sp, #4]
      while(counter != 0)
 800146c:	e002      	b.n	8001474 <HAL_ADC_ConfigChannel+0x1ac>
        counter--;
 800146e:	9b01      	ldr	r3, [sp, #4]
 8001470:	3b01      	subs	r3, #1
 8001472:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8001474:	9b01      	ldr	r3, [sp, #4]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d1f9      	bne.n	800146e <HAL_ADC_ConfigChannel+0x1a6>
 800147a:	e794      	b.n	80013a6 <HAL_ADC_ConfigChannel+0xde>
  __HAL_LOCK(hadc);
 800147c:	2002      	movs	r0, #2
 800147e:	e796      	b.n	80013ae <HAL_ADC_ConfigChannel+0xe6>
 8001480:	10000012 	.word	0x10000012
 8001484:	40012000 	.word	0x40012000
 8001488:	40012300 	.word	0x40012300
 800148c:	200001cc 	.word	0x200001cc
 8001490:	431bde83 	.word	0x431bde83

08001494 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001494:	2800      	cmp	r0, #0
 8001496:	f000 80a1 	beq.w	80015dc <HAL_CAN_Init+0x148>
{
 800149a:	b538      	push	{r3, r4, r5, lr}
 800149c:	4604      	mov	r4, r0
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800149e:	f890 3020 	ldrb.w	r3, [r0, #32]
 80014a2:	b1d3      	cbz	r3, 80014da <HAL_CAN_Init+0x46>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80014a4:	6822      	ldr	r2, [r4, #0]
 80014a6:	6813      	ldr	r3, [r2, #0]
 80014a8:	f023 0302 	bic.w	r3, r3, #2
 80014ac:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014ae:	f7ff fe2b 	bl	8001108 <HAL_GetTick>
 80014b2:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80014b4:	6823      	ldr	r3, [r4, #0]
 80014b6:	685a      	ldr	r2, [r3, #4]
 80014b8:	f012 0f02 	tst.w	r2, #2
 80014bc:	d010      	beq.n	80014e0 <HAL_CAN_Init+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80014be:	f7ff fe23 	bl	8001108 <HAL_GetTick>
 80014c2:	1b40      	subs	r0, r0, r5
 80014c4:	280a      	cmp	r0, #10
 80014c6:	d9f5      	bls.n	80014b4 <HAL_CAN_Init+0x20>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80014c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80014ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014ce:	6263      	str	r3, [r4, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80014d0:	2305      	movs	r3, #5
 80014d2:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 80014d6:	2001      	movs	r0, #1
  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 80014d8:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 80014da:	f7ff fca5 	bl	8000e28 <HAL_CAN_MspInit>
 80014de:	e7e1      	b.n	80014a4 <HAL_CAN_Init+0x10>
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	f042 0201 	orr.w	r2, r2, #1
 80014e6:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80014e8:	f7ff fe0e 	bl	8001108 <HAL_GetTick>
 80014ec:	4605      	mov	r5, r0
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80014ee:	6823      	ldr	r3, [r4, #0]
 80014f0:	685a      	ldr	r2, [r3, #4]
 80014f2:	f012 0f01 	tst.w	r2, #1
 80014f6:	d10d      	bne.n	8001514 <HAL_CAN_Init+0x80>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80014f8:	f7ff fe06 	bl	8001108 <HAL_GetTick>
 80014fc:	1b40      	subs	r0, r0, r5
 80014fe:	280a      	cmp	r0, #10
 8001500:	d9f5      	bls.n	80014ee <HAL_CAN_Init+0x5a>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001502:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001504:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001508:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 800150a:	2305      	movs	r3, #5
 800150c:	f884 3020 	strb.w	r3, [r4, #32]
      return HAL_ERROR;
 8001510:	2001      	movs	r0, #1
 8001512:	e7e1      	b.n	80014d8 <HAL_CAN_Init+0x44>
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001514:	7e22      	ldrb	r2, [r4, #24]
 8001516:	2a01      	cmp	r2, #1
 8001518:	d03d      	beq.n	8001596 <HAL_CAN_Init+0x102>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001520:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8001522:	7e63      	ldrb	r3, [r4, #25]
 8001524:	2b01      	cmp	r3, #1
 8001526:	d03b      	beq.n	80015a0 <HAL_CAN_Init+0x10c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001528:	6822      	ldr	r2, [r4, #0]
 800152a:	6813      	ldr	r3, [r2, #0]
 800152c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001530:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001532:	7ea3      	ldrb	r3, [r4, #26]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d039      	beq.n	80015ac <HAL_CAN_Init+0x118>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001538:	6822      	ldr	r2, [r4, #0]
 800153a:	6813      	ldr	r3, [r2, #0]
 800153c:	f023 0320 	bic.w	r3, r3, #32
 8001540:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001542:	7ee3      	ldrb	r3, [r4, #27]
 8001544:	2b01      	cmp	r3, #1
 8001546:	d037      	beq.n	80015b8 <HAL_CAN_Init+0x124>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001548:	6822      	ldr	r2, [r4, #0]
 800154a:	6813      	ldr	r3, [r2, #0]
 800154c:	f043 0310 	orr.w	r3, r3, #16
 8001550:	6013      	str	r3, [r2, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001552:	7f23      	ldrb	r3, [r4, #28]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d035      	beq.n	80015c4 <HAL_CAN_Init+0x130>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001558:	6822      	ldr	r2, [r4, #0]
 800155a:	6813      	ldr	r3, [r2, #0]
 800155c:	f023 0308 	bic.w	r3, r3, #8
 8001560:	6013      	str	r3, [r2, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001562:	7f63      	ldrb	r3, [r4, #29]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d033      	beq.n	80015d0 <HAL_CAN_Init+0x13c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001568:	6822      	ldr	r2, [r4, #0]
 800156a:	6813      	ldr	r3, [r2, #0]
 800156c:	f023 0304 	bic.w	r3, r3, #4
 8001570:	6013      	str	r3, [r2, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001572:	68a3      	ldr	r3, [r4, #8]
 8001574:	68e2      	ldr	r2, [r4, #12]
 8001576:	4313      	orrs	r3, r2
 8001578:	6922      	ldr	r2, [r4, #16]
 800157a:	4313      	orrs	r3, r2
 800157c:	6962      	ldr	r2, [r4, #20]
 800157e:	4313      	orrs	r3, r2
 8001580:	6862      	ldr	r2, [r4, #4]
 8001582:	3a01      	subs	r2, #1
 8001584:	6821      	ldr	r1, [r4, #0]
 8001586:	4313      	orrs	r3, r2
 8001588:	61cb      	str	r3, [r1, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800158a:	2000      	movs	r0, #0
 800158c:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 800158e:	2301      	movs	r3, #1
 8001590:	f884 3020 	strb.w	r3, [r4, #32]
  return HAL_OK;
 8001594:	e7a0      	b.n	80014d8 <HAL_CAN_Init+0x44>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	e7c0      	b.n	8001522 <HAL_CAN_Init+0x8e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80015a0:	6822      	ldr	r2, [r4, #0]
 80015a2:	6813      	ldr	r3, [r2, #0]
 80015a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015a8:	6013      	str	r3, [r2, #0]
 80015aa:	e7c2      	b.n	8001532 <HAL_CAN_Init+0x9e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80015ac:	6822      	ldr	r2, [r4, #0]
 80015ae:	6813      	ldr	r3, [r2, #0]
 80015b0:	f043 0320 	orr.w	r3, r3, #32
 80015b4:	6013      	str	r3, [r2, #0]
 80015b6:	e7c4      	b.n	8001542 <HAL_CAN_Init+0xae>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80015b8:	6822      	ldr	r2, [r4, #0]
 80015ba:	6813      	ldr	r3, [r2, #0]
 80015bc:	f023 0310 	bic.w	r3, r3, #16
 80015c0:	6013      	str	r3, [r2, #0]
 80015c2:	e7c6      	b.n	8001552 <HAL_CAN_Init+0xbe>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80015c4:	6822      	ldr	r2, [r4, #0]
 80015c6:	6813      	ldr	r3, [r2, #0]
 80015c8:	f043 0308 	orr.w	r3, r3, #8
 80015cc:	6013      	str	r3, [r2, #0]
 80015ce:	e7c8      	b.n	8001562 <HAL_CAN_Init+0xce>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80015d0:	6822      	ldr	r2, [r4, #0]
 80015d2:	6813      	ldr	r3, [r2, #0]
 80015d4:	f043 0304 	orr.w	r3, r3, #4
 80015d8:	6013      	str	r3, [r2, #0]
 80015da:	e7ca      	b.n	8001572 <HAL_CAN_Init+0xde>
    return HAL_ERROR;
 80015dc:	2001      	movs	r0, #1
}
 80015de:	4770      	bx	lr

080015e0 <HAL_CAN_ConfigFilter>:
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80015e0:	6803      	ldr	r3, [r0, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80015e2:	f890 2020 	ldrb.w	r2, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 80015e6:	3a01      	subs	r2, #1
 80015e8:	b2d2      	uxtb	r2, r2
 80015ea:	2a01      	cmp	r2, #1
 80015ec:	d905      	bls.n	80015fa <HAL_CAN_ConfigFilter+0x1a>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015ee:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80015f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015f4:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80015f6:	2001      	movs	r0, #1
  }
}
 80015f8:	4770      	bx	lr
{
 80015fa:	b470      	push	{r4, r5, r6}
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80015fc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001600:	f042 0201 	orr.w	r2, r2, #1
 8001604:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001608:	694a      	ldr	r2, [r1, #20]
 800160a:	f002 021f 	and.w	r2, r2, #31
 800160e:	2001      	movs	r0, #1
 8001610:	fa00 f202 	lsl.w	r2, r0, r2
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001614:	f8d3 421c 	ldr.w	r4, [r3, #540]	; 0x21c
 8001618:	43d0      	mvns	r0, r2
 800161a:	4004      	ands	r4, r0
 800161c:	f8c3 421c 	str.w	r4, [r3, #540]	; 0x21c
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001620:	69cc      	ldr	r4, [r1, #28]
 8001622:	b9ac      	cbnz	r4, 8001650 <HAL_CAN_ConfigFilter+0x70>
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001624:	f8d3 420c 	ldr.w	r4, [r3, #524]	; 0x20c
 8001628:	4004      	ands	r4, r0
 800162a:	f8c3 420c 	str.w	r4, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800162e:	68ce      	ldr	r6, [r1, #12]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001630:	888d      	ldrh	r5, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001632:	694c      	ldr	r4, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001634:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001638:	3448      	adds	r4, #72	; 0x48
 800163a:	f843 5034 	str.w	r5, [r3, r4, lsl #3]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800163e:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001640:	880d      	ldrh	r5, [r1, #0]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001642:	694c      	ldr	r4, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001644:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001648:	3448      	adds	r4, #72	; 0x48
 800164a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800164e:	6065      	str	r5, [r4, #4]
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001650:	69cc      	ldr	r4, [r1, #28]
 8001652:	2c01      	cmp	r4, #1
 8001654:	d019      	beq.n	800168a <HAL_CAN_ConfigFilter+0xaa>
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001656:	698c      	ldr	r4, [r1, #24]
 8001658:	bb74      	cbnz	r4, 80016b8 <HAL_CAN_ConfigFilter+0xd8>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800165a:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 800165e:	4004      	ands	r4, r0
 8001660:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001664:	690c      	ldr	r4, [r1, #16]
 8001666:	bb6c      	cbnz	r4, 80016c4 <HAL_CAN_ConfigFilter+0xe4>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001668:	f8d3 4214 	ldr.w	r4, [r3, #532]	; 0x214
 800166c:	4020      	ands	r0, r4
 800166e:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001672:	6a09      	ldr	r1, [r1, #32]
 8001674:	2901      	cmp	r1, #1
 8001676:	d02b      	beq.n	80016d0 <HAL_CAN_ConfigFilter+0xf0>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001678:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800167c:	f022 0201 	bic.w	r2, r2, #1
 8001680:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    return HAL_OK;
 8001684:	2000      	movs	r0, #0
}
 8001686:	bc70      	pop	{r4, r5, r6}
 8001688:	4770      	bx	lr
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800168a:	f8d3 420c 	ldr.w	r4, [r3, #524]	; 0x20c
 800168e:	4314      	orrs	r4, r2
 8001690:	f8c3 420c 	str.w	r4, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001694:	680e      	ldr	r6, [r1, #0]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001696:	888d      	ldrh	r5, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001698:	694c      	ldr	r4, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800169a:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800169e:	3448      	adds	r4, #72	; 0x48
 80016a0:	f843 5034 	str.w	r5, [r3, r4, lsl #3]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80016a4:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80016a6:	898d      	ldrh	r5, [r1, #12]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80016a8:	694c      	ldr	r4, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80016aa:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80016ae:	3448      	adds	r4, #72	; 0x48
 80016b0:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80016b4:	6065      	str	r5, [r4, #4]
 80016b6:	e7ce      	b.n	8001656 <HAL_CAN_ConfigFilter+0x76>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80016b8:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 80016bc:	4314      	orrs	r4, r2
 80016be:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
 80016c2:	e7cf      	b.n	8001664 <HAL_CAN_ConfigFilter+0x84>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80016c4:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 80016c8:	4310      	orrs	r0, r2
 80016ca:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
 80016ce:	e7d0      	b.n	8001672 <HAL_CAN_ConfigFilter+0x92>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80016d0:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
 80016d4:	430a      	orrs	r2, r1
 80016d6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 80016da:	e7cd      	b.n	8001678 <HAL_CAN_ConfigFilter+0x98>

080016dc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80016dc:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80016de:	f890 3020 	ldrb.w	r3, [r0, #32]
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d005      	beq.n	80016f4 <HAL_CAN_Start+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80016e8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80016ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80016ee:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80016f0:	2001      	movs	r0, #1
  }
}
 80016f2:	bd38      	pop	{r3, r4, r5, pc}
 80016f4:	4604      	mov	r4, r0
    hcan->State = HAL_CAN_STATE_LISTENING;
 80016f6:	2302      	movs	r3, #2
 80016f8:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80016fc:	6802      	ldr	r2, [r0, #0]
 80016fe:	6813      	ldr	r3, [r2, #0]
 8001700:	f023 0301 	bic.w	r3, r3, #1
 8001704:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001706:	f7ff fcff 	bl	8001108 <HAL_GetTick>
 800170a:	4605      	mov	r5, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800170c:	6823      	ldr	r3, [r4, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f013 0f01 	tst.w	r3, #1
 8001714:	d00d      	beq.n	8001732 <HAL_CAN_Start+0x56>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001716:	f7ff fcf7 	bl	8001108 <HAL_GetTick>
 800171a:	1b40      	subs	r0, r0, r5
 800171c:	280a      	cmp	r0, #10
 800171e:	d9f5      	bls.n	800170c <HAL_CAN_Start+0x30>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001720:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001722:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001726:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8001728:	2305      	movs	r3, #5
 800172a:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 800172e:	2001      	movs	r0, #1
 8001730:	e7df      	b.n	80016f2 <HAL_CAN_Start+0x16>
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001732:	2000      	movs	r0, #0
 8001734:	6260      	str	r0, [r4, #36]	; 0x24
    return HAL_OK;
 8001736:	e7dc      	b.n	80016f2 <HAL_CAN_Start+0x16>

08001738 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001738:	b470      	push	{r4, r5, r6}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800173a:	f890 4020 	ldrb.w	r4, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800173e:	6805      	ldr	r5, [r0, #0]
 8001740:	68ad      	ldr	r5, [r5, #8]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001742:	3c01      	subs	r4, #1
 8001744:	b2e4      	uxtb	r4, r4
 8001746:	2c01      	cmp	r4, #1
 8001748:	d906      	bls.n	8001758 <HAL_CAN_AddTxMessage+0x20>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800174a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800174c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001750:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8001752:	2001      	movs	r0, #1
  }
}
 8001754:	bc70      	pop	{r4, r5, r6}
 8001756:	4770      	bx	lr
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001758:	f015 5fe0 	tst.w	r5, #469762048	; 0x1c000000
 800175c:	d05b      	beq.n	8001816 <HAL_CAN_AddTxMessage+0xde>
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800175e:	f3c5 6501 	ubfx	r5, r5, #24, #2
      if (transmitmailbox > 2U)
 8001762:	2d02      	cmp	r5, #2
 8001764:	d83e      	bhi.n	80017e4 <HAL_CAN_AddTxMessage+0xac>
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001766:	2401      	movs	r4, #1
 8001768:	40ac      	lsls	r4, r5
 800176a:	601c      	str	r4, [r3, #0]
      if (pHeader->IDE == CAN_ID_STD)
 800176c:	688b      	ldr	r3, [r1, #8]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d13e      	bne.n	80017f0 <HAL_CAN_AddTxMessage+0xb8>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001772:	680e      	ldr	r6, [r1, #0]
                                                           pHeader->RTR);
 8001774:	68cb      	ldr	r3, [r1, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001776:	6804      	ldr	r4, [r0, #0]
 8001778:	ea43 5646 	orr.w	r6, r3, r6, lsl #21
 800177c:	f105 0318 	add.w	r3, r5, #24
 8001780:	011b      	lsls	r3, r3, #4
 8001782:	50e6      	str	r6, [r4, r3]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001784:	6803      	ldr	r3, [r0, #0]
 8001786:	690c      	ldr	r4, [r1, #16]
 8001788:	f105 0618 	add.w	r6, r5, #24
 800178c:	eb03 1306 	add.w	r3, r3, r6, lsl #4
 8001790:	605c      	str	r4, [r3, #4]
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001792:	7d0b      	ldrb	r3, [r1, #20]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d036      	beq.n	8001806 <HAL_CAN_AddTxMessage+0xce>
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001798:	79d1      	ldrb	r1, [r2, #7]
 800179a:	7993      	ldrb	r3, [r2, #6]
 800179c:	041b      	lsls	r3, r3, #16
 800179e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80017a2:	7951      	ldrb	r1, [r2, #5]
 80017a4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80017a8:	7914      	ldrb	r4, [r2, #4]
 80017aa:	6801      	ldr	r1, [r0, #0]
 80017ac:	4323      	orrs	r3, r4
 80017ae:	012c      	lsls	r4, r5, #4
 80017b0:	4421      	add	r1, r4
 80017b2:	f8c1 318c 	str.w	r3, [r1, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80017b6:	78d1      	ldrb	r1, [r2, #3]
 80017b8:	7893      	ldrb	r3, [r2, #2]
 80017ba:	041b      	lsls	r3, r3, #16
 80017bc:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80017c0:	7851      	ldrb	r1, [r2, #1]
 80017c2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80017c6:	7811      	ldrb	r1, [r2, #0]
 80017c8:	6802      	ldr	r2, [r0, #0]
 80017ca:	430b      	orrs	r3, r1
 80017cc:	4422      	add	r2, r4
 80017ce:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80017d2:	6802      	ldr	r2, [r0, #0]
 80017d4:	3518      	adds	r5, #24
 80017d6:	012d      	lsls	r5, r5, #4
 80017d8:	5953      	ldr	r3, [r2, r5]
 80017da:	f043 0301 	orr.w	r3, r3, #1
 80017de:	5153      	str	r3, [r2, r5]
      return HAL_OK;
 80017e0:	2000      	movs	r0, #0
 80017e2:	e7b7      	b.n	8001754 <HAL_CAN_AddTxMessage+0x1c>
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80017e4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80017e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80017ea:	6243      	str	r3, [r0, #36]	; 0x24
        return HAL_ERROR;
 80017ec:	2001      	movs	r0, #1
 80017ee:	e7b1      	b.n	8001754 <HAL_CAN_AddTxMessage+0x1c>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80017f0:	684c      	ldr	r4, [r1, #4]
 80017f2:	ea43 03c4 	orr.w	r3, r3, r4, lsl #3
                                                           pHeader->RTR);
 80017f6:	68cc      	ldr	r4, [r1, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80017f8:	6806      	ldr	r6, [r0, #0]
                                                           pHeader->IDE |
 80017fa:	4323      	orrs	r3, r4
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80017fc:	f105 0418 	add.w	r4, r5, #24
 8001800:	0124      	lsls	r4, r4, #4
 8001802:	5133      	str	r3, [r6, r4]
 8001804:	e7be      	b.n	8001784 <HAL_CAN_AddTxMessage+0x4c>
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001806:	6803      	ldr	r3, [r0, #0]
 8001808:	eb03 1306 	add.w	r3, r3, r6, lsl #4
 800180c:	6859      	ldr	r1, [r3, #4]
 800180e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001812:	6059      	str	r1, [r3, #4]
 8001814:	e7c0      	b.n	8001798 <HAL_CAN_AddTxMessage+0x60>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001816:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001818:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800181c:	6243      	str	r3, [r0, #36]	; 0x24
      return HAL_ERROR;
 800181e:	2001      	movs	r0, #1
 8001820:	e798      	b.n	8001754 <HAL_CAN_AddTxMessage+0x1c>

08001822 <HAL_CAN_IsTxMessagePending>:
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
  uint32_t status = 0U;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001822:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8001826:	3b01      	subs	r3, #1
 8001828:	b2db      	uxtb	r3, r3
 800182a:	2b01      	cmp	r3, #1
 800182c:	d901      	bls.n	8001832 <HAL_CAN_IsTxMessagePending+0x10>
  uint32_t status = 0U;
 800182e:	2000      	movs	r0, #0
 8001830:	4770      	bx	lr
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8001832:	6803      	ldr	r3, [r0, #0]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	0689      	lsls	r1, r1, #26
 8001838:	ea31 0303 	bics.w	r3, r1, r3
 800183c:	d001      	beq.n	8001842 <HAL_CAN_IsTxMessagePending+0x20>
    {
      status = 1U;
 800183e:	2001      	movs	r0, #1
    }
  }

  /* Return status */
  return status;
}
 8001840:	4770      	bx	lr
  uint32_t status = 0U;
 8001842:	2000      	movs	r0, #0
 8001844:	4770      	bx	lr

08001846 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001846:	b430      	push	{r4, r5}
  HAL_CAN_StateTypeDef state = hcan->State;
 8001848:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800184c:	3c01      	subs	r4, #1
 800184e:	b2e4      	uxtb	r4, r4
 8001850:	2c01      	cmp	r4, #1
 8001852:	d906      	bls.n	8001862 <HAL_CAN_GetRxMessage+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001854:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001856:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800185a:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800185c:	2001      	movs	r0, #1
  }
}
 800185e:	bc30      	pop	{r4, r5}
 8001860:	4770      	bx	lr
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001862:	2900      	cmp	r1, #0
 8001864:	d16f      	bne.n	8001946 <HAL_CAN_GetRxMessage+0x100>
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001866:	6804      	ldr	r4, [r0, #0]
 8001868:	68e4      	ldr	r4, [r4, #12]
 800186a:	f014 0f03 	tst.w	r4, #3
 800186e:	d064      	beq.n	800193a <HAL_CAN_GetRxMessage+0xf4>
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001870:	6805      	ldr	r5, [r0, #0]
 8001872:	f101 041b 	add.w	r4, r1, #27
 8001876:	0124      	lsls	r4, r4, #4
 8001878:	592c      	ldr	r4, [r5, r4]
 800187a:	f004 0404 	and.w	r4, r4, #4
 800187e:	6094      	str	r4, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001880:	2c00      	cmp	r4, #0
 8001882:	d16b      	bne.n	800195c <HAL_CAN_GetRxMessage+0x116>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001884:	6805      	ldr	r5, [r0, #0]
 8001886:	f101 041b 	add.w	r4, r1, #27
 800188a:	0124      	lsls	r4, r4, #4
 800188c:	592c      	ldr	r4, [r5, r4]
 800188e:	0d64      	lsrs	r4, r4, #21
 8001890:	6014      	str	r4, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001892:	6805      	ldr	r5, [r0, #0]
 8001894:	f101 041b 	add.w	r4, r1, #27
 8001898:	0124      	lsls	r4, r4, #4
 800189a:	592d      	ldr	r5, [r5, r4]
 800189c:	f005 0502 	and.w	r5, r5, #2
 80018a0:	60d5      	str	r5, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80018a2:	6805      	ldr	r5, [r0, #0]
 80018a4:	4425      	add	r5, r4
 80018a6:	686d      	ldr	r5, [r5, #4]
 80018a8:	f005 050f 	and.w	r5, r5, #15
 80018ac:	6115      	str	r5, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80018ae:	6805      	ldr	r5, [r0, #0]
 80018b0:	4425      	add	r5, r4
 80018b2:	686d      	ldr	r5, [r5, #4]
 80018b4:	f3c5 2507 	ubfx	r5, r5, #8, #8
 80018b8:	6195      	str	r5, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80018ba:	6805      	ldr	r5, [r0, #0]
 80018bc:	442c      	add	r4, r5
 80018be:	6864      	ldr	r4, [r4, #4]
 80018c0:	0c24      	lsrs	r4, r4, #16
 80018c2:	6154      	str	r4, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80018c4:	6804      	ldr	r4, [r0, #0]
 80018c6:	010a      	lsls	r2, r1, #4
 80018c8:	4414      	add	r4, r2
 80018ca:	f8d4 41b8 	ldr.w	r4, [r4, #440]	; 0x1b8
 80018ce:	701c      	strb	r4, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80018d0:	6804      	ldr	r4, [r0, #0]
 80018d2:	4414      	add	r4, r2
 80018d4:	f8d4 41b8 	ldr.w	r4, [r4, #440]	; 0x1b8
 80018d8:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80018dc:	705c      	strb	r4, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80018de:	6804      	ldr	r4, [r0, #0]
 80018e0:	4414      	add	r4, r2
 80018e2:	f8d4 41b8 	ldr.w	r4, [r4, #440]	; 0x1b8
 80018e6:	f3c4 4407 	ubfx	r4, r4, #16, #8
 80018ea:	709c      	strb	r4, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80018ec:	6804      	ldr	r4, [r0, #0]
 80018ee:	4414      	add	r4, r2
 80018f0:	f8d4 41b8 	ldr.w	r4, [r4, #440]	; 0x1b8
 80018f4:	0e24      	lsrs	r4, r4, #24
 80018f6:	70dc      	strb	r4, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80018f8:	6804      	ldr	r4, [r0, #0]
 80018fa:	4414      	add	r4, r2
 80018fc:	f8d4 41bc 	ldr.w	r4, [r4, #444]	; 0x1bc
 8001900:	711c      	strb	r4, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001902:	6804      	ldr	r4, [r0, #0]
 8001904:	4414      	add	r4, r2
 8001906:	f8d4 41bc 	ldr.w	r4, [r4, #444]	; 0x1bc
 800190a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800190e:	715c      	strb	r4, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001910:	6804      	ldr	r4, [r0, #0]
 8001912:	4414      	add	r4, r2
 8001914:	f8d4 41bc 	ldr.w	r4, [r4, #444]	; 0x1bc
 8001918:	f3c4 4407 	ubfx	r4, r4, #16, #8
 800191c:	719c      	strb	r4, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800191e:	6804      	ldr	r4, [r0, #0]
 8001920:	4422      	add	r2, r4
 8001922:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8001926:	0e12      	lsrs	r2, r2, #24
 8001928:	71da      	strb	r2, [r3, #7]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800192a:	b9f9      	cbnz	r1, 800196c <HAL_CAN_GetRxMessage+0x126>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800192c:	6802      	ldr	r2, [r0, #0]
 800192e:	68d3      	ldr	r3, [r2, #12]
 8001930:	f043 0320 	orr.w	r3, r3, #32
 8001934:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8001936:	2000      	movs	r0, #0
 8001938:	e791      	b.n	800185e <HAL_CAN_GetRxMessage+0x18>
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800193a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800193c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001940:	6243      	str	r3, [r0, #36]	; 0x24
        return HAL_ERROR;
 8001942:	2001      	movs	r0, #1
 8001944:	e78b      	b.n	800185e <HAL_CAN_GetRxMessage+0x18>
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001946:	6804      	ldr	r4, [r0, #0]
 8001948:	6924      	ldr	r4, [r4, #16]
 800194a:	f014 0f03 	tst.w	r4, #3
 800194e:	d18f      	bne.n	8001870 <HAL_CAN_GetRxMessage+0x2a>
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001950:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001952:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001956:	6243      	str	r3, [r0, #36]	; 0x24
        return HAL_ERROR;
 8001958:	2001      	movs	r0, #1
 800195a:	e780      	b.n	800185e <HAL_CAN_GetRxMessage+0x18>
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800195c:	6805      	ldr	r5, [r0, #0]
 800195e:	f101 041b 	add.w	r4, r1, #27
 8001962:	0124      	lsls	r4, r4, #4
 8001964:	592c      	ldr	r4, [r5, r4]
 8001966:	08e4      	lsrs	r4, r4, #3
 8001968:	6054      	str	r4, [r2, #4]
 800196a:	e792      	b.n	8001892 <HAL_CAN_GetRxMessage+0x4c>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800196c:	6802      	ldr	r2, [r0, #0]
 800196e:	6913      	ldr	r3, [r2, #16]
 8001970:	f043 0320 	orr.w	r3, r3, #32
 8001974:	6113      	str	r3, [r2, #16]
    return HAL_OK;
 8001976:	2000      	movs	r0, #0
 8001978:	e771      	b.n	800185e <HAL_CAN_GetRxMessage+0x18>

0800197a <HAL_CAN_GetRxFifoFillLevel>:
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
  uint32_t filllevel = 0U;
  HAL_CAN_StateTypeDef state = hcan->State;
 800197a:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800197e:	3b01      	subs	r3, #1
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b01      	cmp	r3, #1
 8001984:	d901      	bls.n	800198a <HAL_CAN_GetRxFifoFillLevel+0x10>
  uint32_t filllevel = 0U;
 8001986:	2000      	movs	r0, #0
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
}
 8001988:	4770      	bx	lr
    if (RxFifo == CAN_RX_FIFO0)
 800198a:	b121      	cbz	r1, 8001996 <HAL_CAN_GetRxFifoFillLevel+0x1c>
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 800198c:	6803      	ldr	r3, [r0, #0]
 800198e:	6918      	ldr	r0, [r3, #16]
 8001990:	f000 0003 	and.w	r0, r0, #3
 8001994:	4770      	bx	lr
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8001996:	6803      	ldr	r3, [r0, #0]
 8001998:	68d8      	ldr	r0, [r3, #12]
 800199a:	f000 0003 	and.w	r0, r0, #3
 800199e:	4770      	bx	lr

080019a0 <HAL_CAN_TxMailbox0CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80019a0:	4770      	bx	lr

080019a2 <HAL_CAN_TxMailbox1CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80019a2:	4770      	bx	lr

080019a4 <HAL_CAN_TxMailbox2CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80019a4:	4770      	bx	lr

080019a6 <HAL_CAN_TxMailbox0AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80019a6:	4770      	bx	lr

080019a8 <HAL_CAN_TxMailbox1AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80019a8:	4770      	bx	lr

080019aa <HAL_CAN_TxMailbox2AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80019aa:	4770      	bx	lr

080019ac <HAL_CAN_RxFifo0MsgPendingCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80019ac:	4770      	bx	lr

080019ae <HAL_CAN_RxFifo0FullCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80019ae:	4770      	bx	lr

080019b0 <HAL_CAN_RxFifo1MsgPendingCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80019b0:	4770      	bx	lr

080019b2 <HAL_CAN_RxFifo1FullCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80019b2:	4770      	bx	lr

080019b4 <HAL_CAN_SleepCallback>:
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80019b4:	4770      	bx	lr

080019b6 <HAL_CAN_WakeUpFromRxMsgCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80019b6:	4770      	bx	lr

080019b8 <HAL_CAN_ErrorCallback>:
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80019b8:	4770      	bx	lr

080019ba <HAL_CAN_IRQHandler>:
{
 80019ba:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019be:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80019c0:	6803      	ldr	r3, [r0, #0]
 80019c2:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80019c4:	685f      	ldr	r7, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80019c6:	689e      	ldr	r6, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80019c8:	f8d3 900c 	ldr.w	r9, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80019cc:	f8d3 8010 	ldr.w	r8, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80019d0:	f8d3 a018 	ldr.w	sl, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80019d4:	f014 0f01 	tst.w	r4, #1
 80019d8:	d05a      	beq.n	8001a90 <HAL_CAN_IRQHandler+0xd6>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80019da:	f016 0f01 	tst.w	r6, #1
 80019de:	d017      	beq.n	8001a10 <HAL_CAN_IRQHandler+0x56>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80019e0:	2201      	movs	r2, #1
 80019e2:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80019e4:	f016 0f02 	tst.w	r6, #2
 80019e8:	d108      	bne.n	80019fc <HAL_CAN_IRQHandler+0x42>
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80019ea:	f016 0f04 	tst.w	r6, #4
 80019ee:	d130      	bne.n	8001a52 <HAL_CAN_IRQHandler+0x98>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80019f0:	f016 0f08 	tst.w	r6, #8
 80019f4:	d007      	beq.n	8001a06 <HAL_CAN_IRQHandler+0x4c>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80019f6:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
 80019fa:	e00b      	b.n	8001a14 <HAL_CAN_IRQHandler+0x5a>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80019fc:	f7ff ffd0 	bl	80019a0 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001a00:	f04f 0b00 	mov.w	fp, #0
 8001a04:	e006      	b.n	8001a14 <HAL_CAN_IRQHandler+0x5a>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001a06:	f7ff ffce 	bl	80019a6 <HAL_CAN_TxMailbox0AbortCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001a0a:	f04f 0b00 	mov.w	fp, #0
 8001a0e:	e001      	b.n	8001a14 <HAL_CAN_IRQHandler+0x5a>
 8001a10:	f04f 0b00 	mov.w	fp, #0
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001a14:	f416 7f80 	tst.w	r6, #256	; 0x100
 8001a18:	d00b      	beq.n	8001a32 <HAL_CAN_IRQHandler+0x78>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001a1a:	682b      	ldr	r3, [r5, #0]
 8001a1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a20:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001a22:	f416 7f00 	tst.w	r6, #512	; 0x200
 8001a26:	d117      	bne.n	8001a58 <HAL_CAN_IRQHandler+0x9e>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001a28:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8001a2c:	d018      	beq.n	8001a60 <HAL_CAN_IRQHandler+0xa6>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001a2e:	f44b 5b00 	orr.w	fp, fp, #8192	; 0x2000
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001a32:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 8001a36:	d02d      	beq.n	8001a94 <HAL_CAN_IRQHandler+0xda>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001a38:	682b      	ldr	r3, [r5, #0]
 8001a3a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a3e:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001a40:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8001a44:	d116      	bne.n	8001a74 <HAL_CAN_IRQHandler+0xba>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001a46:	f416 2f80 	tst.w	r6, #262144	; 0x40000
 8001a4a:	d017      	beq.n	8001a7c <HAL_CAN_IRQHandler+0xc2>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001a4c:	f44b 4b00 	orr.w	fp, fp, #32768	; 0x8000
 8001a50:	e020      	b.n	8001a94 <HAL_CAN_IRQHandler+0xda>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001a52:	f44f 6b00 	mov.w	fp, #2048	; 0x800
 8001a56:	e7dd      	b.n	8001a14 <HAL_CAN_IRQHandler+0x5a>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001a58:	4628      	mov	r0, r5
 8001a5a:	f7ff ffa2 	bl	80019a2 <HAL_CAN_TxMailbox1CompleteCallback>
 8001a5e:	e7e8      	b.n	8001a32 <HAL_CAN_IRQHandler+0x78>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001a60:	f416 6f00 	tst.w	r6, #2048	; 0x800
 8001a64:	d002      	beq.n	8001a6c <HAL_CAN_IRQHandler+0xb2>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001a66:	f44b 4b80 	orr.w	fp, fp, #16384	; 0x4000
 8001a6a:	e7e2      	b.n	8001a32 <HAL_CAN_IRQHandler+0x78>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001a6c:	4628      	mov	r0, r5
 8001a6e:	f7ff ff9b 	bl	80019a8 <HAL_CAN_TxMailbox1AbortCallback>
 8001a72:	e7de      	b.n	8001a32 <HAL_CAN_IRQHandler+0x78>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001a74:	4628      	mov	r0, r5
 8001a76:	f7ff ff95 	bl	80019a4 <HAL_CAN_TxMailbox2CompleteCallback>
 8001a7a:	e00b      	b.n	8001a94 <HAL_CAN_IRQHandler+0xda>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001a7c:	f416 2f00 	tst.w	r6, #524288	; 0x80000
 8001a80:	d002      	beq.n	8001a88 <HAL_CAN_IRQHandler+0xce>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001a82:	f44b 3b80 	orr.w	fp, fp, #65536	; 0x10000
 8001a86:	e005      	b.n	8001a94 <HAL_CAN_IRQHandler+0xda>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001a88:	4628      	mov	r0, r5
 8001a8a:	f7ff ff8e 	bl	80019aa <HAL_CAN_TxMailbox2AbortCallback>
 8001a8e:	e001      	b.n	8001a94 <HAL_CAN_IRQHandler+0xda>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001a90:	f04f 0b00 	mov.w	fp, #0
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001a94:	f014 0f08 	tst.w	r4, #8
 8001a98:	d007      	beq.n	8001aaa <HAL_CAN_IRQHandler+0xf0>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001a9a:	f019 0f10 	tst.w	r9, #16
 8001a9e:	d004      	beq.n	8001aaa <HAL_CAN_IRQHandler+0xf0>
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001aa0:	f44b 7b00 	orr.w	fp, fp, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001aa4:	682b      	ldr	r3, [r5, #0]
 8001aa6:	2210      	movs	r2, #16
 8001aa8:	60da      	str	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001aaa:	f014 0f04 	tst.w	r4, #4
 8001aae:	d002      	beq.n	8001ab6 <HAL_CAN_IRQHandler+0xfc>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001ab0:	f019 0f08 	tst.w	r9, #8
 8001ab4:	d160      	bne.n	8001b78 <HAL_CAN_IRQHandler+0x1be>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001ab6:	f014 0f02 	tst.w	r4, #2
 8001aba:	d004      	beq.n	8001ac6 <HAL_CAN_IRQHandler+0x10c>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001abc:	682b      	ldr	r3, [r5, #0]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	f013 0f03 	tst.w	r3, #3
 8001ac4:	d15f      	bne.n	8001b86 <HAL_CAN_IRQHandler+0x1cc>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001ac6:	f014 0f40 	tst.w	r4, #64	; 0x40
 8001aca:	d007      	beq.n	8001adc <HAL_CAN_IRQHandler+0x122>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001acc:	f018 0f10 	tst.w	r8, #16
 8001ad0:	d004      	beq.n	8001adc <HAL_CAN_IRQHandler+0x122>
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001ad2:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001ad6:	682b      	ldr	r3, [r5, #0]
 8001ad8:	2210      	movs	r2, #16
 8001ada:	611a      	str	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001adc:	f014 0f20 	tst.w	r4, #32
 8001ae0:	d002      	beq.n	8001ae8 <HAL_CAN_IRQHandler+0x12e>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001ae2:	f018 0f08 	tst.w	r8, #8
 8001ae6:	d152      	bne.n	8001b8e <HAL_CAN_IRQHandler+0x1d4>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001ae8:	f014 0f10 	tst.w	r4, #16
 8001aec:	d004      	beq.n	8001af8 <HAL_CAN_IRQHandler+0x13e>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001aee:	682b      	ldr	r3, [r5, #0]
 8001af0:	691b      	ldr	r3, [r3, #16]
 8001af2:	f013 0f03 	tst.w	r3, #3
 8001af6:	d151      	bne.n	8001b9c <HAL_CAN_IRQHandler+0x1e2>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001af8:	f414 3f00 	tst.w	r4, #131072	; 0x20000
 8001afc:	d002      	beq.n	8001b04 <HAL_CAN_IRQHandler+0x14a>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001afe:	f017 0f10 	tst.w	r7, #16
 8001b02:	d14f      	bne.n	8001ba4 <HAL_CAN_IRQHandler+0x1ea>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001b04:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 8001b08:	d002      	beq.n	8001b10 <HAL_CAN_IRQHandler+0x156>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001b0a:	f017 0f08 	tst.w	r7, #8
 8001b0e:	d150      	bne.n	8001bb2 <HAL_CAN_IRQHandler+0x1f8>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001b10:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8001b14:	d067      	beq.n	8001be6 <HAL_CAN_IRQHandler+0x22c>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001b16:	f017 0f04 	tst.w	r7, #4
 8001b1a:	d061      	beq.n	8001be0 <HAL_CAN_IRQHandler+0x226>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b1c:	f414 7f80 	tst.w	r4, #256	; 0x100
 8001b20:	d004      	beq.n	8001b2c <HAL_CAN_IRQHandler+0x172>
 8001b22:	f01a 0f01 	tst.w	sl, #1
 8001b26:	d001      	beq.n	8001b2c <HAL_CAN_IRQHandler+0x172>
        errorcode |= HAL_CAN_ERROR_EWG;
 8001b28:	f04b 0b01 	orr.w	fp, fp, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b2c:	f414 7f00 	tst.w	r4, #512	; 0x200
 8001b30:	d004      	beq.n	8001b3c <HAL_CAN_IRQHandler+0x182>
 8001b32:	f01a 0f02 	tst.w	sl, #2
 8001b36:	d001      	beq.n	8001b3c <HAL_CAN_IRQHandler+0x182>
        errorcode |= HAL_CAN_ERROR_EPV;
 8001b38:	f04b 0b02 	orr.w	fp, fp, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b3c:	f414 6f80 	tst.w	r4, #1024	; 0x400
 8001b40:	d004      	beq.n	8001b4c <HAL_CAN_IRQHandler+0x192>
 8001b42:	f01a 0f04 	tst.w	sl, #4
 8001b46:	d001      	beq.n	8001b4c <HAL_CAN_IRQHandler+0x192>
        errorcode |= HAL_CAN_ERROR_BOF;
 8001b48:	f04b 0b04 	orr.w	fp, fp, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001b4c:	f414 6f00 	tst.w	r4, #2048	; 0x800
 8001b50:	d046      	beq.n	8001be0 <HAL_CAN_IRQHandler+0x226>
 8001b52:	f01a 0a70 	ands.w	sl, sl, #112	; 0x70
 8001b56:	d043      	beq.n	8001be0 <HAL_CAN_IRQHandler+0x226>
        switch (esrflags & CAN_ESR_LEC)
 8001b58:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 8001b5c:	d048      	beq.n	8001bf0 <HAL_CAN_IRQHandler+0x236>
 8001b5e:	d92f      	bls.n	8001bc0 <HAL_CAN_IRQHandler+0x206>
 8001b60:	f1ba 0f50 	cmp.w	sl, #80	; 0x50
 8001b64:	d047      	beq.n	8001bf6 <HAL_CAN_IRQHandler+0x23c>
 8001b66:	f1ba 0f60 	cmp.w	sl, #96	; 0x60
 8001b6a:	d047      	beq.n	8001bfc <HAL_CAN_IRQHandler+0x242>
 8001b6c:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 8001b70:	d131      	bne.n	8001bd6 <HAL_CAN_IRQHandler+0x21c>
            errorcode |= HAL_CAN_ERROR_BR;
 8001b72:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
            break;
 8001b76:	e02e      	b.n	8001bd6 <HAL_CAN_IRQHandler+0x21c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001b78:	682b      	ldr	r3, [r5, #0]
 8001b7a:	2208      	movs	r2, #8
 8001b7c:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001b7e:	4628      	mov	r0, r5
 8001b80:	f7ff ff15 	bl	80019ae <HAL_CAN_RxFifo0FullCallback>
 8001b84:	e797      	b.n	8001ab6 <HAL_CAN_IRQHandler+0xfc>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001b86:	4628      	mov	r0, r5
 8001b88:	f7ff ff10 	bl	80019ac <HAL_CAN_RxFifo0MsgPendingCallback>
 8001b8c:	e79b      	b.n	8001ac6 <HAL_CAN_IRQHandler+0x10c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001b8e:	682b      	ldr	r3, [r5, #0]
 8001b90:	2208      	movs	r2, #8
 8001b92:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001b94:	4628      	mov	r0, r5
 8001b96:	f7ff ff0c 	bl	80019b2 <HAL_CAN_RxFifo1FullCallback>
 8001b9a:	e7a5      	b.n	8001ae8 <HAL_CAN_IRQHandler+0x12e>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001b9c:	4628      	mov	r0, r5
 8001b9e:	f7ff ff07 	bl	80019b0 <HAL_CAN_RxFifo1MsgPendingCallback>
 8001ba2:	e7a9      	b.n	8001af8 <HAL_CAN_IRQHandler+0x13e>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001ba4:	682b      	ldr	r3, [r5, #0]
 8001ba6:	2210      	movs	r2, #16
 8001ba8:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8001baa:	4628      	mov	r0, r5
 8001bac:	f7ff ff02 	bl	80019b4 <HAL_CAN_SleepCallback>
 8001bb0:	e7a8      	b.n	8001b04 <HAL_CAN_IRQHandler+0x14a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001bb2:	682b      	ldr	r3, [r5, #0]
 8001bb4:	2208      	movs	r2, #8
 8001bb6:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001bb8:	4628      	mov	r0, r5
 8001bba:	f7ff fefc 	bl	80019b6 <HAL_CAN_WakeUpFromRxMsgCallback>
 8001bbe:	e7a7      	b.n	8001b10 <HAL_CAN_IRQHandler+0x156>
        switch (esrflags & CAN_ESR_LEC)
 8001bc0:	f1ba 0f10 	cmp.w	sl, #16
 8001bc4:	d005      	beq.n	8001bd2 <HAL_CAN_IRQHandler+0x218>
 8001bc6:	f1ba 0f20 	cmp.w	sl, #32
 8001bca:	d104      	bne.n	8001bd6 <HAL_CAN_IRQHandler+0x21c>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001bcc:	f04b 0b10 	orr.w	fp, fp, #16
            break;
 8001bd0:	e001      	b.n	8001bd6 <HAL_CAN_IRQHandler+0x21c>
            errorcode |= HAL_CAN_ERROR_STF;
 8001bd2:	f04b 0b08 	orr.w	fp, fp, #8
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001bd6:	682a      	ldr	r2, [r5, #0]
 8001bd8:	6993      	ldr	r3, [r2, #24]
 8001bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bde:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001be0:	682b      	ldr	r3, [r5, #0]
 8001be2:	2204      	movs	r2, #4
 8001be4:	605a      	str	r2, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001be6:	f1bb 0f00 	cmp.w	fp, #0
 8001bea:	d10a      	bne.n	8001c02 <HAL_CAN_IRQHandler+0x248>
}
 8001bec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            errorcode |= HAL_CAN_ERROR_ACK;
 8001bf0:	f04b 0b20 	orr.w	fp, fp, #32
            break;
 8001bf4:	e7ef      	b.n	8001bd6 <HAL_CAN_IRQHandler+0x21c>
            errorcode |= HAL_CAN_ERROR_BD;
 8001bf6:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
            break;
 8001bfa:	e7ec      	b.n	8001bd6 <HAL_CAN_IRQHandler+0x21c>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001bfc:	f44b 7b80 	orr.w	fp, fp, #256	; 0x100
            break;
 8001c00:	e7e9      	b.n	8001bd6 <HAL_CAN_IRQHandler+0x21c>
    hcan->ErrorCode |= errorcode;
 8001c02:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001c04:	ea43 030b 	orr.w	r3, r3, fp
 8001c08:	626b      	str	r3, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 8001c0a:	4628      	mov	r0, r5
 8001c0c:	f7ff fed4 	bl	80019b8 <HAL_CAN_ErrorCallback>
}
 8001c10:	e7ec      	b.n	8001bec <HAL_CAN_IRQHandler+0x232>
	...

08001c14 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c14:	4906      	ldr	r1, [pc, #24]	; (8001c30 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8001c16:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c18:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001c1c:	041b      	lsls	r3, r3, #16
 8001c1e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c20:	0200      	lsls	r0, r0, #8
 8001c22:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c26:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001c28:	4a02      	ldr	r2, [pc, #8]	; (8001c34 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001c2a:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8001c2c:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001c2e:	4770      	bx	lr
 8001c30:	e000ed00 	.word	0xe000ed00
 8001c34:	05fa0000 	.word	0x05fa0000

08001c38 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c38:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c3a:	4b15      	ldr	r3, [pc, #84]	; (8001c90 <HAL_NVIC_SetPriority+0x58>)
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c42:	f1c3 0407 	rsb	r4, r3, #7
 8001c46:	2c04      	cmp	r4, #4
 8001c48:	bf28      	it	cs
 8001c4a:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c4c:	1d1d      	adds	r5, r3, #4
 8001c4e:	2d06      	cmp	r5, #6
 8001c50:	d914      	bls.n	8001c7c <HAL_NVIC_SetPriority+0x44>
 8001c52:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c54:	f04f 35ff 	mov.w	r5, #4294967295
 8001c58:	fa05 f404 	lsl.w	r4, r5, r4
 8001c5c:	ea21 0104 	bic.w	r1, r1, r4
 8001c60:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c62:	fa05 f303 	lsl.w	r3, r5, r3
 8001c66:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c6a:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001c6c:	2800      	cmp	r0, #0
 8001c6e:	db07      	blt.n	8001c80 <HAL_NVIC_SetPriority+0x48>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c70:	0109      	lsls	r1, r1, #4
 8001c72:	b2c9      	uxtb	r1, r1
 8001c74:	4b07      	ldr	r3, [pc, #28]	; (8001c94 <HAL_NVIC_SetPriority+0x5c>)
 8001c76:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001c78:	bc30      	pop	{r4, r5}
 8001c7a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	e7e9      	b.n	8001c54 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c80:	f000 000f 	and.w	r0, r0, #15
 8001c84:	0109      	lsls	r1, r1, #4
 8001c86:	b2c9      	uxtb	r1, r1
 8001c88:	4b03      	ldr	r3, [pc, #12]	; (8001c98 <HAL_NVIC_SetPriority+0x60>)
 8001c8a:	5419      	strb	r1, [r3, r0]
 8001c8c:	e7f4      	b.n	8001c78 <HAL_NVIC_SetPriority+0x40>
 8001c8e:	bf00      	nop
 8001c90:	e000ed00 	.word	0xe000ed00
 8001c94:	e000e400 	.word	0xe000e400
 8001c98:	e000ed14 	.word	0xe000ed14

08001c9c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001c9c:	2800      	cmp	r0, #0
 8001c9e:	db07      	blt.n	8001cb0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ca0:	f000 021f 	and.w	r2, r0, #31
 8001ca4:	0940      	lsrs	r0, r0, #5
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	4093      	lsls	r3, r2
 8001caa:	4a02      	ldr	r2, [pc, #8]	; (8001cb4 <HAL_NVIC_EnableIRQ+0x18>)
 8001cac:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	e000e100 	.word	0xe000e100

08001cb8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cb8:	3801      	subs	r0, #1
 8001cba:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001cbe:	d20a      	bcs.n	8001cd6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cc0:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <HAL_SYSTICK_Config+0x24>)
 8001cc2:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc4:	4a06      	ldr	r2, [pc, #24]	; (8001ce0 <HAL_SYSTICK_Config+0x28>)
 8001cc6:	21f0      	movs	r1, #240	; 0xf0
 8001cc8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ccc:	2000      	movs	r0, #0
 8001cce:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cd0:	2207      	movs	r2, #7
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001cd6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	e000e010 	.word	0xe000e010
 8001ce0:	e000ed00 	.word	0xe000ed00

08001ce4 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	2b0f      	cmp	r3, #15
 8001ce8:	f200 80d5 	bhi.w	8001e96 <HAL_GPIO_Init+0x1b2>
{
 8001cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	e039      	b.n	8001d66 <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001cf2:	2207      	movs	r2, #7
 8001cf4:	e000      	b.n	8001cf8 <HAL_GPIO_Init+0x14>
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	40b2      	lsls	r2, r6
 8001cfa:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8001cfc:	3402      	adds	r4, #2
 8001cfe:	4e66      	ldr	r6, [pc, #408]	; (8001e98 <HAL_GPIO_Init+0x1b4>)
 8001d00:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d04:	4a65      	ldr	r2, [pc, #404]	; (8001e9c <HAL_GPIO_Init+0x1b8>)
 8001d06:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001d08:	43ea      	mvns	r2, r5
 8001d0a:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d0e:	684f      	ldr	r7, [r1, #4]
 8001d10:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8001d14:	d001      	beq.n	8001d1a <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8001d16:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8001d1a:	4c60      	ldr	r4, [pc, #384]	; (8001e9c <HAL_GPIO_Init+0x1b8>)
 8001d1c:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8001d1e:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001d20:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d24:	684f      	ldr	r7, [r1, #4]
 8001d26:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8001d2a:	d001      	beq.n	8001d30 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8001d2c:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8001d30:	4c5a      	ldr	r4, [pc, #360]	; (8001e9c <HAL_GPIO_Init+0x1b8>)
 8001d32:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d34:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8001d36:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d3a:	684f      	ldr	r7, [r1, #4]
 8001d3c:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8001d40:	d001      	beq.n	8001d46 <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8001d42:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8001d46:	4c55      	ldr	r4, [pc, #340]	; (8001e9c <HAL_GPIO_Init+0x1b8>)
 8001d48:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8001d4a:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8001d4c:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d4e:	684e      	ldr	r6, [r1, #4]
 8001d50:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8001d54:	d001      	beq.n	8001d5a <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8001d56:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8001d5a:	4c50      	ldr	r4, [pc, #320]	; (8001e9c <HAL_GPIO_Init+0x1b8>)
 8001d5c:	60e2      	str	r2, [r4, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d5e:	3301      	adds	r3, #1
 8001d60:	2b0f      	cmp	r3, #15
 8001d62:	f200 8096 	bhi.w	8001e92 <HAL_GPIO_Init+0x1ae>
    ioposition = ((uint32_t)0x01) << position;
 8001d66:	2201      	movs	r2, #1
 8001d68:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d6a:	680c      	ldr	r4, [r1, #0]
 8001d6c:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8001d70:	42aa      	cmp	r2, r5
 8001d72:	d1f4      	bne.n	8001d5e <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d74:	684c      	ldr	r4, [r1, #4]
 8001d76:	1e66      	subs	r6, r4, #1
 8001d78:	2c11      	cmp	r4, #17
 8001d7a:	bf18      	it	ne
 8001d7c:	2e01      	cmpne	r6, #1
 8001d7e:	d901      	bls.n	8001d84 <HAL_GPIO_Init+0xa0>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d80:	2c12      	cmp	r4, #18
 8001d82:	d112      	bne.n	8001daa <HAL_GPIO_Init+0xc6>
        temp = GPIOx->OSPEEDR; 
 8001d84:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001d86:	005f      	lsls	r7, r3, #1
 8001d88:	2403      	movs	r4, #3
 8001d8a:	40bc      	lsls	r4, r7
 8001d8c:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8001d90:	68cc      	ldr	r4, [r1, #12]
 8001d92:	40bc      	lsls	r4, r7
 8001d94:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8001d96:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8001d98:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d9a:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001d9e:	684c      	ldr	r4, [r1, #4]
 8001da0:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8001da4:	409a      	lsls	r2, r3
 8001da6:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 8001da8:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8001daa:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001dac:	005f      	lsls	r7, r3, #1
 8001dae:	2603      	movs	r6, #3
 8001db0:	40be      	lsls	r6, r7
 8001db2:	43f6      	mvns	r6, r6
 8001db4:	4032      	ands	r2, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001db6:	688c      	ldr	r4, [r1, #8]
 8001db8:	40bc      	lsls	r4, r7
 8001dba:	4314      	orrs	r4, r2
      GPIOx->PUPDR = temp;
 8001dbc:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dbe:	684a      	ldr	r2, [r1, #4]
 8001dc0:	2a12      	cmp	r2, #18
 8001dc2:	bf18      	it	ne
 8001dc4:	2a02      	cmpne	r2, #2
 8001dc6:	d113      	bne.n	8001df0 <HAL_GPIO_Init+0x10c>
        temp = GPIOx->AFR[position >> 3];
 8001dc8:	08dc      	lsrs	r4, r3, #3
 8001dca:	3408      	adds	r4, #8
 8001dcc:	f850 e024 	ldr.w	lr, [r0, r4, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001dd0:	f003 0207 	and.w	r2, r3, #7
 8001dd4:	ea4f 0c82 	mov.w	ip, r2, lsl #2
 8001dd8:	220f      	movs	r2, #15
 8001dda:	fa02 f20c 	lsl.w	r2, r2, ip
 8001dde:	ea2e 0e02 	bic.w	lr, lr, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001de2:	690a      	ldr	r2, [r1, #16]
 8001de4:	fa02 f20c 	lsl.w	r2, r2, ip
 8001de8:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3] = temp;
 8001dec:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
      temp = GPIOx->MODER;
 8001df0:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001df2:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001df4:	684a      	ldr	r2, [r1, #4]
 8001df6:	f002 0203 	and.w	r2, r2, #3
 8001dfa:	40ba      	lsls	r2, r7
 8001dfc:	4332      	orrs	r2, r6
      GPIOx->MODER = temp;
 8001dfe:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e00:	684a      	ldr	r2, [r1, #4]
 8001e02:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8001e06:	d0aa      	beq.n	8001d5e <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e08:	4a25      	ldr	r2, [pc, #148]	; (8001ea0 <HAL_GPIO_Init+0x1bc>)
 8001e0a:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8001e0c:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8001e10:	6454      	str	r4, [r2, #68]	; 0x44
 8001e12:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001e14:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001e18:	9201      	str	r2, [sp, #4]
 8001e1a:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8001e1c:	089c      	lsrs	r4, r3, #2
 8001e1e:	1ca6      	adds	r6, r4, #2
 8001e20:	4a1d      	ldr	r2, [pc, #116]	; (8001e98 <HAL_GPIO_Init+0x1b4>)
 8001e22:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001e26:	f003 0203 	and.w	r2, r3, #3
 8001e2a:	0096      	lsls	r6, r2, #2
 8001e2c:	220f      	movs	r2, #15
 8001e2e:	40b2      	lsls	r2, r6
 8001e30:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001e34:	4a1b      	ldr	r2, [pc, #108]	; (8001ea4 <HAL_GPIO_Init+0x1c0>)
 8001e36:	4290      	cmp	r0, r2
 8001e38:	f43f af5d 	beq.w	8001cf6 <HAL_GPIO_Init+0x12>
 8001e3c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e40:	4290      	cmp	r0, r2
 8001e42:	d01a      	beq.n	8001e7a <HAL_GPIO_Init+0x196>
 8001e44:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e48:	4290      	cmp	r0, r2
 8001e4a:	d018      	beq.n	8001e7e <HAL_GPIO_Init+0x19a>
 8001e4c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e50:	4290      	cmp	r0, r2
 8001e52:	d016      	beq.n	8001e82 <HAL_GPIO_Init+0x19e>
 8001e54:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e58:	4290      	cmp	r0, r2
 8001e5a:	d014      	beq.n	8001e86 <HAL_GPIO_Init+0x1a2>
 8001e5c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e60:	4290      	cmp	r0, r2
 8001e62:	d012      	beq.n	8001e8a <HAL_GPIO_Init+0x1a6>
 8001e64:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e68:	4290      	cmp	r0, r2
 8001e6a:	d010      	beq.n	8001e8e <HAL_GPIO_Init+0x1aa>
 8001e6c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e70:	4290      	cmp	r0, r2
 8001e72:	f43f af3e 	beq.w	8001cf2 <HAL_GPIO_Init+0xe>
 8001e76:	2208      	movs	r2, #8
 8001e78:	e73e      	b.n	8001cf8 <HAL_GPIO_Init+0x14>
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	e73c      	b.n	8001cf8 <HAL_GPIO_Init+0x14>
 8001e7e:	2202      	movs	r2, #2
 8001e80:	e73a      	b.n	8001cf8 <HAL_GPIO_Init+0x14>
 8001e82:	2203      	movs	r2, #3
 8001e84:	e738      	b.n	8001cf8 <HAL_GPIO_Init+0x14>
 8001e86:	2204      	movs	r2, #4
 8001e88:	e736      	b.n	8001cf8 <HAL_GPIO_Init+0x14>
 8001e8a:	2205      	movs	r2, #5
 8001e8c:	e734      	b.n	8001cf8 <HAL_GPIO_Init+0x14>
 8001e8e:	2206      	movs	r2, #6
 8001e90:	e732      	b.n	8001cf8 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8001e92:	b003      	add	sp, #12
 8001e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e96:	4770      	bx	lr
 8001e98:	40013800 	.word	0x40013800
 8001e9c:	40013c00 	.word	0x40013c00
 8001ea0:	40023800 	.word	0x40023800
 8001ea4:	40020000 	.word	0x40020000

08001ea8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ea8:	b912      	cbnz	r2, 8001eb0 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001eaa:	0409      	lsls	r1, r1, #16
 8001eac:	6181      	str	r1, [r0, #24]
  }
}
 8001eae:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8001eb0:	6181      	str	r1, [r0, #24]
 8001eb2:	4770      	bx	lr

08001eb4 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001eb4:	2800      	cmp	r0, #0
 8001eb6:	f000 8209 	beq.w	80022cc <HAL_RCC_OscConfig+0x418>
{
 8001eba:	b570      	push	{r4, r5, r6, lr}
 8001ebc:	b082      	sub	sp, #8
 8001ebe:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ec0:	6803      	ldr	r3, [r0, #0]
 8001ec2:	f013 0f01 	tst.w	r3, #1
 8001ec6:	d029      	beq.n	8001f1c <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ec8:	4ba2      	ldr	r3, [pc, #648]	; (8002154 <HAL_RCC_OscConfig+0x2a0>)
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f003 030c 	and.w	r3, r3, #12
 8001ed0:	2b04      	cmp	r3, #4
 8001ed2:	d01a      	beq.n	8001f0a <HAL_RCC_OscConfig+0x56>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ed4:	4b9f      	ldr	r3, [pc, #636]	; (8002154 <HAL_RCC_OscConfig+0x2a0>)
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f003 030c 	and.w	r3, r3, #12
 8001edc:	2b08      	cmp	r3, #8
 8001ede:	d00f      	beq.n	8001f00 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ee0:	6863      	ldr	r3, [r4, #4]
 8001ee2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ee6:	d040      	beq.n	8001f6a <HAL_RCC_OscConfig+0xb6>
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d154      	bne.n	8001f96 <HAL_RCC_OscConfig+0xe2>
 8001eec:	4b99      	ldr	r3, [pc, #612]	; (8002154 <HAL_RCC_OscConfig+0x2a0>)
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001efc:	601a      	str	r2, [r3, #0]
 8001efe:	e039      	b.n	8001f74 <HAL_RCC_OscConfig+0xc0>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f00:	4b94      	ldr	r3, [pc, #592]	; (8002154 <HAL_RCC_OscConfig+0x2a0>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001f08:	d0ea      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f0a:	4b92      	ldr	r3, [pc, #584]	; (8002154 <HAL_RCC_OscConfig+0x2a0>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001f12:	d003      	beq.n	8001f1c <HAL_RCC_OscConfig+0x68>
 8001f14:	6863      	ldr	r3, [r4, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f000 81da 	beq.w	80022d0 <HAL_RCC_OscConfig+0x41c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f1c:	6823      	ldr	r3, [r4, #0]
 8001f1e:	f013 0f02 	tst.w	r3, #2
 8001f22:	d075      	beq.n	8002010 <HAL_RCC_OscConfig+0x15c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f24:	4b8b      	ldr	r3, [pc, #556]	; (8002154 <HAL_RCC_OscConfig+0x2a0>)
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f013 0f0c 	tst.w	r3, #12
 8001f2c:	d05e      	beq.n	8001fec <HAL_RCC_OscConfig+0x138>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f2e:	4b89      	ldr	r3, [pc, #548]	; (8002154 <HAL_RCC_OscConfig+0x2a0>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f003 030c 	and.w	r3, r3, #12
 8001f36:	2b08      	cmp	r3, #8
 8001f38:	d053      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f3a:	68e3      	ldr	r3, [r4, #12]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	f000 808a 	beq.w	8002056 <HAL_RCC_OscConfig+0x1a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f42:	4a84      	ldr	r2, [pc, #528]	; (8002154 <HAL_RCC_OscConfig+0x2a0>)
 8001f44:	6813      	ldr	r3, [r2, #0]
 8001f46:	f043 0301 	orr.w	r3, r3, #1
 8001f4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f4c:	f7ff f8dc 	bl	8001108 <HAL_GetTick>
 8001f50:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f52:	4b80      	ldr	r3, [pc, #512]	; (8002154 <HAL_RCC_OscConfig+0x2a0>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f013 0f02 	tst.w	r3, #2
 8001f5a:	d173      	bne.n	8002044 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f5c:	f7ff f8d4 	bl	8001108 <HAL_GetTick>
 8001f60:	1b40      	subs	r0, r0, r5
 8001f62:	2802      	cmp	r0, #2
 8001f64:	d9f5      	bls.n	8001f52 <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 8001f66:	2003      	movs	r0, #3
 8001f68:	e1b5      	b.n	80022d6 <HAL_RCC_OscConfig+0x422>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f6a:	4a7a      	ldr	r2, [pc, #488]	; (8002154 <HAL_RCC_OscConfig+0x2a0>)
 8001f6c:	6813      	ldr	r3, [r2, #0]
 8001f6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f72:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f74:	6863      	ldr	r3, [r4, #4]
 8001f76:	b32b      	cbz	r3, 8001fc4 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8001f78:	f7ff f8c6 	bl	8001108 <HAL_GetTick>
 8001f7c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f7e:	4b75      	ldr	r3, [pc, #468]	; (8002154 <HAL_RCC_OscConfig+0x2a0>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001f86:	d1c9      	bne.n	8001f1c <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f88:	f7ff f8be 	bl	8001108 <HAL_GetTick>
 8001f8c:	1b40      	subs	r0, r0, r5
 8001f8e:	2864      	cmp	r0, #100	; 0x64
 8001f90:	d9f5      	bls.n	8001f7e <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8001f92:	2003      	movs	r0, #3
 8001f94:	e19f      	b.n	80022d6 <HAL_RCC_OscConfig+0x422>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f96:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f9a:	d009      	beq.n	8001fb0 <HAL_RCC_OscConfig+0xfc>
 8001f9c:	4b6d      	ldr	r3, [pc, #436]	; (8002154 <HAL_RCC_OscConfig+0x2a0>)
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001fa4:	601a      	str	r2, [r3, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001fac:	601a      	str	r2, [r3, #0]
 8001fae:	e7e1      	b.n	8001f74 <HAL_RCC_OscConfig+0xc0>
 8001fb0:	4b68      	ldr	r3, [pc, #416]	; (8002154 <HAL_RCC_OscConfig+0x2a0>)
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001fb8:	601a      	str	r2, [r3, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	e7d7      	b.n	8001f74 <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 8001fc4:	f7ff f8a0 	bl	8001108 <HAL_GetTick>
 8001fc8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fca:	4b62      	ldr	r3, [pc, #392]	; (8002154 <HAL_RCC_OscConfig+0x2a0>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001fd2:	d0a3      	beq.n	8001f1c <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fd4:	f7ff f898 	bl	8001108 <HAL_GetTick>
 8001fd8:	1b40      	subs	r0, r0, r5
 8001fda:	2864      	cmp	r0, #100	; 0x64
 8001fdc:	d9f5      	bls.n	8001fca <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 8001fde:	2003      	movs	r0, #3
 8001fe0:	e179      	b.n	80022d6 <HAL_RCC_OscConfig+0x422>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fe2:	4b5c      	ldr	r3, [pc, #368]	; (8002154 <HAL_RCC_OscConfig+0x2a0>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001fea:	d1a6      	bne.n	8001f3a <HAL_RCC_OscConfig+0x86>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fec:	4b59      	ldr	r3, [pc, #356]	; (8002154 <HAL_RCC_OscConfig+0x2a0>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f013 0f02 	tst.w	r3, #2
 8001ff4:	d004      	beq.n	8002000 <HAL_RCC_OscConfig+0x14c>
 8001ff6:	68e3      	ldr	r3, [r4, #12]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d001      	beq.n	8002000 <HAL_RCC_OscConfig+0x14c>
        return HAL_ERROR;
 8001ffc:	2001      	movs	r0, #1
 8001ffe:	e16a      	b.n	80022d6 <HAL_RCC_OscConfig+0x422>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002000:	4a54      	ldr	r2, [pc, #336]	; (8002154 <HAL_RCC_OscConfig+0x2a0>)
 8002002:	6813      	ldr	r3, [r2, #0]
 8002004:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002008:	6921      	ldr	r1, [r4, #16]
 800200a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800200e:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002010:	6823      	ldr	r3, [r4, #0]
 8002012:	f013 0f08 	tst.w	r3, #8
 8002016:	d046      	beq.n	80020a6 <HAL_RCC_OscConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002018:	6963      	ldr	r3, [r4, #20]
 800201a:	b383      	cbz	r3, 800207e <HAL_RCC_OscConfig+0x1ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800201c:	4a4d      	ldr	r2, [pc, #308]	; (8002154 <HAL_RCC_OscConfig+0x2a0>)
 800201e:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8002020:	f043 0301 	orr.w	r3, r3, #1
 8002024:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002026:	f7ff f86f 	bl	8001108 <HAL_GetTick>
 800202a:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800202c:	4b49      	ldr	r3, [pc, #292]	; (8002154 <HAL_RCC_OscConfig+0x2a0>)
 800202e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002030:	f013 0f02 	tst.w	r3, #2
 8002034:	d137      	bne.n	80020a6 <HAL_RCC_OscConfig+0x1f2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002036:	f7ff f867 	bl	8001108 <HAL_GetTick>
 800203a:	1b40      	subs	r0, r0, r5
 800203c:	2802      	cmp	r0, #2
 800203e:	d9f5      	bls.n	800202c <HAL_RCC_OscConfig+0x178>
        {
          return HAL_TIMEOUT;
 8002040:	2003      	movs	r0, #3
 8002042:	e148      	b.n	80022d6 <HAL_RCC_OscConfig+0x422>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002044:	4a43      	ldr	r2, [pc, #268]	; (8002154 <HAL_RCC_OscConfig+0x2a0>)
 8002046:	6813      	ldr	r3, [r2, #0]
 8002048:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800204c:	6921      	ldr	r1, [r4, #16]
 800204e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002052:	6013      	str	r3, [r2, #0]
 8002054:	e7dc      	b.n	8002010 <HAL_RCC_OscConfig+0x15c>
        __HAL_RCC_HSI_DISABLE();
 8002056:	4a3f      	ldr	r2, [pc, #252]	; (8002154 <HAL_RCC_OscConfig+0x2a0>)
 8002058:	6813      	ldr	r3, [r2, #0]
 800205a:	f023 0301 	bic.w	r3, r3, #1
 800205e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002060:	f7ff f852 	bl	8001108 <HAL_GetTick>
 8002064:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002066:	4b3b      	ldr	r3, [pc, #236]	; (8002154 <HAL_RCC_OscConfig+0x2a0>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f013 0f02 	tst.w	r3, #2
 800206e:	d0cf      	beq.n	8002010 <HAL_RCC_OscConfig+0x15c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002070:	f7ff f84a 	bl	8001108 <HAL_GetTick>
 8002074:	1b40      	subs	r0, r0, r5
 8002076:	2802      	cmp	r0, #2
 8002078:	d9f5      	bls.n	8002066 <HAL_RCC_OscConfig+0x1b2>
            return HAL_TIMEOUT;
 800207a:	2003      	movs	r0, #3
 800207c:	e12b      	b.n	80022d6 <HAL_RCC_OscConfig+0x422>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800207e:	4a35      	ldr	r2, [pc, #212]	; (8002154 <HAL_RCC_OscConfig+0x2a0>)
 8002080:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8002082:	f023 0301 	bic.w	r3, r3, #1
 8002086:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002088:	f7ff f83e 	bl	8001108 <HAL_GetTick>
 800208c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800208e:	4b31      	ldr	r3, [pc, #196]	; (8002154 <HAL_RCC_OscConfig+0x2a0>)
 8002090:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002092:	f013 0f02 	tst.w	r3, #2
 8002096:	d006      	beq.n	80020a6 <HAL_RCC_OscConfig+0x1f2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002098:	f7ff f836 	bl	8001108 <HAL_GetTick>
 800209c:	1b40      	subs	r0, r0, r5
 800209e:	2802      	cmp	r0, #2
 80020a0:	d9f5      	bls.n	800208e <HAL_RCC_OscConfig+0x1da>
        {
          return HAL_TIMEOUT;
 80020a2:	2003      	movs	r0, #3
 80020a4:	e117      	b.n	80022d6 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020a6:	6823      	ldr	r3, [r4, #0]
 80020a8:	f013 0f04 	tst.w	r3, #4
 80020ac:	d07e      	beq.n	80021ac <HAL_RCC_OscConfig+0x2f8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ae:	4b29      	ldr	r3, [pc, #164]	; (8002154 <HAL_RCC_OscConfig+0x2a0>)
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80020b6:	d11e      	bne.n	80020f6 <HAL_RCC_OscConfig+0x242>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80020b8:	4b26      	ldr	r3, [pc, #152]	; (8002154 <HAL_RCC_OscConfig+0x2a0>)
 80020ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020bc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80020c0:	641a      	str	r2, [r3, #64]	; 0x40
 80020c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c8:	9301      	str	r3, [sp, #4]
 80020ca:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80020cc:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020ce:	4b22      	ldr	r3, [pc, #136]	; (8002158 <HAL_RCC_OscConfig+0x2a4>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80020d6:	d010      	beq.n	80020fa <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020d8:	68a3      	ldr	r3, [r4, #8]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d021      	beq.n	8002122 <HAL_RCC_OscConfig+0x26e>
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d13c      	bne.n	800215c <HAL_RCC_OscConfig+0x2a8>
 80020e2:	4b1c      	ldr	r3, [pc, #112]	; (8002154 <HAL_RCC_OscConfig+0x2a0>)
 80020e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80020e6:	f022 0201 	bic.w	r2, r2, #1
 80020ea:	671a      	str	r2, [r3, #112]	; 0x70
 80020ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80020ee:	f022 0204 	bic.w	r2, r2, #4
 80020f2:	671a      	str	r2, [r3, #112]	; 0x70
 80020f4:	e01a      	b.n	800212c <HAL_RCC_OscConfig+0x278>
  FlagStatus pwrclkchanged = RESET;
 80020f6:	2500      	movs	r5, #0
 80020f8:	e7e9      	b.n	80020ce <HAL_RCC_OscConfig+0x21a>
      PWR->CR1 |= PWR_CR1_DBP;
 80020fa:	4a17      	ldr	r2, [pc, #92]	; (8002158 <HAL_RCC_OscConfig+0x2a4>)
 80020fc:	6813      	ldr	r3, [r2, #0]
 80020fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002102:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002104:	f7ff f800 	bl	8001108 <HAL_GetTick>
 8002108:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800210a:	4b13      	ldr	r3, [pc, #76]	; (8002158 <HAL_RCC_OscConfig+0x2a4>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002112:	d1e1      	bne.n	80020d8 <HAL_RCC_OscConfig+0x224>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002114:	f7fe fff8 	bl	8001108 <HAL_GetTick>
 8002118:	1b80      	subs	r0, r0, r6
 800211a:	2864      	cmp	r0, #100	; 0x64
 800211c:	d9f5      	bls.n	800210a <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 800211e:	2003      	movs	r0, #3
 8002120:	e0d9      	b.n	80022d6 <HAL_RCC_OscConfig+0x422>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002122:	4a0c      	ldr	r2, [pc, #48]	; (8002154 <HAL_RCC_OscConfig+0x2a0>)
 8002124:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002126:	f043 0301 	orr.w	r3, r3, #1
 800212a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800212c:	68a3      	ldr	r3, [r4, #8]
 800212e:	b35b      	cbz	r3, 8002188 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002130:	f7fe ffea 	bl	8001108 <HAL_GetTick>
 8002134:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002136:	4b07      	ldr	r3, [pc, #28]	; (8002154 <HAL_RCC_OscConfig+0x2a0>)
 8002138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800213a:	f013 0f02 	tst.w	r3, #2
 800213e:	d134      	bne.n	80021aa <HAL_RCC_OscConfig+0x2f6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002140:	f7fe ffe2 	bl	8001108 <HAL_GetTick>
 8002144:	1b80      	subs	r0, r0, r6
 8002146:	f241 3388 	movw	r3, #5000	; 0x1388
 800214a:	4298      	cmp	r0, r3
 800214c:	d9f3      	bls.n	8002136 <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 800214e:	2003      	movs	r0, #3
 8002150:	e0c1      	b.n	80022d6 <HAL_RCC_OscConfig+0x422>
 8002152:	bf00      	nop
 8002154:	40023800 	.word	0x40023800
 8002158:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800215c:	2b05      	cmp	r3, #5
 800215e:	d009      	beq.n	8002174 <HAL_RCC_OscConfig+0x2c0>
 8002160:	4b60      	ldr	r3, [pc, #384]	; (80022e4 <HAL_RCC_OscConfig+0x430>)
 8002162:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002164:	f022 0201 	bic.w	r2, r2, #1
 8002168:	671a      	str	r2, [r3, #112]	; 0x70
 800216a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800216c:	f022 0204 	bic.w	r2, r2, #4
 8002170:	671a      	str	r2, [r3, #112]	; 0x70
 8002172:	e7db      	b.n	800212c <HAL_RCC_OscConfig+0x278>
 8002174:	4b5b      	ldr	r3, [pc, #364]	; (80022e4 <HAL_RCC_OscConfig+0x430>)
 8002176:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002178:	f042 0204 	orr.w	r2, r2, #4
 800217c:	671a      	str	r2, [r3, #112]	; 0x70
 800217e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002180:	f042 0201 	orr.w	r2, r2, #1
 8002184:	671a      	str	r2, [r3, #112]	; 0x70
 8002186:	e7d1      	b.n	800212c <HAL_RCC_OscConfig+0x278>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002188:	f7fe ffbe 	bl	8001108 <HAL_GetTick>
 800218c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800218e:	4b55      	ldr	r3, [pc, #340]	; (80022e4 <HAL_RCC_OscConfig+0x430>)
 8002190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002192:	f013 0f02 	tst.w	r3, #2
 8002196:	d008      	beq.n	80021aa <HAL_RCC_OscConfig+0x2f6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002198:	f7fe ffb6 	bl	8001108 <HAL_GetTick>
 800219c:	1b80      	subs	r0, r0, r6
 800219e:	f241 3388 	movw	r3, #5000	; 0x1388
 80021a2:	4298      	cmp	r0, r3
 80021a4:	d9f3      	bls.n	800218e <HAL_RCC_OscConfig+0x2da>
        {
          return HAL_TIMEOUT;
 80021a6:	2003      	movs	r0, #3
 80021a8:	e095      	b.n	80022d6 <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80021aa:	b9fd      	cbnz	r5, 80021ec <HAL_RCC_OscConfig+0x338>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021ac:	69a3      	ldr	r3, [r4, #24]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f000 8090 	beq.w	80022d4 <HAL_RCC_OscConfig+0x420>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021b4:	4a4b      	ldr	r2, [pc, #300]	; (80022e4 <HAL_RCC_OscConfig+0x430>)
 80021b6:	6892      	ldr	r2, [r2, #8]
 80021b8:	f002 020c 	and.w	r2, r2, #12
 80021bc:	2a08      	cmp	r2, #8
 80021be:	d058      	beq.n	8002272 <HAL_RCC_OscConfig+0x3be>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d019      	beq.n	80021f8 <HAL_RCC_OscConfig+0x344>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021c4:	4a47      	ldr	r2, [pc, #284]	; (80022e4 <HAL_RCC_OscConfig+0x430>)
 80021c6:	6813      	ldr	r3, [r2, #0]
 80021c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ce:	f7fe ff9b 	bl	8001108 <HAL_GetTick>
 80021d2:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021d4:	4b43      	ldr	r3, [pc, #268]	; (80022e4 <HAL_RCC_OscConfig+0x430>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80021dc:	d047      	beq.n	800226e <HAL_RCC_OscConfig+0x3ba>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021de:	f7fe ff93 	bl	8001108 <HAL_GetTick>
 80021e2:	1b00      	subs	r0, r0, r4
 80021e4:	2802      	cmp	r0, #2
 80021e6:	d9f5      	bls.n	80021d4 <HAL_RCC_OscConfig+0x320>
          {
            return HAL_TIMEOUT;
 80021e8:	2003      	movs	r0, #3
 80021ea:	e074      	b.n	80022d6 <HAL_RCC_OscConfig+0x422>
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ec:	4a3d      	ldr	r2, [pc, #244]	; (80022e4 <HAL_RCC_OscConfig+0x430>)
 80021ee:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80021f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021f4:	6413      	str	r3, [r2, #64]	; 0x40
 80021f6:	e7d9      	b.n	80021ac <HAL_RCC_OscConfig+0x2f8>
        __HAL_RCC_PLL_DISABLE();
 80021f8:	4a3a      	ldr	r2, [pc, #232]	; (80022e4 <HAL_RCC_OscConfig+0x430>)
 80021fa:	6813      	ldr	r3, [r2, #0]
 80021fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002200:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002202:	f7fe ff81 	bl	8001108 <HAL_GetTick>
 8002206:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002208:	4b36      	ldr	r3, [pc, #216]	; (80022e4 <HAL_RCC_OscConfig+0x430>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002210:	d006      	beq.n	8002220 <HAL_RCC_OscConfig+0x36c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002212:	f7fe ff79 	bl	8001108 <HAL_GetTick>
 8002216:	1b40      	subs	r0, r0, r5
 8002218:	2802      	cmp	r0, #2
 800221a:	d9f5      	bls.n	8002208 <HAL_RCC_OscConfig+0x354>
            return HAL_TIMEOUT;
 800221c:	2003      	movs	r0, #3
 800221e:	e05a      	b.n	80022d6 <HAL_RCC_OscConfig+0x422>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002220:	69e3      	ldr	r3, [r4, #28]
 8002222:	6a22      	ldr	r2, [r4, #32]
 8002224:	4313      	orrs	r3, r2
 8002226:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002228:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800222c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800222e:	0852      	lsrs	r2, r2, #1
 8002230:	3a01      	subs	r2, #1
 8002232:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002236:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002238:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800223c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002240:	4a28      	ldr	r2, [pc, #160]	; (80022e4 <HAL_RCC_OscConfig+0x430>)
 8002242:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002244:	6813      	ldr	r3, [r2, #0]
 8002246:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800224a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800224c:	f7fe ff5c 	bl	8001108 <HAL_GetTick>
 8002250:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002252:	4b24      	ldr	r3, [pc, #144]	; (80022e4 <HAL_RCC_OscConfig+0x430>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800225a:	d106      	bne.n	800226a <HAL_RCC_OscConfig+0x3b6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800225c:	f7fe ff54 	bl	8001108 <HAL_GetTick>
 8002260:	1b00      	subs	r0, r0, r4
 8002262:	2802      	cmp	r0, #2
 8002264:	d9f5      	bls.n	8002252 <HAL_RCC_OscConfig+0x39e>
            return HAL_TIMEOUT;
 8002266:	2003      	movs	r0, #3
 8002268:	e035      	b.n	80022d6 <HAL_RCC_OscConfig+0x422>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 800226a:	2000      	movs	r0, #0
 800226c:	e033      	b.n	80022d6 <HAL_RCC_OscConfig+0x422>
 800226e:	2000      	movs	r0, #0
 8002270:	e031      	b.n	80022d6 <HAL_RCC_OscConfig+0x422>
      pll_config = RCC->PLLCFGR;
 8002272:	4a1c      	ldr	r2, [pc, #112]	; (80022e4 <HAL_RCC_OscConfig+0x430>)
 8002274:	6852      	ldr	r2, [r2, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002276:	2b01      	cmp	r3, #1
 8002278:	d02f      	beq.n	80022da <HAL_RCC_OscConfig+0x426>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800227a:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800227e:	69e1      	ldr	r1, [r4, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002280:	428b      	cmp	r3, r1
 8002282:	d001      	beq.n	8002288 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 8002284:	2001      	movs	r0, #1
 8002286:	e026      	b.n	80022d6 <HAL_RCC_OscConfig+0x422>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002288:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 800228c:	6a21      	ldr	r1, [r4, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800228e:	428b      	cmp	r3, r1
 8002290:	d001      	beq.n	8002296 <HAL_RCC_OscConfig+0x3e2>
        return HAL_ERROR;
 8002292:	2001      	movs	r0, #1
 8002294:	e01f      	b.n	80022d6 <HAL_RCC_OscConfig+0x422>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002296:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002298:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800229c:	4013      	ands	r3, r2
 800229e:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 80022a2:	d001      	beq.n	80022a8 <HAL_RCC_OscConfig+0x3f4>
        return HAL_ERROR;
 80022a4:	2001      	movs	r0, #1
 80022a6:	e016      	b.n	80022d6 <HAL_RCC_OscConfig+0x422>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80022a8:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 80022ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80022ae:	085b      	lsrs	r3, r3, #1
 80022b0:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022b2:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 80022b6:	d001      	beq.n	80022bc <HAL_RCC_OscConfig+0x408>
        return HAL_ERROR;
 80022b8:	2001      	movs	r0, #1
 80022ba:	e00c      	b.n	80022d6 <HAL_RCC_OscConfig+0x422>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80022bc:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 80022c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80022c2:	ebb2 6f03 	cmp.w	r2, r3, lsl #24
 80022c6:	d00a      	beq.n	80022de <HAL_RCC_OscConfig+0x42a>
        return HAL_ERROR;
 80022c8:	2001      	movs	r0, #1
 80022ca:	e004      	b.n	80022d6 <HAL_RCC_OscConfig+0x422>
    return HAL_ERROR;
 80022cc:	2001      	movs	r0, #1
}
 80022ce:	4770      	bx	lr
        return HAL_ERROR;
 80022d0:	2001      	movs	r0, #1
 80022d2:	e000      	b.n	80022d6 <HAL_RCC_OscConfig+0x422>
  return HAL_OK;
 80022d4:	2000      	movs	r0, #0
}
 80022d6:	b002      	add	sp, #8
 80022d8:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80022da:	2001      	movs	r0, #1
 80022dc:	e7fb      	b.n	80022d6 <HAL_RCC_OscConfig+0x422>
  return HAL_OK;
 80022de:	2000      	movs	r0, #0
 80022e0:	e7f9      	b.n	80022d6 <HAL_RCC_OscConfig+0x422>
 80022e2:	bf00      	nop
 80022e4:	40023800 	.word	0x40023800

080022e8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022e8:	4b26      	ldr	r3, [pc, #152]	; (8002384 <HAL_RCC_GetSysClockFreq+0x9c>)
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f003 030c 	and.w	r3, r3, #12
 80022f0:	2b04      	cmp	r3, #4
 80022f2:	d044      	beq.n	800237e <HAL_RCC_GetSysClockFreq+0x96>
 80022f4:	2b08      	cmp	r3, #8
 80022f6:	d001      	beq.n	80022fc <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022f8:	4823      	ldr	r0, [pc, #140]	; (8002388 <HAL_RCC_GetSysClockFreq+0xa0>)
 80022fa:	4770      	bx	lr
{
 80022fc:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002300:	4b20      	ldr	r3, [pc, #128]	; (8002384 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002302:	685a      	ldr	r2, [r3, #4]
 8002304:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800230e:	d013      	beq.n	8002338 <HAL_RCC_GetSysClockFreq+0x50>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002310:	4b1c      	ldr	r3, [pc, #112]	; (8002384 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002312:	6859      	ldr	r1, [r3, #4]
 8002314:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002318:	2300      	movs	r3, #0
 800231a:	481c      	ldr	r0, [pc, #112]	; (800238c <HAL_RCC_GetSysClockFreq+0xa4>)
 800231c:	fba1 0100 	umull	r0, r1, r1, r0
 8002320:	f7fd ff7e 	bl	8000220 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002324:	4b17      	ldr	r3, [pc, #92]	; (8002384 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800232c:	3301      	adds	r3, #1
 800232e:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8002330:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002334:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002338:	4b12      	ldr	r3, [pc, #72]	; (8002384 <HAL_RCC_GetSysClockFreq+0x9c>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002340:	461e      	mov	r6, r3
 8002342:	2700      	movs	r7, #0
 8002344:	015c      	lsls	r4, r3, #5
 8002346:	2500      	movs	r5, #0
 8002348:	1ae4      	subs	r4, r4, r3
 800234a:	eb65 0507 	sbc.w	r5, r5, r7
 800234e:	01a9      	lsls	r1, r5, #6
 8002350:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8002354:	01a0      	lsls	r0, r4, #6
 8002356:	1b00      	subs	r0, r0, r4
 8002358:	eb61 0105 	sbc.w	r1, r1, r5
 800235c:	00cb      	lsls	r3, r1, #3
 800235e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002362:	00c4      	lsls	r4, r0, #3
 8002364:	19a0      	adds	r0, r4, r6
 8002366:	eb43 0107 	adc.w	r1, r3, r7
 800236a:	028b      	lsls	r3, r1, #10
 800236c:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8002370:	0284      	lsls	r4, r0, #10
 8002372:	4620      	mov	r0, r4
 8002374:	4619      	mov	r1, r3
 8002376:	2300      	movs	r3, #0
 8002378:	f7fd ff52 	bl	8000220 <__aeabi_uldivmod>
 800237c:	e7d2      	b.n	8002324 <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = HSE_VALUE;
 800237e:	4803      	ldr	r0, [pc, #12]	; (800238c <HAL_RCC_GetSysClockFreq+0xa4>)
}
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	40023800 	.word	0x40023800
 8002388:	00f42400 	.word	0x00f42400
 800238c:	017d7840 	.word	0x017d7840

08002390 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8002390:	2800      	cmp	r0, #0
 8002392:	f000 80a3 	beq.w	80024dc <HAL_RCC_ClockConfig+0x14c>
{
 8002396:	b570      	push	{r4, r5, r6, lr}
 8002398:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800239a:	4b52      	ldr	r3, [pc, #328]	; (80024e4 <HAL_RCC_ClockConfig+0x154>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 030f 	and.w	r3, r3, #15
 80023a2:	428b      	cmp	r3, r1
 80023a4:	d20c      	bcs.n	80023c0 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023a6:	4a4f      	ldr	r2, [pc, #316]	; (80024e4 <HAL_RCC_ClockConfig+0x154>)
 80023a8:	6813      	ldr	r3, [r2, #0]
 80023aa:	f023 030f 	bic.w	r3, r3, #15
 80023ae:	430b      	orrs	r3, r1
 80023b0:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023b2:	6813      	ldr	r3, [r2, #0]
 80023b4:	f003 030f 	and.w	r3, r3, #15
 80023b8:	428b      	cmp	r3, r1
 80023ba:	d001      	beq.n	80023c0 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 80023bc:	2001      	movs	r0, #1
}
 80023be:	bd70      	pop	{r4, r5, r6, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023c0:	6823      	ldr	r3, [r4, #0]
 80023c2:	f013 0f02 	tst.w	r3, #2
 80023c6:	d017      	beq.n	80023f8 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023c8:	f013 0f04 	tst.w	r3, #4
 80023cc:	d004      	beq.n	80023d8 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023ce:	4a46      	ldr	r2, [pc, #280]	; (80024e8 <HAL_RCC_ClockConfig+0x158>)
 80023d0:	6893      	ldr	r3, [r2, #8]
 80023d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023d6:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023d8:	6823      	ldr	r3, [r4, #0]
 80023da:	f013 0f08 	tst.w	r3, #8
 80023de:	d004      	beq.n	80023ea <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023e0:	4a41      	ldr	r2, [pc, #260]	; (80024e8 <HAL_RCC_ClockConfig+0x158>)
 80023e2:	6893      	ldr	r3, [r2, #8]
 80023e4:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023e8:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023ea:	4a3f      	ldr	r2, [pc, #252]	; (80024e8 <HAL_RCC_ClockConfig+0x158>)
 80023ec:	6893      	ldr	r3, [r2, #8]
 80023ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023f2:	68a0      	ldr	r0, [r4, #8]
 80023f4:	4303      	orrs	r3, r0
 80023f6:	6093      	str	r3, [r2, #8]
 80023f8:	460d      	mov	r5, r1
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023fa:	6823      	ldr	r3, [r4, #0]
 80023fc:	f013 0f01 	tst.w	r3, #1
 8002400:	d031      	beq.n	8002466 <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002402:	6863      	ldr	r3, [r4, #4]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d020      	beq.n	800244a <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002408:	2b02      	cmp	r3, #2
 800240a:	d025      	beq.n	8002458 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800240c:	4a36      	ldr	r2, [pc, #216]	; (80024e8 <HAL_RCC_ClockConfig+0x158>)
 800240e:	6812      	ldr	r2, [r2, #0]
 8002410:	f012 0f02 	tst.w	r2, #2
 8002414:	d064      	beq.n	80024e0 <HAL_RCC_ClockConfig+0x150>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002416:	4934      	ldr	r1, [pc, #208]	; (80024e8 <HAL_RCC_ClockConfig+0x158>)
 8002418:	688a      	ldr	r2, [r1, #8]
 800241a:	f022 0203 	bic.w	r2, r2, #3
 800241e:	4313      	orrs	r3, r2
 8002420:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002422:	f7fe fe71 	bl	8001108 <HAL_GetTick>
 8002426:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002428:	4b2f      	ldr	r3, [pc, #188]	; (80024e8 <HAL_RCC_ClockConfig+0x158>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f003 030c 	and.w	r3, r3, #12
 8002430:	6862      	ldr	r2, [r4, #4]
 8002432:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002436:	d016      	beq.n	8002466 <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002438:	f7fe fe66 	bl	8001108 <HAL_GetTick>
 800243c:	1b80      	subs	r0, r0, r6
 800243e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002442:	4298      	cmp	r0, r3
 8002444:	d9f0      	bls.n	8002428 <HAL_RCC_ClockConfig+0x98>
        return HAL_TIMEOUT;
 8002446:	2003      	movs	r0, #3
 8002448:	e7b9      	b.n	80023be <HAL_RCC_ClockConfig+0x2e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800244a:	4a27      	ldr	r2, [pc, #156]	; (80024e8 <HAL_RCC_ClockConfig+0x158>)
 800244c:	6812      	ldr	r2, [r2, #0]
 800244e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002452:	d1e0      	bne.n	8002416 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8002454:	2001      	movs	r0, #1
 8002456:	e7b2      	b.n	80023be <HAL_RCC_ClockConfig+0x2e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002458:	4a23      	ldr	r2, [pc, #140]	; (80024e8 <HAL_RCC_ClockConfig+0x158>)
 800245a:	6812      	ldr	r2, [r2, #0]
 800245c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002460:	d1d9      	bne.n	8002416 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8002462:	2001      	movs	r0, #1
 8002464:	e7ab      	b.n	80023be <HAL_RCC_ClockConfig+0x2e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002466:	4b1f      	ldr	r3, [pc, #124]	; (80024e4 <HAL_RCC_ClockConfig+0x154>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 030f 	and.w	r3, r3, #15
 800246e:	42ab      	cmp	r3, r5
 8002470:	d90c      	bls.n	800248c <HAL_RCC_ClockConfig+0xfc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002472:	4a1c      	ldr	r2, [pc, #112]	; (80024e4 <HAL_RCC_ClockConfig+0x154>)
 8002474:	6813      	ldr	r3, [r2, #0]
 8002476:	f023 030f 	bic.w	r3, r3, #15
 800247a:	432b      	orrs	r3, r5
 800247c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800247e:	6813      	ldr	r3, [r2, #0]
 8002480:	f003 030f 	and.w	r3, r3, #15
 8002484:	42ab      	cmp	r3, r5
 8002486:	d001      	beq.n	800248c <HAL_RCC_ClockConfig+0xfc>
      return HAL_ERROR;
 8002488:	2001      	movs	r0, #1
 800248a:	e798      	b.n	80023be <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800248c:	6823      	ldr	r3, [r4, #0]
 800248e:	f013 0f04 	tst.w	r3, #4
 8002492:	d006      	beq.n	80024a2 <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002494:	4a14      	ldr	r2, [pc, #80]	; (80024e8 <HAL_RCC_ClockConfig+0x158>)
 8002496:	6893      	ldr	r3, [r2, #8]
 8002498:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800249c:	68e1      	ldr	r1, [r4, #12]
 800249e:	430b      	orrs	r3, r1
 80024a0:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024a2:	6823      	ldr	r3, [r4, #0]
 80024a4:	f013 0f08 	tst.w	r3, #8
 80024a8:	d007      	beq.n	80024ba <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024aa:	4a0f      	ldr	r2, [pc, #60]	; (80024e8 <HAL_RCC_ClockConfig+0x158>)
 80024ac:	6893      	ldr	r3, [r2, #8]
 80024ae:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80024b2:	6921      	ldr	r1, [r4, #16]
 80024b4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80024b8:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024ba:	f7ff ff15 	bl	80022e8 <HAL_RCC_GetSysClockFreq>
 80024be:	4b0a      	ldr	r3, [pc, #40]	; (80024e8 <HAL_RCC_ClockConfig+0x158>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80024c6:	4a09      	ldr	r2, [pc, #36]	; (80024ec <HAL_RCC_ClockConfig+0x15c>)
 80024c8:	5cd3      	ldrb	r3, [r2, r3]
 80024ca:	40d8      	lsrs	r0, r3
 80024cc:	4b08      	ldr	r3, [pc, #32]	; (80024f0 <HAL_RCC_ClockConfig+0x160>)
 80024ce:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80024d0:	4b08      	ldr	r3, [pc, #32]	; (80024f4 <HAL_RCC_ClockConfig+0x164>)
 80024d2:	6818      	ldr	r0, [r3, #0]
 80024d4:	f7fe fdda 	bl	800108c <HAL_InitTick>
  return HAL_OK;
 80024d8:	2000      	movs	r0, #0
 80024da:	e770      	b.n	80023be <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80024dc:	2001      	movs	r0, #1
}
 80024de:	4770      	bx	lr
        return HAL_ERROR;
 80024e0:	2001      	movs	r0, #1
 80024e2:	e76c      	b.n	80023be <HAL_RCC_ClockConfig+0x2e>
 80024e4:	40023c00 	.word	0x40023c00
 80024e8:	40023800 	.word	0x40023800
 80024ec:	0800372c 	.word	0x0800372c
 80024f0:	200001cc 	.word	0x200001cc
 80024f4:	200001d4 	.word	0x200001d4

080024f8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80024f8:	4b01      	ldr	r3, [pc, #4]	; (8002500 <HAL_RCC_GetHCLKFreq+0x8>)
 80024fa:	6818      	ldr	r0, [r3, #0]
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	200001cc 	.word	0x200001cc

08002504 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002504:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002506:	f7ff fff7 	bl	80024f8 <HAL_RCC_GetHCLKFreq>
 800250a:	4b04      	ldr	r3, [pc, #16]	; (800251c <HAL_RCC_GetPCLK1Freq+0x18>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002512:	4a03      	ldr	r2, [pc, #12]	; (8002520 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002514:	5cd3      	ldrb	r3, [r2, r3]
}
 8002516:	40d8      	lsrs	r0, r3
 8002518:	bd08      	pop	{r3, pc}
 800251a:	bf00      	nop
 800251c:	40023800 	.word	0x40023800
 8002520:	0800373c 	.word	0x0800373c

08002524 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002524:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002526:	f7ff ffe7 	bl	80024f8 <HAL_RCC_GetHCLKFreq>
 800252a:	4b04      	ldr	r3, [pc, #16]	; (800253c <HAL_RCC_GetPCLK2Freq+0x18>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002532:	4a03      	ldr	r2, [pc, #12]	; (8002540 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002534:	5cd3      	ldrb	r3, [r2, r3]
}
 8002536:	40d8      	lsrs	r0, r3
 8002538:	bd08      	pop	{r3, pc}
 800253a:	bf00      	nop
 800253c:	40023800 	.word	0x40023800
 8002540:	0800373c 	.word	0x0800373c

08002544 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002546:	b083      	sub	sp, #12
 8002548:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800254a:	6803      	ldr	r3, [r0, #0]
 800254c:	f013 0f01 	tst.w	r3, #1
 8002550:	d00c      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002552:	4ba4      	ldr	r3, [pc, #656]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002554:	689a      	ldr	r2, [r3, #8]
 8002556:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800255a:	609a      	str	r2, [r3, #8]
 800255c:	689a      	ldr	r2, [r3, #8]
 800255e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002560:	430a      	orrs	r2, r1
 8002562:	609a      	str	r2, [r3, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002564:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002566:	b1c3      	cbz	r3, 800259a <HAL_RCCEx_PeriphCLKConfig+0x56>
  uint32_t plli2sused = 0;
 8002568:	2600      	movs	r6, #0
 800256a:	e000      	b.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x2a>
 800256c:	2600      	movs	r6, #0
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800256e:	6823      	ldr	r3, [r4, #0]
 8002570:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8002574:	d015      	beq.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002576:	4a9b      	ldr	r2, [pc, #620]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002578:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800257c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002580:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002582:	430b      	orrs	r3, r1
 8002584:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002588:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800258a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800258e:	d006      	beq.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002590:	2b00      	cmp	r3, #0
 8002592:	f000 8105 	beq.w	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x25c>
  uint32_t pllsaiused = 0;
 8002596:	2500      	movs	r5, #0
 8002598:	e004      	b.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x60>
      plli2sused = 1;
 800259a:	2601      	movs	r6, #1
 800259c:	e7e7      	b.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1;
 800259e:	2601      	movs	r6, #1
 80025a0:	e7f6      	b.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  uint32_t pllsaiused = 0;
 80025a2:	2500      	movs	r5, #0
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80025a4:	6823      	ldr	r3, [r4, #0]
 80025a6:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80025aa:	d00f      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80025ac:	4a8d      	ldr	r2, [pc, #564]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80025ae:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80025b2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80025b6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80025b8:	430b      	orrs	r3, r1
 80025ba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80025be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80025c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025c4:	f000 80ee 	beq.w	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80025c8:	b903      	cbnz	r3, 80025cc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      pllsaiused = 1;
 80025ca:	2501      	movs	r5, #1
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80025cc:	6823      	ldr	r3, [r4, #0]
 80025ce:	f013 0f20 	tst.w	r3, #32
 80025d2:	f040 80e9 	bne.w	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x264>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80025d6:	6823      	ldr	r3, [r4, #0]
 80025d8:	f013 0f10 	tst.w	r3, #16
 80025dc:	d00c      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0xb4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80025de:	4b81      	ldr	r3, [pc, #516]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80025e0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80025e4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80025e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80025ec:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80025f0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80025f2:	430a      	orrs	r2, r1
 80025f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025f8:	6823      	ldr	r3, [r4, #0]
 80025fa:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80025fe:	d008      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002600:	4a78      	ldr	r2, [pc, #480]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002602:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002606:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800260a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800260c:	430b      	orrs	r3, r1
 800260e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002612:	6823      	ldr	r3, [r4, #0]
 8002614:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002618:	d008      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800261a:	4a72      	ldr	r2, [pc, #456]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800261c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002620:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8002624:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8002626:	430b      	orrs	r3, r1
 8002628:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800262c:	6823      	ldr	r3, [r4, #0]
 800262e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002632:	d008      	beq.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002634:	4a6b      	ldr	r2, [pc, #428]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002636:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800263a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800263e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8002640:	430b      	orrs	r3, r1
 8002642:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002646:	6823      	ldr	r3, [r4, #0]
 8002648:	f013 0f40 	tst.w	r3, #64	; 0x40
 800264c:	d008      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800264e:	4a65      	ldr	r2, [pc, #404]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002650:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002654:	f023 0303 	bic.w	r3, r3, #3
 8002658:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800265a:	430b      	orrs	r3, r1
 800265c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002660:	6823      	ldr	r3, [r4, #0]
 8002662:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002666:	d008      	beq.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002668:	4a5e      	ldr	r2, [pc, #376]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800266a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800266e:	f023 030c 	bic.w	r3, r3, #12
 8002672:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002674:	430b      	orrs	r3, r1
 8002676:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800267a:	6823      	ldr	r3, [r4, #0]
 800267c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002680:	d008      	beq.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002682:	4a58      	ldr	r2, [pc, #352]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002684:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002688:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800268c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800268e:	430b      	orrs	r3, r1
 8002690:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002694:	6823      	ldr	r3, [r4, #0]
 8002696:	f413 7f00 	tst.w	r3, #512	; 0x200
 800269a:	d008      	beq.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800269c:	4a51      	ldr	r2, [pc, #324]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800269e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80026a2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80026a6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80026a8:	430b      	orrs	r3, r1
 80026aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80026ae:	6823      	ldr	r3, [r4, #0]
 80026b0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80026b4:	d008      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80026b6:	4a4b      	ldr	r2, [pc, #300]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80026b8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80026bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026c0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80026c2:	430b      	orrs	r3, r1
 80026c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80026c8:	6823      	ldr	r3, [r4, #0]
 80026ca:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80026ce:	d008      	beq.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80026d0:	4a44      	ldr	r2, [pc, #272]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80026d2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80026d6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80026da:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80026dc:	430b      	orrs	r3, r1
 80026de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80026e2:	6823      	ldr	r3, [r4, #0]
 80026e4:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80026e8:	d008      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80026ea:	4a3e      	ldr	r2, [pc, #248]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80026ec:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80026f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80026f4:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80026f6:	430b      	orrs	r3, r1
 80026f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80026fc:	6823      	ldr	r3, [r4, #0]
 80026fe:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8002702:	d008      	beq.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002704:	4a37      	ldr	r2, [pc, #220]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002706:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800270a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800270e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002710:	430b      	orrs	r3, r1
 8002712:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002716:	6823      	ldr	r3, [r4, #0]
 8002718:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 800271c:	d00d      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800271e:	4a31      	ldr	r2, [pc, #196]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002720:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002724:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8002728:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800272a:	430b      	orrs	r3, r1
 800272c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002730:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8002732:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002736:	f000 80a1 	beq.w	800287c <HAL_RCCEx_PeriphCLKConfig+0x338>
      pllsaiused = 1;
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800273a:	6823      	ldr	r3, [r4, #0]
 800273c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8002740:	d008      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002742:	4a28      	ldr	r2, [pc, #160]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002744:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002748:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800274c:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800274e:	430b      	orrs	r3, r1
 8002750:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002754:	6823      	ldr	r3, [r4, #0]
 8002756:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800275a:	d008      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800275c:	4a21      	ldr	r2, [pc, #132]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800275e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002762:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002766:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8002768:	430b      	orrs	r3, r1
 800276a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800276e:	6823      	ldr	r3, [r4, #0]
 8002770:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8002774:	d008      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002776:	4a1b      	ldr	r2, [pc, #108]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002778:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800277c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8002780:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8002782:	430b      	orrs	r3, r1
 8002784:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002788:	2e00      	cmp	r6, #0
 800278a:	d179      	bne.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800278c:	6823      	ldr	r3, [r4, #0]
 800278e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002792:	d075      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002794:	2d00      	cmp	r5, #0
 8002796:	f040 80e3 	bne.w	8002960 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800279a:	2000      	movs	r0, #0
}
 800279c:	b003      	add	sp, #12
 800279e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pllsaiused = 1;
 80027a0:	2501      	movs	r5, #1
 80027a2:	e6ff      	b.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x60>
      plli2sused = 1;
 80027a4:	2601      	movs	r6, #1
 80027a6:	e70f      	b.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x84>
    __HAL_RCC_PWR_CLK_ENABLE();
 80027a8:	4b0e      	ldr	r3, [pc, #56]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80027aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027ac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80027b0:	641a      	str	r2, [r3, #64]	; 0x40
 80027b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b8:	9301      	str	r3, [sp, #4]
 80027ba:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 80027bc:	4a0a      	ldr	r2, [pc, #40]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80027be:	6813      	ldr	r3, [r2, #0]
 80027c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027c4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80027c6:	f7fe fc9f 	bl	8001108 <HAL_GetTick>
 80027ca:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80027cc:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80027d4:	d10a      	bne.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027d6:	f7fe fc97 	bl	8001108 <HAL_GetTick>
 80027da:	1bc0      	subs	r0, r0, r7
 80027dc:	2864      	cmp	r0, #100	; 0x64
 80027de:	d9f5      	bls.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x288>
        return HAL_TIMEOUT;
 80027e0:	2003      	movs	r0, #3
 80027e2:	e7db      	b.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x258>
 80027e4:	40023800 	.word	0x40023800
 80027e8:	40007000 	.word	0x40007000
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80027ec:	4b8d      	ldr	r3, [pc, #564]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80027ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027f0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80027f4:	d015      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80027f6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80027f8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d010      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002800:	4b88      	ldr	r3, [pc, #544]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8002802:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002804:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8002808:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800280a:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800280e:	6719      	str	r1, [r3, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002810:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002812:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8002816:	6719      	str	r1, [r3, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8002818:	671a      	str	r2, [r3, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800281a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800281c:	f013 0f01 	tst.w	r3, #1
 8002820:	d112      	bne.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x304>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002822:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002824:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002828:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800282c:	d01d      	beq.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x326>
 800282e:	4a7d      	ldr	r2, [pc, #500]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8002830:	6893      	ldr	r3, [r2, #8]
 8002832:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002836:	6093      	str	r3, [r2, #8]
 8002838:	497a      	ldr	r1, [pc, #488]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800283a:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 800283c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800283e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8002842:	4313      	orrs	r3, r2
 8002844:	670b      	str	r3, [r1, #112]	; 0x70
 8002846:	e6c6      	b.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x92>
        tickstart = HAL_GetTick();
 8002848:	f7fe fc5e 	bl	8001108 <HAL_GetTick>
 800284c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800284e:	4b75      	ldr	r3, [pc, #468]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8002850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002852:	f013 0f02 	tst.w	r3, #2
 8002856:	d1e4      	bne.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x2de>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002858:	f7fe fc56 	bl	8001108 <HAL_GetTick>
 800285c:	1bc0      	subs	r0, r0, r7
 800285e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002862:	4298      	cmp	r0, r3
 8002864:	d9f3      	bls.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x30a>
            return HAL_TIMEOUT;
 8002866:	2003      	movs	r0, #3
 8002868:	e798      	b.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x258>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800286a:	486e      	ldr	r0, [pc, #440]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800286c:	6882      	ldr	r2, [r0, #8]
 800286e:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8002872:	496d      	ldr	r1, [pc, #436]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002874:	4019      	ands	r1, r3
 8002876:	430a      	orrs	r2, r1
 8002878:	6082      	str	r2, [r0, #8]
 800287a:	e7dd      	b.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      pllsaiused = 1;
 800287c:	2501      	movs	r5, #1
 800287e:	e75c      	b.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    __HAL_RCC_PLLI2S_DISABLE();
 8002880:	4a68      	ldr	r2, [pc, #416]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8002882:	6813      	ldr	r3, [r2, #0]
 8002884:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002888:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800288a:	f7fe fc3d 	bl	8001108 <HAL_GetTick>
 800288e:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002890:	4b64      	ldr	r3, [pc, #400]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002898:	d006      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x364>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800289a:	f7fe fc35 	bl	8001108 <HAL_GetTick>
 800289e:	1b80      	subs	r0, r0, r6
 80028a0:	2864      	cmp	r0, #100	; 0x64
 80028a2:	d9f5      	bls.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x34c>
        return HAL_TIMEOUT;
 80028a4:	2003      	movs	r0, #3
 80028a6:	e779      	b.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x258>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80028a8:	6823      	ldr	r3, [r4, #0]
 80028aa:	f013 0f01 	tst.w	r3, #1
 80028ae:	d00e      	beq.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x38a>
 80028b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80028b2:	b963      	cbnz	r3, 80028ce <HAL_RCCEx_PeriphCLKConfig+0x38a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80028b4:	4a5b      	ldr	r2, [pc, #364]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80028b6:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 80028ba:	6861      	ldr	r1, [r4, #4]
 80028bc:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80028c0:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80028c4:	68a1      	ldr	r1, [r4, #8]
 80028c6:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80028ca:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80028ce:	6823      	ldr	r3, [r4, #0]
 80028d0:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80028d4:	d003      	beq.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x39a>
 80028d6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80028d8:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 80028dc:	d006      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 80028de:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80028e2:	d019      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80028e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80028e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028ea:	d115      	bne.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80028ec:	4a4d      	ldr	r2, [pc, #308]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80028ee:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 80028f2:	6860      	ldr	r0, [r4, #4]
 80028f4:	68e3      	ldr	r3, [r4, #12]
 80028f6:	061b      	lsls	r3, r3, #24
 80028f8:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80028fc:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8002900:	430b      	orrs	r3, r1
 8002902:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002906:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800290a:	f023 031f 	bic.w	r3, r3, #31
 800290e:	69e1      	ldr	r1, [r4, #28]
 8002910:	3901      	subs	r1, #1
 8002912:	430b      	orrs	r3, r1
 8002914:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002918:	6823      	ldr	r3, [r4, #0]
 800291a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800291e:	d00a      	beq.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002920:	6862      	ldr	r2, [r4, #4]
 8002922:	68e3      	ldr	r3, [r4, #12]
 8002924:	061b      	lsls	r3, r3, #24
 8002926:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800292a:	68a2      	ldr	r2, [r4, #8]
 800292c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002930:	4a3c      	ldr	r2, [pc, #240]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8002932:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8002936:	4a3b      	ldr	r2, [pc, #236]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8002938:	6813      	ldr	r3, [r2, #0]
 800293a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800293e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002940:	f7fe fbe2 	bl	8001108 <HAL_GetTick>
 8002944:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002946:	4b37      	ldr	r3, [pc, #220]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800294e:	f47f af21 	bne.w	8002794 <HAL_RCCEx_PeriphCLKConfig+0x250>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002952:	f7fe fbd9 	bl	8001108 <HAL_GetTick>
 8002956:	1b80      	subs	r0, r0, r6
 8002958:	2864      	cmp	r0, #100	; 0x64
 800295a:	d9f4      	bls.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x402>
        return HAL_TIMEOUT;
 800295c:	2003      	movs	r0, #3
 800295e:	e71d      	b.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x258>
    __HAL_RCC_PLLSAI_DISABLE();
 8002960:	4a30      	ldr	r2, [pc, #192]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8002962:	6813      	ldr	r3, [r2, #0]
 8002964:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002968:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800296a:	f7fe fbcd 	bl	8001108 <HAL_GetTick>
 800296e:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002970:	4b2c      	ldr	r3, [pc, #176]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8002978:	d006      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x444>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800297a:	f7fe fbc5 	bl	8001108 <HAL_GetTick>
 800297e:	1b40      	subs	r0, r0, r5
 8002980:	2864      	cmp	r0, #100	; 0x64
 8002982:	d9f5      	bls.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x42c>
        return HAL_TIMEOUT;
 8002984:	2003      	movs	r0, #3
 8002986:	e709      	b.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x258>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002988:	6823      	ldr	r3, [r4, #0]
 800298a:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800298e:	d001      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x450>
 8002990:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002992:	b122      	cbz	r2, 800299e <HAL_RCCEx_PeriphCLKConfig+0x45a>
 8002994:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002998:	d018      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800299a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800299c:	b9b3      	cbnz	r3, 80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800299e:	4a21      	ldr	r2, [pc, #132]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80029a0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 80029a4:	6921      	ldr	r1, [r4, #16]
 80029a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029aa:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80029ae:	6961      	ldr	r1, [r4, #20]
 80029b0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80029b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80029b8:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80029bc:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80029c0:	6a21      	ldr	r1, [r4, #32]
 80029c2:	3901      	subs	r1, #1
 80029c4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80029c8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80029cc:	6823      	ldr	r3, [r4, #0]
 80029ce:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 80029d2:	d003      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x498>
 80029d4:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80029d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029da:	d013      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
    __HAL_RCC_PLLSAI_ENABLE();
 80029dc:	4a11      	ldr	r2, [pc, #68]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80029de:	6813      	ldr	r3, [r2, #0]
 80029e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029e4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80029e6:	f7fe fb8f 	bl	8001108 <HAL_GetTick>
 80029ea:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80029ec:	4b0d      	ldr	r3, [pc, #52]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80029f4:	d114      	bne.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80029f6:	f7fe fb87 	bl	8001108 <HAL_GetTick>
 80029fa:	1b00      	subs	r0, r0, r4
 80029fc:	2864      	cmp	r0, #100	; 0x64
 80029fe:	d9f5      	bls.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        return HAL_TIMEOUT;
 8002a00:	2003      	movs	r0, #3
 8002a02:	e6cb      	b.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x258>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002a04:	4907      	ldr	r1, [pc, #28]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8002a06:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8002a0a:	6920      	ldr	r0, [r4, #16]
 8002a0c:	69a3      	ldr	r3, [r4, #24]
 8002a0e:	041b      	lsls	r3, r3, #16
 8002a10:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002a14:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002a1e:	e7dd      	b.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x498>
  return HAL_OK;
 8002a20:	2000      	movs	r0, #0
 8002a22:	e6bb      	b.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x258>
 8002a24:	40023800 	.word	0x40023800
 8002a28:	0ffffcff 	.word	0x0ffffcff

08002a2c <HAL_SPI_Init>:
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a2c:	2800      	cmp	r0, #0
 8002a2e:	d058      	beq.n	8002ae2 <HAL_SPI_Init+0xb6>
{
 8002a30:	b510      	push	{r4, lr}
 8002a32:	4604      	mov	r4, r0
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a34:	2300      	movs	r3, #0
 8002a36:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a38:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d045      	beq.n	8002acc <HAL_SPI_Init+0xa0>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a40:	2302      	movs	r3, #2
 8002a42:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a46:	6822      	ldr	r2, [r4, #0]
 8002a48:	6813      	ldr	r3, [r2, #0]
 8002a4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a4e:	6013      	str	r3, [r2, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a50:	68e3      	ldr	r3, [r4, #12]
 8002a52:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002a56:	d93e      	bls.n	8002ad6 <HAL_SPI_Init+0xaa>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002a58:	2200      	movs	r2, #0
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002a5a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002a5e:	bf18      	it	ne
 8002a60:	f5b3 6fe0 	cmpne.w	r3, #1792	; 0x700
 8002a64:	d001      	beq.n	8002a6a <HAL_SPI_Init+0x3e>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a66:	2100      	movs	r1, #0
 8002a68:	62a1      	str	r1, [r4, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002a6a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002a6c:	b921      	cbnz	r1, 8002a78 <HAL_SPI_Init+0x4c>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a6e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002a72:	d933      	bls.n	8002adc <HAL_SPI_Init+0xb0>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002a74:	2302      	movs	r3, #2
 8002a76:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002a78:	6863      	ldr	r3, [r4, #4]
 8002a7a:	68a1      	ldr	r1, [r4, #8]
 8002a7c:	430b      	orrs	r3, r1
 8002a7e:	6921      	ldr	r1, [r4, #16]
 8002a80:	430b      	orrs	r3, r1
 8002a82:	6961      	ldr	r1, [r4, #20]
 8002a84:	430b      	orrs	r3, r1
 8002a86:	69a1      	ldr	r1, [r4, #24]
 8002a88:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8002a8c:	430b      	orrs	r3, r1
 8002a8e:	69e1      	ldr	r1, [r4, #28]
 8002a90:	430b      	orrs	r3, r1
 8002a92:	6a21      	ldr	r1, [r4, #32]
 8002a94:	430b      	orrs	r3, r1
 8002a96:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002a98:	6821      	ldr	r1, [r4, #0]
 8002a9a:	4303      	orrs	r3, r0
 8002a9c:	600b      	str	r3, [r1, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002a9e:	8b63      	ldrh	r3, [r4, #26]
 8002aa0:	f003 0304 	and.w	r3, r3, #4
 8002aa4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002aa6:	430b      	orrs	r3, r1
 8002aa8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002aaa:	430b      	orrs	r3, r1
 8002aac:	68e1      	ldr	r1, [r4, #12]
 8002aae:	430b      	orrs	r3, r1
 8002ab0:	6821      	ldr	r1, [r4, #0]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	604b      	str	r3, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ab6:	6822      	ldr	r2, [r4, #0]
 8002ab8:	69d3      	ldr	r3, [r2, #28]
 8002aba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002abe:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ac0:	2000      	movs	r0, #0
 8002ac2:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
}
 8002aca:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8002acc:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8002ad0:	f7fe f9e8 	bl	8000ea4 <HAL_SPI_MspInit>
 8002ad4:	e7b4      	b.n	8002a40 <HAL_SPI_Init+0x14>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002ad6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ada:	e7be      	b.n	8002a5a <HAL_SPI_Init+0x2e>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002adc:	2301      	movs	r3, #1
 8002ade:	6323      	str	r3, [r4, #48]	; 0x30
 8002ae0:	e7ca      	b.n	8002a78 <HAL_SPI_Init+0x4c>
    return HAL_ERROR;
 8002ae2:	2001      	movs	r0, #1
}
 8002ae4:	4770      	bx	lr
	...

08002ae8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ae8:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002aea:	6a03      	ldr	r3, [r0, #32]
 8002aec:	f023 0301 	bic.w	r3, r3, #1
 8002af0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002af2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002af4:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002af6:	6985      	ldr	r5, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002af8:	4c12      	ldr	r4, [pc, #72]	; (8002b44 <TIM_OC1_SetConfig+0x5c>)
 8002afa:	402c      	ands	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002afc:	680d      	ldr	r5, [r1, #0]
 8002afe:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002b00:	f023 0402 	bic.w	r4, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002b04:	688b      	ldr	r3, [r1, #8]
 8002b06:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002b08:	4c0f      	ldr	r4, [pc, #60]	; (8002b48 <TIM_OC1_SetConfig+0x60>)
 8002b0a:	4e10      	ldr	r6, [pc, #64]	; (8002b4c <TIM_OC1_SetConfig+0x64>)
 8002b0c:	42b0      	cmp	r0, r6
 8002b0e:	bf18      	it	ne
 8002b10:	42a0      	cmpne	r0, r4
 8002b12:	bf0c      	ite	eq
 8002b14:	2401      	moveq	r4, #1
 8002b16:	2400      	movne	r4, #0
 8002b18:	d105      	bne.n	8002b26 <TIM_OC1_SetConfig+0x3e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002b1a:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002b1e:	68ce      	ldr	r6, [r1, #12]
 8002b20:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002b22:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b26:	b12c      	cbz	r4, 8002b34 <TIM_OC1_SetConfig+0x4c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002b28:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002b2c:	694c      	ldr	r4, [r1, #20]
 8002b2e:	4314      	orrs	r4, r2
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b30:	698a      	ldr	r2, [r1, #24]
 8002b32:	4322      	orrs	r2, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b34:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b36:	6185      	str	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b38:	684a      	ldr	r2, [r1, #4]
 8002b3a:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b3c:	6203      	str	r3, [r0, #32]
}
 8002b3e:	bc70      	pop	{r4, r5, r6}
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	fffeff8c 	.word	0xfffeff8c
 8002b48:	40010000 	.word	0x40010000
 8002b4c:	40010400 	.word	0x40010400

08002b50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b50:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b52:	6a03      	ldr	r3, [r0, #32]
 8002b54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b58:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b5a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b5c:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b5e:	69c5      	ldr	r5, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b60:	4c14      	ldr	r4, [pc, #80]	; (8002bb4 <TIM_OC3_SetConfig+0x64>)
 8002b62:	402c      	ands	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b64:	680e      	ldr	r6, [r1, #0]
 8002b66:	4326      	orrs	r6, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b6c:	688c      	ldr	r4, [r1, #8]
 8002b6e:	ea43 2304 	orr.w	r3, r3, r4, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b72:	4c11      	ldr	r4, [pc, #68]	; (8002bb8 <TIM_OC3_SetConfig+0x68>)
 8002b74:	4d11      	ldr	r5, [pc, #68]	; (8002bbc <TIM_OC3_SetConfig+0x6c>)
 8002b76:	42a8      	cmp	r0, r5
 8002b78:	bf18      	it	ne
 8002b7a:	42a0      	cmpne	r0, r4
 8002b7c:	bf0c      	ite	eq
 8002b7e:	2401      	moveq	r4, #1
 8002b80:	2400      	movne	r4, #0
 8002b82:	d106      	bne.n	8002b92 <TIM_OC3_SetConfig+0x42>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002b84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002b88:	68cd      	ldr	r5, [r1, #12]
 8002b8a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002b8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b92:	b13c      	cbz	r4, 8002ba4 <TIM_OC3_SetConfig+0x54>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b94:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002b98:	694c      	ldr	r4, [r1, #20]
 8002b9a:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002b9e:	698c      	ldr	r4, [r1, #24]
 8002ba0:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ba4:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ba6:	61c6      	str	r6, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002ba8:	684a      	ldr	r2, [r1, #4]
 8002baa:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bac:	6203      	str	r3, [r0, #32]
}
 8002bae:	bc70      	pop	{r4, r5, r6}
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	fffeff8c 	.word	0xfffeff8c
 8002bb8:	40010000 	.word	0x40010000
 8002bbc:	40010400 	.word	0x40010400

08002bc0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bc0:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002bc2:	6a03      	ldr	r3, [r0, #32]
 8002bc4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002bc8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bca:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bcc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bce:	69c5      	ldr	r5, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002bd0:	4a0d      	ldr	r2, [pc, #52]	; (8002c08 <TIM_OC4_SetConfig+0x48>)
 8002bd2:	402a      	ands	r2, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bd4:	680d      	ldr	r5, [r1, #0]
 8002bd6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002bda:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002bde:	688d      	ldr	r5, [r1, #8]
 8002be0:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002be4:	4e09      	ldr	r6, [pc, #36]	; (8002c0c <TIM_OC4_SetConfig+0x4c>)
 8002be6:	4d0a      	ldr	r5, [pc, #40]	; (8002c10 <TIM_OC4_SetConfig+0x50>)
 8002be8:	42a8      	cmp	r0, r5
 8002bea:	bf18      	it	ne
 8002bec:	42b0      	cmpne	r0, r6
 8002bee:	d104      	bne.n	8002bfa <TIM_OC4_SetConfig+0x3a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002bf0:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002bf4:	694d      	ldr	r5, [r1, #20]
 8002bf6:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bfa:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002bfc:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002bfe:	684a      	ldr	r2, [r1, #4]
 8002c00:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c02:	6203      	str	r3, [r0, #32]
}
 8002c04:	bc70      	pop	{r4, r5, r6}
 8002c06:	4770      	bx	lr
 8002c08:	feff8cff 	.word	0xfeff8cff
 8002c0c:	40010000 	.word	0x40010000
 8002c10:	40010400 	.word	0x40010400

08002c14 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002c14:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002c16:	6a03      	ldr	r3, [r0, #32]
 8002c18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c1c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c1e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c20:	6842      	ldr	r2, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002c22:	6d44      	ldr	r4, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002c24:	4d0d      	ldr	r5, [pc, #52]	; (8002c5c <TIM_OC5_SetConfig+0x48>)
 8002c26:	4025      	ands	r5, r4
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c28:	680c      	ldr	r4, [r1, #0]
 8002c2a:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002c2c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002c30:	688d      	ldr	r5, [r1, #8]
 8002c32:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c36:	4e0a      	ldr	r6, [pc, #40]	; (8002c60 <TIM_OC5_SetConfig+0x4c>)
 8002c38:	4d0a      	ldr	r5, [pc, #40]	; (8002c64 <TIM_OC5_SetConfig+0x50>)
 8002c3a:	42a8      	cmp	r0, r5
 8002c3c:	bf18      	it	ne
 8002c3e:	42b0      	cmpne	r0, r6
 8002c40:	d104      	bne.n	8002c4c <TIM_OC5_SetConfig+0x38>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002c42:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002c46:	694d      	ldr	r5, [r1, #20]
 8002c48:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c4c:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002c4e:	6544      	str	r4, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002c50:	684a      	ldr	r2, [r1, #4]
 8002c52:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c54:	6203      	str	r3, [r0, #32]
}
 8002c56:	bc70      	pop	{r4, r5, r6}
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	fffeff8f 	.word	0xfffeff8f
 8002c60:	40010000 	.word	0x40010000
 8002c64:	40010400 	.word	0x40010400

08002c68 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002c68:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002c6a:	6a03      	ldr	r3, [r0, #32]
 8002c6c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002c70:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c72:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c74:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002c76:	6d45      	ldr	r5, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002c78:	4a0d      	ldr	r2, [pc, #52]	; (8002cb0 <TIM_OC6_SetConfig+0x48>)
 8002c7a:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c7c:	680d      	ldr	r5, [r1, #0]
 8002c7e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002c82:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002c86:	688d      	ldr	r5, [r1, #8]
 8002c88:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c8c:	4e09      	ldr	r6, [pc, #36]	; (8002cb4 <TIM_OC6_SetConfig+0x4c>)
 8002c8e:	4d0a      	ldr	r5, [pc, #40]	; (8002cb8 <TIM_OC6_SetConfig+0x50>)
 8002c90:	42a8      	cmp	r0, r5
 8002c92:	bf18      	it	ne
 8002c94:	42b0      	cmpne	r0, r6
 8002c96:	d104      	bne.n	8002ca2 <TIM_OC6_SetConfig+0x3a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002c98:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002c9c:	694d      	ldr	r5, [r1, #20]
 8002c9e:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ca2:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002ca4:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002ca6:	684a      	ldr	r2, [r1, #4]
 8002ca8:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002caa:	6203      	str	r3, [r0, #32]
}
 8002cac:	bc70      	pop	{r4, r5, r6}
 8002cae:	4770      	bx	lr
 8002cb0:	feff8fff 	.word	0xfeff8fff
 8002cb4:	40010000 	.word	0x40010000
 8002cb8:	40010400 	.word	0x40010400

08002cbc <TIM_Base_SetConfig>:
{
 8002cbc:	b470      	push	{r4, r5, r6}
  tmpcr1 = TIMx->CR1;
 8002cbe:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cc0:	4c3a      	ldr	r4, [pc, #232]	; (8002dac <TIM_Base_SetConfig+0xf0>)
 8002cc2:	42a0      	cmp	r0, r4
 8002cc4:	bf14      	ite	ne
 8002cc6:	2400      	movne	r4, #0
 8002cc8:	2401      	moveq	r4, #1
 8002cca:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002cce:	bf14      	ite	ne
 8002cd0:	4622      	movne	r2, r4
 8002cd2:	f044 0201 	orreq.w	r2, r4, #1
 8002cd6:	b9aa      	cbnz	r2, 8002d04 <TIM_Base_SetConfig+0x48>
 8002cd8:	4d35      	ldr	r5, [pc, #212]	; (8002db0 <TIM_Base_SetConfig+0xf4>)
 8002cda:	42a8      	cmp	r0, r5
 8002cdc:	bf14      	ite	ne
 8002cde:	2500      	movne	r5, #0
 8002ce0:	2501      	moveq	r5, #1
 8002ce2:	4e34      	ldr	r6, [pc, #208]	; (8002db4 <TIM_Base_SetConfig+0xf8>)
 8002ce4:	42b0      	cmp	r0, r6
 8002ce6:	d00d      	beq.n	8002d04 <TIM_Base_SetConfig+0x48>
 8002ce8:	b965      	cbnz	r5, 8002d04 <TIM_Base_SetConfig+0x48>
 8002cea:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8002cee:	f505 3582 	add.w	r5, r5, #66560	; 0x10400
 8002cf2:	42a8      	cmp	r0, r5
 8002cf4:	bf14      	ite	ne
 8002cf6:	2500      	movne	r5, #0
 8002cf8:	2501      	moveq	r5, #1
 8002cfa:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8002cfe:	42b0      	cmp	r0, r6
 8002d00:	d000      	beq.n	8002d04 <TIM_Base_SetConfig+0x48>
 8002d02:	b11d      	cbz	r5, 8002d0c <TIM_Base_SetConfig+0x50>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002d08:	684d      	ldr	r5, [r1, #4]
 8002d0a:	432b      	orrs	r3, r5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d0c:	2a00      	cmp	r2, #0
 8002d0e:	d133      	bne.n	8002d78 <TIM_Base_SetConfig+0xbc>
 8002d10:	4a27      	ldr	r2, [pc, #156]	; (8002db0 <TIM_Base_SetConfig+0xf4>)
 8002d12:	4290      	cmp	r0, r2
 8002d14:	bf14      	ite	ne
 8002d16:	2200      	movne	r2, #0
 8002d18:	2201      	moveq	r2, #1
 8002d1a:	4d26      	ldr	r5, [pc, #152]	; (8002db4 <TIM_Base_SetConfig+0xf8>)
 8002d1c:	42a8      	cmp	r0, r5
 8002d1e:	d02b      	beq.n	8002d78 <TIM_Base_SetConfig+0xbc>
 8002d20:	bb52      	cbnz	r2, 8002d78 <TIM_Base_SetConfig+0xbc>
 8002d22:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8002d26:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 8002d2a:	4290      	cmp	r0, r2
 8002d2c:	bf14      	ite	ne
 8002d2e:	2200      	movne	r2, #0
 8002d30:	2201      	moveq	r2, #1
 8002d32:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002d36:	42a8      	cmp	r0, r5
 8002d38:	d01e      	beq.n	8002d78 <TIM_Base_SetConfig+0xbc>
 8002d3a:	b9ea      	cbnz	r2, 8002d78 <TIM_Base_SetConfig+0xbc>
 8002d3c:	4a1e      	ldr	r2, [pc, #120]	; (8002db8 <TIM_Base_SetConfig+0xfc>)
 8002d3e:	4290      	cmp	r0, r2
 8002d40:	bf14      	ite	ne
 8002d42:	2200      	movne	r2, #0
 8002d44:	2201      	moveq	r2, #1
 8002d46:	f505 359a 	add.w	r5, r5, #78848	; 0x13400
 8002d4a:	42a8      	cmp	r0, r5
 8002d4c:	d014      	beq.n	8002d78 <TIM_Base_SetConfig+0xbc>
 8002d4e:	b99a      	cbnz	r2, 8002d78 <TIM_Base_SetConfig+0xbc>
 8002d50:	4a1a      	ldr	r2, [pc, #104]	; (8002dbc <TIM_Base_SetConfig+0x100>)
 8002d52:	4290      	cmp	r0, r2
 8002d54:	bf14      	ite	ne
 8002d56:	2200      	movne	r2, #0
 8002d58:	2201      	moveq	r2, #1
 8002d5a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002d5e:	42a8      	cmp	r0, r5
 8002d60:	d00a      	beq.n	8002d78 <TIM_Base_SetConfig+0xbc>
 8002d62:	b94a      	cbnz	r2, 8002d78 <TIM_Base_SetConfig+0xbc>
 8002d64:	4a16      	ldr	r2, [pc, #88]	; (8002dc0 <TIM_Base_SetConfig+0x104>)
 8002d66:	4290      	cmp	r0, r2
 8002d68:	bf14      	ite	ne
 8002d6a:	2200      	movne	r2, #0
 8002d6c:	2201      	moveq	r2, #1
 8002d6e:	f5a5 3596 	sub.w	r5, r5, #76800	; 0x12c00
 8002d72:	42a8      	cmp	r0, r5
 8002d74:	d000      	beq.n	8002d78 <TIM_Base_SetConfig+0xbc>
 8002d76:	b11a      	cbz	r2, 8002d80 <TIM_Base_SetConfig+0xc4>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d7c:	68ca      	ldr	r2, [r1, #12]
 8002d7e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d84:	694a      	ldr	r2, [r1, #20]
 8002d86:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002d88:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d8a:	688a      	ldr	r2, [r1, #8]
 8002d8c:	62c2      	str	r2, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002d8e:	680a      	ldr	r2, [r1, #0]
 8002d90:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d92:	4b0c      	ldr	r3, [pc, #48]	; (8002dc4 <TIM_Base_SetConfig+0x108>)
 8002d94:	4298      	cmp	r0, r3
 8002d96:	bf14      	ite	ne
 8002d98:	4623      	movne	r3, r4
 8002d9a:	f044 0301 	orreq.w	r3, r4, #1
 8002d9e:	b10b      	cbz	r3, 8002da4 <TIM_Base_SetConfig+0xe8>
    TIMx->RCR = Structure->RepetitionCounter;
 8002da0:	690b      	ldr	r3, [r1, #16]
 8002da2:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002da4:	2301      	movs	r3, #1
 8002da6:	6143      	str	r3, [r0, #20]
}
 8002da8:	bc70      	pop	{r4, r5, r6}
 8002daa:	4770      	bx	lr
 8002dac:	40010000 	.word	0x40010000
 8002db0:	40000800 	.word	0x40000800
 8002db4:	40000400 	.word	0x40000400
 8002db8:	40014400 	.word	0x40014400
 8002dbc:	40001800 	.word	0x40001800
 8002dc0:	40002000 	.word	0x40002000
 8002dc4:	40010400 	.word	0x40010400

08002dc8 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8002dc8:	b1a8      	cbz	r0, 8002df6 <HAL_TIM_PWM_Init+0x2e>
{
 8002dca:	b510      	push	{r4, lr}
 8002dcc:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002dce:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002dd2:	b15b      	cbz	r3, 8002dec <HAL_TIM_PWM_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dda:	1d21      	adds	r1, r4, #4
 8002ddc:	6820      	ldr	r0, [r4, #0]
 8002dde:	f7ff ff6d 	bl	8002cbc <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002de2:	2301      	movs	r3, #1
 8002de4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002de8:	2000      	movs	r0, #0
}
 8002dea:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002dec:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002df0:	f7fe f88c 	bl	8000f0c <HAL_TIM_PWM_MspInit>
 8002df4:	e7ee      	b.n	8002dd4 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8002df6:	2001      	movs	r0, #1
}
 8002df8:	4770      	bx	lr
	...

08002dfc <TIM_OC2_SetConfig>:
{
 8002dfc:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dfe:	6a03      	ldr	r3, [r0, #32]
 8002e00:	f023 0310 	bic.w	r3, r3, #16
 8002e04:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002e06:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002e08:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002e0a:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e0c:	4c14      	ldr	r4, [pc, #80]	; (8002e60 <TIM_OC2_SetConfig+0x64>)
 8002e0e:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e10:	680d      	ldr	r5, [r1, #0]
 8002e12:	ea44 2505 	orr.w	r5, r4, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8002e16:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e1a:	688c      	ldr	r4, [r1, #8]
 8002e1c:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e20:	4c10      	ldr	r4, [pc, #64]	; (8002e64 <TIM_OC2_SetConfig+0x68>)
 8002e22:	4e11      	ldr	r6, [pc, #68]	; (8002e68 <TIM_OC2_SetConfig+0x6c>)
 8002e24:	42b0      	cmp	r0, r6
 8002e26:	bf18      	it	ne
 8002e28:	42a0      	cmpne	r0, r4
 8002e2a:	bf0c      	ite	eq
 8002e2c:	2401      	moveq	r4, #1
 8002e2e:	2400      	movne	r4, #0
 8002e30:	d106      	bne.n	8002e40 <TIM_OC2_SetConfig+0x44>
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002e36:	68ce      	ldr	r6, [r1, #12]
 8002e38:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8002e3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e40:	b13c      	cbz	r4, 8002e52 <TIM_OC2_SetConfig+0x56>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e42:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002e46:	694c      	ldr	r4, [r1, #20]
 8002e48:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e4c:	698c      	ldr	r4, [r1, #24]
 8002e4e:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 8002e52:	6042      	str	r2, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002e54:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002e56:	684a      	ldr	r2, [r1, #4]
 8002e58:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002e5a:	6203      	str	r3, [r0, #32]
}
 8002e5c:	bc70      	pop	{r4, r5, r6}
 8002e5e:	4770      	bx	lr
 8002e60:	feff8cff 	.word	0xfeff8cff
 8002e64:	40010000 	.word	0x40010000
 8002e68:	40010400 	.word	0x40010400

08002e6c <HAL_TIM_PWM_ConfigChannel>:
{
 8002e6c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002e6e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	f000 8092 	beq.w	8002f9c <HAL_TIM_PWM_ConfigChannel+0x130>
 8002e78:	460d      	mov	r5, r1
 8002e7a:	4604      	mov	r4, r0
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002e82:	2302      	movs	r3, #2
 8002e84:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 8002e88:	2a14      	cmp	r2, #20
 8002e8a:	d81e      	bhi.n	8002eca <HAL_TIM_PWM_ConfigChannel+0x5e>
 8002e8c:	e8df f002 	tbb	[pc, r2]
 8002e90:	1d1d1d0b 	.word	0x1d1d1d0b
 8002e94:	1d1d1d24 	.word	0x1d1d1d24
 8002e98:	1d1d1d38 	.word	0x1d1d1d38
 8002e9c:	1d1d1d4b 	.word	0x1d1d1d4b
 8002ea0:	1d1d1d5f 	.word	0x1d1d1d5f
 8002ea4:	72          	.byte	0x72
 8002ea5:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ea6:	6800      	ldr	r0, [r0, #0]
 8002ea8:	f7ff fe1e 	bl	8002ae8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002eac:	6822      	ldr	r2, [r4, #0]
 8002eae:	6993      	ldr	r3, [r2, #24]
 8002eb0:	f043 0308 	orr.w	r3, r3, #8
 8002eb4:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002eb6:	6822      	ldr	r2, [r4, #0]
 8002eb8:	6993      	ldr	r3, [r2, #24]
 8002eba:	f023 0304 	bic.w	r3, r3, #4
 8002ebe:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ec0:	6822      	ldr	r2, [r4, #0]
 8002ec2:	6993      	ldr	r3, [r2, #24]
 8002ec4:	6929      	ldr	r1, [r5, #16]
 8002ec6:	430b      	orrs	r3, r1
 8002ec8:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002ed0:	2000      	movs	r0, #0
 8002ed2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002ed6:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ed8:	6800      	ldr	r0, [r0, #0]
 8002eda:	f7ff ff8f 	bl	8002dfc <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ede:	6822      	ldr	r2, [r4, #0]
 8002ee0:	6993      	ldr	r3, [r2, #24]
 8002ee2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ee6:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ee8:	6822      	ldr	r2, [r4, #0]
 8002eea:	6993      	ldr	r3, [r2, #24]
 8002eec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ef0:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ef2:	6822      	ldr	r2, [r4, #0]
 8002ef4:	6993      	ldr	r3, [r2, #24]
 8002ef6:	6929      	ldr	r1, [r5, #16]
 8002ef8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002efc:	6193      	str	r3, [r2, #24]
      break;
 8002efe:	e7e4      	b.n	8002eca <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f00:	6800      	ldr	r0, [r0, #0]
 8002f02:	f7ff fe25 	bl	8002b50 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f06:	6822      	ldr	r2, [r4, #0]
 8002f08:	69d3      	ldr	r3, [r2, #28]
 8002f0a:	f043 0308 	orr.w	r3, r3, #8
 8002f0e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f10:	6822      	ldr	r2, [r4, #0]
 8002f12:	69d3      	ldr	r3, [r2, #28]
 8002f14:	f023 0304 	bic.w	r3, r3, #4
 8002f18:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f1a:	6822      	ldr	r2, [r4, #0]
 8002f1c:	69d3      	ldr	r3, [r2, #28]
 8002f1e:	6929      	ldr	r1, [r5, #16]
 8002f20:	430b      	orrs	r3, r1
 8002f22:	61d3      	str	r3, [r2, #28]
      break;
 8002f24:	e7d1      	b.n	8002eca <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f26:	6800      	ldr	r0, [r0, #0]
 8002f28:	f7ff fe4a 	bl	8002bc0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f2c:	6822      	ldr	r2, [r4, #0]
 8002f2e:	69d3      	ldr	r3, [r2, #28]
 8002f30:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f34:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f36:	6822      	ldr	r2, [r4, #0]
 8002f38:	69d3      	ldr	r3, [r2, #28]
 8002f3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f3e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f40:	6822      	ldr	r2, [r4, #0]
 8002f42:	69d3      	ldr	r3, [r2, #28]
 8002f44:	6929      	ldr	r1, [r5, #16]
 8002f46:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002f4a:	61d3      	str	r3, [r2, #28]
      break;
 8002f4c:	e7bd      	b.n	8002eca <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002f4e:	6800      	ldr	r0, [r0, #0]
 8002f50:	f7ff fe60 	bl	8002c14 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002f54:	6822      	ldr	r2, [r4, #0]
 8002f56:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002f58:	f043 0308 	orr.w	r3, r3, #8
 8002f5c:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002f5e:	6822      	ldr	r2, [r4, #0]
 8002f60:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002f62:	f023 0304 	bic.w	r3, r3, #4
 8002f66:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002f68:	6822      	ldr	r2, [r4, #0]
 8002f6a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002f6c:	6929      	ldr	r1, [r5, #16]
 8002f6e:	430b      	orrs	r3, r1
 8002f70:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 8002f72:	e7aa      	b.n	8002eca <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002f74:	6800      	ldr	r0, [r0, #0]
 8002f76:	f7ff fe77 	bl	8002c68 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002f7a:	6822      	ldr	r2, [r4, #0]
 8002f7c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002f7e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f82:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002f84:	6822      	ldr	r2, [r4, #0]
 8002f86:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002f88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f8c:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002f8e:	6822      	ldr	r2, [r4, #0]
 8002f90:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002f92:	6929      	ldr	r1, [r5, #16]
 8002f94:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002f98:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 8002f9a:	e796      	b.n	8002eca <HAL_TIM_PWM_ConfigChannel+0x5e>
  __HAL_LOCK(htim);
 8002f9c:	2002      	movs	r0, #2
 8002f9e:	e79a      	b.n	8002ed6 <HAL_TIM_PWM_ConfigChannel+0x6a>

08002fa0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002fa0:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002fa2:	f001 011f 	and.w	r1, r1, #31
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002fac:	6a03      	ldr	r3, [r0, #32]
 8002fae:	ea23 0304 	bic.w	r3, r3, r4
 8002fb2:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002fb4:	6a03      	ldr	r3, [r0, #32]
 8002fb6:	408a      	lsls	r2, r1
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	6203      	str	r3, [r0, #32]
}
 8002fbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002fc0:	4770      	bx	lr
	...

08002fc4 <HAL_TIM_PWM_Start>:
{
 8002fc4:	b510      	push	{r4, lr}
 8002fc6:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002fc8:	2201      	movs	r2, #1
 8002fca:	6800      	ldr	r0, [r0, #0]
 8002fcc:	f7ff ffe8 	bl	8002fa0 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002fd0:	6823      	ldr	r3, [r4, #0]
 8002fd2:	490c      	ldr	r1, [pc, #48]	; (8003004 <HAL_TIM_PWM_Start+0x40>)
 8002fd4:	4a0c      	ldr	r2, [pc, #48]	; (8003008 <HAL_TIM_PWM_Start+0x44>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	bf18      	it	ne
 8002fda:	428b      	cmpne	r3, r1
 8002fdc:	d103      	bne.n	8002fe6 <HAL_TIM_PWM_Start+0x22>
    __HAL_TIM_MOE_ENABLE(htim);
 8002fde:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fe0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fe4:	645a      	str	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fe6:	6822      	ldr	r2, [r4, #0]
 8002fe8:	6891      	ldr	r1, [r2, #8]
 8002fea:	4b08      	ldr	r3, [pc, #32]	; (800300c <HAL_TIM_PWM_Start+0x48>)
 8002fec:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fee:	2b06      	cmp	r3, #6
 8002ff0:	bf18      	it	ne
 8002ff2:	f5b3 3f80 	cmpne.w	r3, #65536	; 0x10000
 8002ff6:	d003      	beq.n	8003000 <HAL_TIM_PWM_Start+0x3c>
    __HAL_TIM_ENABLE(htim);
 8002ff8:	6813      	ldr	r3, [r2, #0]
 8002ffa:	f043 0301 	orr.w	r3, r3, #1
 8002ffe:	6013      	str	r3, [r2, #0]
}
 8003000:	2000      	movs	r0, #0
 8003002:	bd10      	pop	{r4, pc}
 8003004:	40010000 	.word	0x40010000
 8003008:	40010400 	.word	0x40010400
 800300c:	00010007 	.word	0x00010007

08003010 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003010:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003014:	2b01      	cmp	r3, #1
 8003016:	d045      	beq.n	80030a4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
{
 8003018:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 800301a:	2301      	movs	r3, #1
 800301c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003020:	2302      	movs	r3, #2
 8003022:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003026:	6803      	ldr	r3, [r0, #0]
 8003028:	685a      	ldr	r2, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800302a:	689d      	ldr	r5, [r3, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800302c:	4e1e      	ldr	r6, [pc, #120]	; (80030a8 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 800302e:	4c1f      	ldr	r4, [pc, #124]	; (80030ac <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8003030:	42a3      	cmp	r3, r4
 8003032:	bf18      	it	ne
 8003034:	42b3      	cmpne	r3, r6
 8003036:	d103      	bne.n	8003040 <HAL_TIMEx_MasterConfigSynchronization+0x30>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003038:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800303c:	684c      	ldr	r4, [r1, #4]
 800303e:	4322      	orrs	r2, r4
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003040:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003044:	680c      	ldr	r4, [r1, #0]
 8003046:	4322      	orrs	r2, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003048:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800304a:	6803      	ldr	r3, [r0, #0]
 800304c:	4a16      	ldr	r2, [pc, #88]	; (80030a8 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 800304e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003052:	bf18      	it	ne
 8003054:	4293      	cmpne	r3, r2
 8003056:	d017      	beq.n	8003088 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8003058:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800305c:	4293      	cmp	r3, r2
 800305e:	d013      	beq.n	8003088 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8003060:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003064:	4293      	cmp	r3, r2
 8003066:	d00f      	beq.n	8003088 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8003068:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800306c:	4293      	cmp	r3, r2
 800306e:	d00b      	beq.n	8003088 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8003070:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003074:	4293      	cmp	r3, r2
 8003076:	d007      	beq.n	8003088 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8003078:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800307c:	4293      	cmp	r3, r2
 800307e:	d003      	beq.n	8003088 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8003080:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003084:	4293      	cmp	r3, r2
 8003086:	d104      	bne.n	8003092 <HAL_TIMEx_MasterConfigSynchronization+0x82>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003088:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800308c:	688a      	ldr	r2, [r1, #8]
 800308e:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003090:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003092:	2301      	movs	r3, #1
 8003094:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003098:	2300      	movs	r3, #0
 800309a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 800309e:	4618      	mov	r0, r3
}
 80030a0:	bc70      	pop	{r4, r5, r6}
 80030a2:	4770      	bx	lr
  __HAL_LOCK(htim);
 80030a4:	2002      	movs	r0, #2
}
 80030a6:	4770      	bx	lr
 80030a8:	40010000 	.word	0x40010000
 80030ac:	40010400 	.word	0x40010400

080030b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80030b0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d03c      	beq.n	8003132 <HAL_TIMEx_ConfigBreakDeadTime+0x82>
{
 80030b8:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 80030ba:	2301      	movs	r3, #1
 80030bc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80030c0:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80030c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030c6:	688a      	ldr	r2, [r1, #8]
 80030c8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80030ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030ce:	684a      	ldr	r2, [r1, #4]
 80030d0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80030d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030d6:	680a      	ldr	r2, [r1, #0]
 80030d8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80030da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80030de:	690a      	ldr	r2, [r1, #16]
 80030e0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80030e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80030e6:	694a      	ldr	r2, [r1, #20]
 80030e8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80030ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030ee:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80030f0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80030f2:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80030f6:	698a      	ldr	r2, [r1, #24]
 80030f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80030fc:	6802      	ldr	r2, [r0, #0]
 80030fe:	4d0e      	ldr	r5, [pc, #56]	; (8003138 <HAL_TIMEx_ConfigBreakDeadTime+0x88>)
 8003100:	4c0e      	ldr	r4, [pc, #56]	; (800313c <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 8003102:	42a2      	cmp	r2, r4
 8003104:	bf18      	it	ne
 8003106:	42aa      	cmpne	r2, r5
 8003108:	d10c      	bne.n	8003124 <HAL_TIMEx_ConfigBreakDeadTime+0x74>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800310a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800310e:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8003110:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003114:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003118:	69cc      	ldr	r4, [r1, #28]
 800311a:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800311c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003120:	6a09      	ldr	r1, [r1, #32]
 8003122:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003124:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003126:	2300      	movs	r3, #0
 8003128:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 800312c:	4618      	mov	r0, r3
}
 800312e:	bc30      	pop	{r4, r5}
 8003130:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003132:	2002      	movs	r0, #2
}
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	40010000 	.word	0x40010000
 800313c:	40010400 	.word	0x40010400

08003140 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003140:	b510      	push	{r4, lr}
 8003142:	4604      	mov	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003144:	6883      	ldr	r3, [r0, #8]
 8003146:	6902      	ldr	r2, [r0, #16]
 8003148:	4313      	orrs	r3, r2
 800314a:	6942      	ldr	r2, [r0, #20]
 800314c:	4313      	orrs	r3, r2
 800314e:	69c2      	ldr	r2, [r0, #28]
 8003150:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003152:	6801      	ldr	r1, [r0, #0]
 8003154:	6808      	ldr	r0, [r1, #0]
 8003156:	4a99      	ldr	r2, [pc, #612]	; (80033bc <UART_SetConfig+0x27c>)
 8003158:	4002      	ands	r2, r0
 800315a:	4313      	orrs	r3, r2
 800315c:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800315e:	6822      	ldr	r2, [r4, #0]
 8003160:	6853      	ldr	r3, [r2, #4]
 8003162:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003166:	68e1      	ldr	r1, [r4, #12]
 8003168:	430b      	orrs	r3, r1
 800316a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800316c:	69a2      	ldr	r2, [r4, #24]

  tmpreg |= huart->Init.OneBitSampling;
 800316e:	6a23      	ldr	r3, [r4, #32]
 8003170:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003172:	6821      	ldr	r1, [r4, #0]
 8003174:	688b      	ldr	r3, [r1, #8]
 8003176:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800317a:	4313      	orrs	r3, r2
 800317c:	608b      	str	r3, [r1, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800317e:	6823      	ldr	r3, [r4, #0]
 8003180:	4a8f      	ldr	r2, [pc, #572]	; (80033c0 <UART_SetConfig+0x280>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d018      	beq.n	80031b8 <UART_SetConfig+0x78>
 8003186:	4a8f      	ldr	r2, [pc, #572]	; (80033c4 <UART_SetConfig+0x284>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d028      	beq.n	80031de <UART_SetConfig+0x9e>
 800318c:	4a8e      	ldr	r2, [pc, #568]	; (80033c8 <UART_SetConfig+0x288>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d03d      	beq.n	800320e <UART_SetConfig+0xce>
 8003192:	4a8e      	ldr	r2, [pc, #568]	; (80033cc <UART_SetConfig+0x28c>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d050      	beq.n	800323a <UART_SetConfig+0xfa>
 8003198:	4a8d      	ldr	r2, [pc, #564]	; (80033d0 <UART_SetConfig+0x290>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d062      	beq.n	8003264 <UART_SetConfig+0x124>
 800319e:	4a8d      	ldr	r2, [pc, #564]	; (80033d4 <UART_SetConfig+0x294>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d077      	beq.n	8003294 <UART_SetConfig+0x154>
 80031a4:	4a8c      	ldr	r2, [pc, #560]	; (80033d8 <UART_SetConfig+0x298>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	f000 808c 	beq.w	80032c4 <UART_SetConfig+0x184>
 80031ac:	4a8b      	ldr	r2, [pc, #556]	; (80033dc <UART_SetConfig+0x29c>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	f000 80a0 	beq.w	80032f4 <UART_SetConfig+0x1b4>
 80031b4:	2310      	movs	r3, #16
 80031b6:	e0b6      	b.n	8003326 <UART_SetConfig+0x1e6>
 80031b8:	4b89      	ldr	r3, [pc, #548]	; (80033e0 <UART_SetConfig+0x2a0>)
 80031ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031be:	f003 0303 	and.w	r3, r3, #3
 80031c2:	2b03      	cmp	r3, #3
 80031c4:	d809      	bhi.n	80031da <UART_SetConfig+0x9a>
 80031c6:	e8df f003 	tbb	[pc, r3]
 80031ca:	0402      	.short	0x0402
 80031cc:	06ad      	.short	0x06ad
 80031ce:	2301      	movs	r3, #1
 80031d0:	e0a9      	b.n	8003326 <UART_SetConfig+0x1e6>
 80031d2:	2304      	movs	r3, #4
 80031d4:	e0a7      	b.n	8003326 <UART_SetConfig+0x1e6>
 80031d6:	2308      	movs	r3, #8
 80031d8:	e0a5      	b.n	8003326 <UART_SetConfig+0x1e6>
 80031da:	2310      	movs	r3, #16
 80031dc:	e0a3      	b.n	8003326 <UART_SetConfig+0x1e6>
 80031de:	4b80      	ldr	r3, [pc, #512]	; (80033e0 <UART_SetConfig+0x2a0>)
 80031e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e4:	f003 030c 	and.w	r3, r3, #12
 80031e8:	2b0c      	cmp	r3, #12
 80031ea:	d80e      	bhi.n	800320a <UART_SetConfig+0xca>
 80031ec:	e8df f003 	tbb	[pc, r3]
 80031f0:	0d0d0d07 	.word	0x0d0d0d07
 80031f4:	0d0d0d09 	.word	0x0d0d0d09
 80031f8:	0d0d0da9 	.word	0x0d0d0da9
 80031fc:	0b          	.byte	0x0b
 80031fd:	00          	.byte	0x00
 80031fe:	2300      	movs	r3, #0
 8003200:	e091      	b.n	8003326 <UART_SetConfig+0x1e6>
 8003202:	2304      	movs	r3, #4
 8003204:	e08f      	b.n	8003326 <UART_SetConfig+0x1e6>
 8003206:	2308      	movs	r3, #8
 8003208:	e08d      	b.n	8003326 <UART_SetConfig+0x1e6>
 800320a:	2310      	movs	r3, #16
 800320c:	e08b      	b.n	8003326 <UART_SetConfig+0x1e6>
 800320e:	4b74      	ldr	r3, [pc, #464]	; (80033e0 <UART_SetConfig+0x2a0>)
 8003210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003214:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003218:	2b10      	cmp	r3, #16
 800321a:	d00a      	beq.n	8003232 <UART_SetConfig+0xf2>
 800321c:	d906      	bls.n	800322c <UART_SetConfig+0xec>
 800321e:	2b20      	cmp	r3, #32
 8003220:	f000 8091 	beq.w	8003346 <UART_SetConfig+0x206>
 8003224:	2b30      	cmp	r3, #48	; 0x30
 8003226:	d106      	bne.n	8003236 <UART_SetConfig+0xf6>
 8003228:	2308      	movs	r3, #8
 800322a:	e07c      	b.n	8003326 <UART_SetConfig+0x1e6>
 800322c:	b91b      	cbnz	r3, 8003236 <UART_SetConfig+0xf6>
 800322e:	2300      	movs	r3, #0
 8003230:	e079      	b.n	8003326 <UART_SetConfig+0x1e6>
 8003232:	2304      	movs	r3, #4
 8003234:	e077      	b.n	8003326 <UART_SetConfig+0x1e6>
 8003236:	2310      	movs	r3, #16
 8003238:	e075      	b.n	8003326 <UART_SetConfig+0x1e6>
 800323a:	4b69      	ldr	r3, [pc, #420]	; (80033e0 <UART_SetConfig+0x2a0>)
 800323c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003240:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003244:	2b40      	cmp	r3, #64	; 0x40
 8003246:	d009      	beq.n	800325c <UART_SetConfig+0x11c>
 8003248:	d905      	bls.n	8003256 <UART_SetConfig+0x116>
 800324a:	2b80      	cmp	r3, #128	; 0x80
 800324c:	d07d      	beq.n	800334a <UART_SetConfig+0x20a>
 800324e:	2bc0      	cmp	r3, #192	; 0xc0
 8003250:	d106      	bne.n	8003260 <UART_SetConfig+0x120>
 8003252:	2308      	movs	r3, #8
 8003254:	e067      	b.n	8003326 <UART_SetConfig+0x1e6>
 8003256:	b91b      	cbnz	r3, 8003260 <UART_SetConfig+0x120>
 8003258:	2300      	movs	r3, #0
 800325a:	e064      	b.n	8003326 <UART_SetConfig+0x1e6>
 800325c:	2304      	movs	r3, #4
 800325e:	e062      	b.n	8003326 <UART_SetConfig+0x1e6>
 8003260:	2310      	movs	r3, #16
 8003262:	e060      	b.n	8003326 <UART_SetConfig+0x1e6>
 8003264:	4b5e      	ldr	r3, [pc, #376]	; (80033e0 <UART_SetConfig+0x2a0>)
 8003266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800326a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800326e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003272:	d00b      	beq.n	800328c <UART_SetConfig+0x14c>
 8003274:	d907      	bls.n	8003286 <UART_SetConfig+0x146>
 8003276:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800327a:	d068      	beq.n	800334e <UART_SetConfig+0x20e>
 800327c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003280:	d106      	bne.n	8003290 <UART_SetConfig+0x150>
 8003282:	2308      	movs	r3, #8
 8003284:	e04f      	b.n	8003326 <UART_SetConfig+0x1e6>
 8003286:	b91b      	cbnz	r3, 8003290 <UART_SetConfig+0x150>
 8003288:	2300      	movs	r3, #0
 800328a:	e04c      	b.n	8003326 <UART_SetConfig+0x1e6>
 800328c:	2304      	movs	r3, #4
 800328e:	e04a      	b.n	8003326 <UART_SetConfig+0x1e6>
 8003290:	2310      	movs	r3, #16
 8003292:	e048      	b.n	8003326 <UART_SetConfig+0x1e6>
 8003294:	4b52      	ldr	r3, [pc, #328]	; (80033e0 <UART_SetConfig+0x2a0>)
 8003296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800329a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800329e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032a2:	d00b      	beq.n	80032bc <UART_SetConfig+0x17c>
 80032a4:	d907      	bls.n	80032b6 <UART_SetConfig+0x176>
 80032a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032aa:	d052      	beq.n	8003352 <UART_SetConfig+0x212>
 80032ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80032b0:	d106      	bne.n	80032c0 <UART_SetConfig+0x180>
 80032b2:	2308      	movs	r3, #8
 80032b4:	e037      	b.n	8003326 <UART_SetConfig+0x1e6>
 80032b6:	b91b      	cbnz	r3, 80032c0 <UART_SetConfig+0x180>
 80032b8:	2301      	movs	r3, #1
 80032ba:	e034      	b.n	8003326 <UART_SetConfig+0x1e6>
 80032bc:	2304      	movs	r3, #4
 80032be:	e032      	b.n	8003326 <UART_SetConfig+0x1e6>
 80032c0:	2310      	movs	r3, #16
 80032c2:	e030      	b.n	8003326 <UART_SetConfig+0x1e6>
 80032c4:	4b46      	ldr	r3, [pc, #280]	; (80033e0 <UART_SetConfig+0x2a0>)
 80032c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ca:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80032ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032d2:	d00b      	beq.n	80032ec <UART_SetConfig+0x1ac>
 80032d4:	d907      	bls.n	80032e6 <UART_SetConfig+0x1a6>
 80032d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032da:	d03c      	beq.n	8003356 <UART_SetConfig+0x216>
 80032dc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80032e0:	d106      	bne.n	80032f0 <UART_SetConfig+0x1b0>
 80032e2:	2308      	movs	r3, #8
 80032e4:	e01f      	b.n	8003326 <UART_SetConfig+0x1e6>
 80032e6:	b91b      	cbnz	r3, 80032f0 <UART_SetConfig+0x1b0>
 80032e8:	2300      	movs	r3, #0
 80032ea:	e01c      	b.n	8003326 <UART_SetConfig+0x1e6>
 80032ec:	2304      	movs	r3, #4
 80032ee:	e01a      	b.n	8003326 <UART_SetConfig+0x1e6>
 80032f0:	2310      	movs	r3, #16
 80032f2:	e018      	b.n	8003326 <UART_SetConfig+0x1e6>
 80032f4:	4b3a      	ldr	r3, [pc, #232]	; (80033e0 <UART_SetConfig+0x2a0>)
 80032f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032fa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80032fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003302:	d00b      	beq.n	800331c <UART_SetConfig+0x1dc>
 8003304:	d907      	bls.n	8003316 <UART_SetConfig+0x1d6>
 8003306:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800330a:	d026      	beq.n	800335a <UART_SetConfig+0x21a>
 800330c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003310:	d106      	bne.n	8003320 <UART_SetConfig+0x1e0>
 8003312:	2308      	movs	r3, #8
 8003314:	e007      	b.n	8003326 <UART_SetConfig+0x1e6>
 8003316:	b91b      	cbnz	r3, 8003320 <UART_SetConfig+0x1e0>
 8003318:	2300      	movs	r3, #0
 800331a:	e004      	b.n	8003326 <UART_SetConfig+0x1e6>
 800331c:	2304      	movs	r3, #4
 800331e:	e002      	b.n	8003326 <UART_SetConfig+0x1e6>
 8003320:	2310      	movs	r3, #16
 8003322:	e000      	b.n	8003326 <UART_SetConfig+0x1e6>
 8003324:	2302      	movs	r3, #2

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003326:	69e2      	ldr	r2, [r4, #28]
 8003328:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800332c:	d017      	beq.n	800335e <UART_SetConfig+0x21e>
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 800332e:	2b08      	cmp	r3, #8
 8003330:	f200 80b3 	bhi.w	800349a <UART_SetConfig+0x35a>
 8003334:	e8df f003 	tbb	[pc, r3]
 8003338:	b1958b76 	.word	0xb1958b76
 800333c:	b1b1b19e 	.word	0xb1b1b19e
 8003340:	a8          	.byte	0xa8
 8003341:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003342:	2302      	movs	r3, #2
 8003344:	e7ef      	b.n	8003326 <UART_SetConfig+0x1e6>
 8003346:	2302      	movs	r3, #2
 8003348:	e7ed      	b.n	8003326 <UART_SetConfig+0x1e6>
 800334a:	2302      	movs	r3, #2
 800334c:	e7eb      	b.n	8003326 <UART_SetConfig+0x1e6>
 800334e:	2302      	movs	r3, #2
 8003350:	e7e9      	b.n	8003326 <UART_SetConfig+0x1e6>
 8003352:	2302      	movs	r3, #2
 8003354:	e7e7      	b.n	8003326 <UART_SetConfig+0x1e6>
 8003356:	2302      	movs	r3, #2
 8003358:	e7e5      	b.n	8003326 <UART_SetConfig+0x1e6>
 800335a:	2302      	movs	r3, #2
 800335c:	e7e3      	b.n	8003326 <UART_SetConfig+0x1e6>
    switch (clocksource)
 800335e:	2b08      	cmp	r3, #8
 8003360:	d85d      	bhi.n	800341e <UART_SetConfig+0x2de>
 8003362:	e8df f003 	tbb	[pc, r3]
 8003366:	1f05      	.short	0x1f05
 8003368:	5c485c3f 	.word	0x5c485c3f
 800336c:	5c5c      	.short	0x5c5c
 800336e:	53          	.byte	0x53
 800336f:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 8003370:	f7ff f8c8 	bl	8002504 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003374:	6862      	ldr	r2, [r4, #4]
 8003376:	0853      	lsrs	r3, r2, #1
 8003378:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800337c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003380:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003382:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003384:	f1a3 0110 	sub.w	r1, r3, #16
 8003388:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800338c:	4291      	cmp	r1, r2
 800338e:	f200 8087 	bhi.w	80034a0 <UART_SetConfig+0x360>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003392:	b29a      	uxth	r2, r3
 8003394:	f022 020f 	bic.w	r2, r2, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003398:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800339c:	4313      	orrs	r3, r2
      huart->Instance->BRR = brrtemp;
 800339e:	6822      	ldr	r2, [r4, #0]
 80033a0:	60d3      	str	r3, [r2, #12]
 80033a2:	e050      	b.n	8003446 <UART_SetConfig+0x306>
        pclk = HAL_RCC_GetPCLK2Freq();
 80033a4:	f7ff f8be 	bl	8002524 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80033a8:	6862      	ldr	r2, [r4, #4]
 80033aa:	0853      	lsrs	r3, r2, #1
 80033ac:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80033b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80033b4:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80033b6:	2000      	movs	r0, #0
        break;
 80033b8:	e7e4      	b.n	8003384 <UART_SetConfig+0x244>
 80033ba:	bf00      	nop
 80033bc:	efff69f3 	.word	0xefff69f3
 80033c0:	40011000 	.word	0x40011000
 80033c4:	40004400 	.word	0x40004400
 80033c8:	40004800 	.word	0x40004800
 80033cc:	40004c00 	.word	0x40004c00
 80033d0:	40005000 	.word	0x40005000
 80033d4:	40011400 	.word	0x40011400
 80033d8:	40007800 	.word	0x40007800
 80033dc:	40007c00 	.word	0x40007c00
 80033e0:	40023800 	.word	0x40023800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80033e4:	6862      	ldr	r2, [r4, #4]
 80033e6:	4b30      	ldr	r3, [pc, #192]	; (80034a8 <UART_SetConfig+0x368>)
 80033e8:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80033ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80033f0:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80033f2:	2000      	movs	r0, #0
        break;
 80033f4:	e7c6      	b.n	8003384 <UART_SetConfig+0x244>
        pclk = HAL_RCC_GetSysClockFreq();
 80033f6:	f7fe ff77 	bl	80022e8 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80033fa:	6862      	ldr	r2, [r4, #4]
 80033fc:	0853      	lsrs	r3, r2, #1
 80033fe:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8003402:	fbb3 f3f2 	udiv	r3, r3, r2
 8003406:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003408:	2000      	movs	r0, #0
        break;
 800340a:	e7bb      	b.n	8003384 <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800340c:	6862      	ldr	r2, [r4, #4]
 800340e:	0853      	lsrs	r3, r2, #1
 8003410:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003414:	fbb3 f3f2 	udiv	r3, r3, r2
 8003418:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800341a:	2000      	movs	r0, #0
        break;
 800341c:	e7b2      	b.n	8003384 <UART_SetConfig+0x244>
        ret = HAL_ERROR;
 800341e:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8003420:	2300      	movs	r3, #0
 8003422:	e7af      	b.n	8003384 <UART_SetConfig+0x244>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003424:	f7ff f86e 	bl	8002504 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003428:	6862      	ldr	r2, [r4, #4]
 800342a:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800342e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003432:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003434:	2000      	movs	r0, #0
        ret = HAL_ERROR;
        break;
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003436:	f1a3 0110 	sub.w	r1, r3, #16
 800343a:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800343e:	4291      	cmp	r1, r2
 8003440:	d830      	bhi.n	80034a4 <UART_SetConfig+0x364>
    {
      huart->Instance->BRR = usartdiv;
 8003442:	6822      	ldr	r2, [r4, #0]
 8003444:	60d3      	str	r3, [r2, #12]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003446:	2300      	movs	r3, #0
 8003448:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 800344a:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 800344c:	bd10      	pop	{r4, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 800344e:	f7ff f869 	bl	8002524 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003452:	6862      	ldr	r2, [r4, #4]
 8003454:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8003458:	fbb3 f3f2 	udiv	r3, r3, r2
 800345c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800345e:	2000      	movs	r0, #0
        break;
 8003460:	e7e9      	b.n	8003436 <UART_SetConfig+0x2f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003462:	6862      	ldr	r2, [r4, #4]
 8003464:	4b11      	ldr	r3, [pc, #68]	; (80034ac <UART_SetConfig+0x36c>)
 8003466:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800346a:	fbb3 f3f2 	udiv	r3, r3, r2
 800346e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003470:	2000      	movs	r0, #0
        break;
 8003472:	e7e0      	b.n	8003436 <UART_SetConfig+0x2f6>
        pclk = HAL_RCC_GetSysClockFreq();
 8003474:	f7fe ff38 	bl	80022e8 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003478:	6862      	ldr	r2, [r4, #4]
 800347a:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800347e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003482:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003484:	2000      	movs	r0, #0
        break;
 8003486:	e7d6      	b.n	8003436 <UART_SetConfig+0x2f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003488:	6862      	ldr	r2, [r4, #4]
 800348a:	0853      	lsrs	r3, r2, #1
 800348c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003490:	fbb3 f3f2 	udiv	r3, r3, r2
 8003494:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003496:	2000      	movs	r0, #0
        break;
 8003498:	e7cd      	b.n	8003436 <UART_SetConfig+0x2f6>
        ret = HAL_ERROR;
 800349a:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 800349c:	2300      	movs	r3, #0
 800349e:	e7ca      	b.n	8003436 <UART_SetConfig+0x2f6>
      ret = HAL_ERROR;
 80034a0:	2001      	movs	r0, #1
 80034a2:	e7d0      	b.n	8003446 <UART_SetConfig+0x306>
      ret = HAL_ERROR;
 80034a4:	2001      	movs	r0, #1
 80034a6:	e7ce      	b.n	8003446 <UART_SetConfig+0x306>
 80034a8:	01e84800 	.word	0x01e84800
 80034ac:	00f42400 	.word	0x00f42400

080034b0 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034b0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80034b2:	f013 0f01 	tst.w	r3, #1
 80034b6:	d006      	beq.n	80034c6 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034b8:	6802      	ldr	r2, [r0, #0]
 80034ba:	6853      	ldr	r3, [r2, #4]
 80034bc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80034c0:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80034c2:	430b      	orrs	r3, r1
 80034c4:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80034c6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80034c8:	f013 0f02 	tst.w	r3, #2
 80034cc:	d006      	beq.n	80034dc <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80034ce:	6802      	ldr	r2, [r0, #0]
 80034d0:	6853      	ldr	r3, [r2, #4]
 80034d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034d6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80034d8:	430b      	orrs	r3, r1
 80034da:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80034dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80034de:	f013 0f04 	tst.w	r3, #4
 80034e2:	d006      	beq.n	80034f2 <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034e4:	6802      	ldr	r2, [r0, #0]
 80034e6:	6853      	ldr	r3, [r2, #4]
 80034e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034ec:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80034ee:	430b      	orrs	r3, r1
 80034f0:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034f2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80034f4:	f013 0f08 	tst.w	r3, #8
 80034f8:	d006      	beq.n	8003508 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80034fa:	6802      	ldr	r2, [r0, #0]
 80034fc:	6853      	ldr	r3, [r2, #4]
 80034fe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003502:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8003504:	430b      	orrs	r3, r1
 8003506:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003508:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800350a:	f013 0f10 	tst.w	r3, #16
 800350e:	d006      	beq.n	800351e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003510:	6802      	ldr	r2, [r0, #0]
 8003512:	6893      	ldr	r3, [r2, #8]
 8003514:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003518:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800351a:	430b      	orrs	r3, r1
 800351c:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800351e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003520:	f013 0f20 	tst.w	r3, #32
 8003524:	d006      	beq.n	8003534 <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003526:	6802      	ldr	r2, [r0, #0]
 8003528:	6893      	ldr	r3, [r2, #8]
 800352a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800352e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8003530:	430b      	orrs	r3, r1
 8003532:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003534:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003536:	f013 0f40 	tst.w	r3, #64	; 0x40
 800353a:	d00a      	beq.n	8003552 <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800353c:	6802      	ldr	r2, [r0, #0]
 800353e:	6853      	ldr	r3, [r2, #4]
 8003540:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003544:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003546:	430b      	orrs	r3, r1
 8003548:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800354a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800354c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003550:	d00b      	beq.n	800356a <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003552:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003554:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003558:	d006      	beq.n	8003568 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800355a:	6802      	ldr	r2, [r0, #0]
 800355c:	6853      	ldr	r3, [r2, #4]
 800355e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003562:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003564:	430b      	orrs	r3, r1
 8003566:	6053      	str	r3, [r2, #4]
  }
}
 8003568:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800356a:	6802      	ldr	r2, [r0, #0]
 800356c:	6853      	ldr	r3, [r2, #4]
 800356e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003572:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8003574:	430b      	orrs	r3, r1
 8003576:	6053      	str	r3, [r2, #4]
 8003578:	e7eb      	b.n	8003552 <UART_AdvFeatureConfig+0xa2>

0800357a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800357a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800357e:	4604      	mov	r4, r0
 8003580:	460f      	mov	r7, r1
 8003582:	4616      	mov	r6, r2
 8003584:	4698      	mov	r8, r3
 8003586:	9d06      	ldr	r5, [sp, #24]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003588:	6823      	ldr	r3, [r4, #0]
 800358a:	69db      	ldr	r3, [r3, #28]
 800358c:	ea37 0303 	bics.w	r3, r7, r3
 8003590:	bf0c      	ite	eq
 8003592:	2301      	moveq	r3, #1
 8003594:	2300      	movne	r3, #0
 8003596:	42b3      	cmp	r3, r6
 8003598:	d13a      	bne.n	8003610 <UART_WaitOnFlagUntilTimeout+0x96>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800359a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800359e:	d0f3      	beq.n	8003588 <UART_WaitOnFlagUntilTimeout+0xe>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035a0:	f7fd fdb2 	bl	8001108 <HAL_GetTick>
 80035a4:	eba0 0008 	sub.w	r0, r0, r8
 80035a8:	42a8      	cmp	r0, r5
 80035aa:	d81f      	bhi.n	80035ec <UART_WaitOnFlagUntilTimeout+0x72>
 80035ac:	b1f5      	cbz	r5, 80035ec <UART_WaitOnFlagUntilTimeout+0x72>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80035ae:	6823      	ldr	r3, [r4, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	f012 0f04 	tst.w	r2, #4
 80035b6:	d0e7      	beq.n	8003588 <UART_WaitOnFlagUntilTimeout+0xe>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035b8:	69da      	ldr	r2, [r3, #28]
 80035ba:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80035be:	d0e3      	beq.n	8003588 <UART_WaitOnFlagUntilTimeout+0xe>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035c4:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035c6:	6822      	ldr	r2, [r4, #0]
 80035c8:	6813      	ldr	r3, [r2, #0]
 80035ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80035ce:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035d0:	6822      	ldr	r2, [r4, #0]
 80035d2:	6893      	ldr	r3, [r2, #8]
 80035d4:	f023 0301 	bic.w	r3, r3, #1
 80035d8:	6093      	str	r3, [r2, #8]

          huart->gState = HAL_UART_STATE_READY;
 80035da:	2320      	movs	r3, #32
 80035dc:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80035de:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035e0:	67e3      	str	r3, [r4, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035e2:	2300      	movs	r3, #0
 80035e4:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80035e8:	2003      	movs	r0, #3
 80035ea:	e012      	b.n	8003612 <UART_WaitOnFlagUntilTimeout+0x98>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035ec:	6822      	ldr	r2, [r4, #0]
 80035ee:	6813      	ldr	r3, [r2, #0]
 80035f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80035f4:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035f6:	6822      	ldr	r2, [r4, #0]
 80035f8:	6893      	ldr	r3, [r2, #8]
 80035fa:	f023 0301 	bic.w	r3, r3, #1
 80035fe:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 8003600:	2320      	movs	r3, #32
 8003602:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003604:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8003606:	2300      	movs	r3, #0
 8003608:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        return HAL_TIMEOUT;
 800360c:	2003      	movs	r0, #3
 800360e:	e000      	b.n	8003612 <UART_WaitOnFlagUntilTimeout+0x98>
        }
      }
    }
  }
  return HAL_OK;
 8003610:	2000      	movs	r0, #0
}
 8003612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003616 <UART_CheckIdleState>:
{
 8003616:	b510      	push	{r4, lr}
 8003618:	b082      	sub	sp, #8
 800361a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800361c:	2300      	movs	r3, #0
 800361e:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8003620:	f7fd fd72 	bl	8001108 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003624:	6822      	ldr	r2, [r4, #0]
 8003626:	6812      	ldr	r2, [r2, #0]
 8003628:	f012 0f08 	tst.w	r2, #8
 800362c:	d107      	bne.n	800363e <UART_CheckIdleState+0x28>
  huart->gState = HAL_UART_STATE_READY;
 800362e:	2320      	movs	r3, #32
 8003630:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003632:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8003634:	2000      	movs	r0, #0
 8003636:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 800363a:	b002      	add	sp, #8
 800363c:	bd10      	pop	{r4, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800363e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003642:	9300      	str	r3, [sp, #0]
 8003644:	4603      	mov	r3, r0
 8003646:	2200      	movs	r2, #0
 8003648:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800364c:	4620      	mov	r0, r4
 800364e:	f7ff ff94 	bl	800357a <UART_WaitOnFlagUntilTimeout>
 8003652:	2800      	cmp	r0, #0
 8003654:	d0eb      	beq.n	800362e <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8003656:	2003      	movs	r0, #3
 8003658:	e7ef      	b.n	800363a <UART_CheckIdleState+0x24>

0800365a <HAL_UART_Init>:
  if (huart == NULL)
 800365a:	b368      	cbz	r0, 80036b8 <HAL_UART_Init+0x5e>
{
 800365c:	b510      	push	{r4, lr}
 800365e:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8003660:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8003662:	b303      	cbz	r3, 80036a6 <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8003664:	2324      	movs	r3, #36	; 0x24
 8003666:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8003668:	6822      	ldr	r2, [r4, #0]
 800366a:	6813      	ldr	r3, [r2, #0]
 800366c:	f023 0301 	bic.w	r3, r3, #1
 8003670:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003672:	4620      	mov	r0, r4
 8003674:	f7ff fd64 	bl	8003140 <UART_SetConfig>
 8003678:	2801      	cmp	r0, #1
 800367a:	d013      	beq.n	80036a4 <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800367c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800367e:	b9bb      	cbnz	r3, 80036b0 <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003680:	6822      	ldr	r2, [r4, #0]
 8003682:	6853      	ldr	r3, [r2, #4]
 8003684:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003688:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800368a:	6822      	ldr	r2, [r4, #0]
 800368c:	6893      	ldr	r3, [r2, #8]
 800368e:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8003692:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8003694:	6822      	ldr	r2, [r4, #0]
 8003696:	6813      	ldr	r3, [r2, #0]
 8003698:	f043 0301 	orr.w	r3, r3, #1
 800369c:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800369e:	4620      	mov	r0, r4
 80036a0:	f7ff ffb9 	bl	8003616 <UART_CheckIdleState>
}
 80036a4:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80036a6:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 80036aa:	f7fd fc6f 	bl	8000f8c <HAL_UART_MspInit>
 80036ae:	e7d9      	b.n	8003664 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 80036b0:	4620      	mov	r0, r4
 80036b2:	f7ff fefd 	bl	80034b0 <UART_AdvFeatureConfig>
 80036b6:	e7e3      	b.n	8003680 <HAL_UART_Init+0x26>
    return HAL_ERROR;
 80036b8:	2001      	movs	r0, #1
}
 80036ba:	4770      	bx	lr

080036bc <__libc_init_array>:
 80036bc:	b570      	push	{r4, r5, r6, lr}
 80036be:	4e0d      	ldr	r6, [pc, #52]	; (80036f4 <__libc_init_array+0x38>)
 80036c0:	4c0d      	ldr	r4, [pc, #52]	; (80036f8 <__libc_init_array+0x3c>)
 80036c2:	1ba4      	subs	r4, r4, r6
 80036c4:	10a4      	asrs	r4, r4, #2
 80036c6:	2500      	movs	r5, #0
 80036c8:	42a5      	cmp	r5, r4
 80036ca:	d109      	bne.n	80036e0 <__libc_init_array+0x24>
 80036cc:	4e0b      	ldr	r6, [pc, #44]	; (80036fc <__libc_init_array+0x40>)
 80036ce:	4c0c      	ldr	r4, [pc, #48]	; (8003700 <__libc_init_array+0x44>)
 80036d0:	f000 f820 	bl	8003714 <_init>
 80036d4:	1ba4      	subs	r4, r4, r6
 80036d6:	10a4      	asrs	r4, r4, #2
 80036d8:	2500      	movs	r5, #0
 80036da:	42a5      	cmp	r5, r4
 80036dc:	d105      	bne.n	80036ea <__libc_init_array+0x2e>
 80036de:	bd70      	pop	{r4, r5, r6, pc}
 80036e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80036e4:	4798      	blx	r3
 80036e6:	3501      	adds	r5, #1
 80036e8:	e7ee      	b.n	80036c8 <__libc_init_array+0xc>
 80036ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80036ee:	4798      	blx	r3
 80036f0:	3501      	adds	r5, #1
 80036f2:	e7f2      	b.n	80036da <__libc_init_array+0x1e>
 80036f4:	0800374c 	.word	0x0800374c
 80036f8:	0800374c 	.word	0x0800374c
 80036fc:	0800374c 	.word	0x0800374c
 8003700:	08003750 	.word	0x08003750

08003704 <memset>:
 8003704:	4402      	add	r2, r0
 8003706:	4603      	mov	r3, r0
 8003708:	4293      	cmp	r3, r2
 800370a:	d100      	bne.n	800370e <memset+0xa>
 800370c:	4770      	bx	lr
 800370e:	f803 1b01 	strb.w	r1, [r3], #1
 8003712:	e7f9      	b.n	8003708 <memset+0x4>

08003714 <_init>:
 8003714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003716:	bf00      	nop
 8003718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800371a:	bc08      	pop	{r3}
 800371c:	469e      	mov	lr, r3
 800371e:	4770      	bx	lr

08003720 <_fini>:
 8003720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003722:	bf00      	nop
 8003724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003726:	bc08      	pop	{r3}
 8003728:	469e      	mov	lr, r3
 800372a:	4770      	bx	lr
