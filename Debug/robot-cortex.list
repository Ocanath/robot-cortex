
robot-cortex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ce4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e0  08007ec8  08007ec8  00017ec8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081a8  080081a8  000203a8  2**0
                  CONTENTS
  4 .ARM          00000008  080081a8  080081a8  000181a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080081b0  080081b0  000203a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081b0  080081b0  000181b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080081b4  080081b4  000181b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003a8  20000000  080081b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  200003a8  08008560  000203a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005e8  08008560  000205e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000203a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019a6b  00000000  00000000  000203d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c4f  00000000  00000000  00039e43  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001078  00000000  00000000  0003ca98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fe0  00000000  00000000  0003db10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025285  00000000  00000000  0003eaf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e47c  00000000  00000000  00063d75  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e6b64  00000000  00000000  000721f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00158d55  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039a4  00000000  00000000  00158dd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000b8c2  00000000  00000000  0015c774  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200003a8 	.word	0x200003a8
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007eac 	.word	0x08007eac

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200003ac 	.word	0x200003ac
 800021c:	08007eac 	.word	0x08007eac

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b972 	b.w	8000fd4 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9e08      	ldr	r6, [sp, #32]
 8000d0e:	4604      	mov	r4, r0
 8000d10:	4688      	mov	r8, r1
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d14b      	bne.n	8000dae <__udivmoddi4+0xa6>
 8000d16:	428a      	cmp	r2, r1
 8000d18:	4615      	mov	r5, r2
 8000d1a:	d967      	bls.n	8000dec <__udivmoddi4+0xe4>
 8000d1c:	fab2 f282 	clz	r2, r2
 8000d20:	b14a      	cbz	r2, 8000d36 <__udivmoddi4+0x2e>
 8000d22:	f1c2 0720 	rsb	r7, r2, #32
 8000d26:	fa01 f302 	lsl.w	r3, r1, r2
 8000d2a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d2e:	4095      	lsls	r5, r2
 8000d30:	ea47 0803 	orr.w	r8, r7, r3
 8000d34:	4094      	lsls	r4, r2
 8000d36:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d3a:	0c23      	lsrs	r3, r4, #16
 8000d3c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d40:	fa1f fc85 	uxth.w	ip, r5
 8000d44:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d48:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d4c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d50:	4299      	cmp	r1, r3
 8000d52:	d909      	bls.n	8000d68 <__udivmoddi4+0x60>
 8000d54:	18eb      	adds	r3, r5, r3
 8000d56:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d5a:	f080 811b 	bcs.w	8000f94 <__udivmoddi4+0x28c>
 8000d5e:	4299      	cmp	r1, r3
 8000d60:	f240 8118 	bls.w	8000f94 <__udivmoddi4+0x28c>
 8000d64:	3f02      	subs	r7, #2
 8000d66:	442b      	add	r3, r5
 8000d68:	1a5b      	subs	r3, r3, r1
 8000d6a:	b2a4      	uxth	r4, r4
 8000d6c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d70:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d78:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d7c:	45a4      	cmp	ip, r4
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x8c>
 8000d80:	192c      	adds	r4, r5, r4
 8000d82:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d86:	f080 8107 	bcs.w	8000f98 <__udivmoddi4+0x290>
 8000d8a:	45a4      	cmp	ip, r4
 8000d8c:	f240 8104 	bls.w	8000f98 <__udivmoddi4+0x290>
 8000d90:	3802      	subs	r0, #2
 8000d92:	442c      	add	r4, r5
 8000d94:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d98:	eba4 040c 	sub.w	r4, r4, ip
 8000d9c:	2700      	movs	r7, #0
 8000d9e:	b11e      	cbz	r6, 8000da8 <__udivmoddi4+0xa0>
 8000da0:	40d4      	lsrs	r4, r2
 8000da2:	2300      	movs	r3, #0
 8000da4:	e9c6 4300 	strd	r4, r3, [r6]
 8000da8:	4639      	mov	r1, r7
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d909      	bls.n	8000dc6 <__udivmoddi4+0xbe>
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	f000 80eb 	beq.w	8000f8e <__udivmoddi4+0x286>
 8000db8:	2700      	movs	r7, #0
 8000dba:	e9c6 0100 	strd	r0, r1, [r6]
 8000dbe:	4638      	mov	r0, r7
 8000dc0:	4639      	mov	r1, r7
 8000dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc6:	fab3 f783 	clz	r7, r3
 8000dca:	2f00      	cmp	r7, #0
 8000dcc:	d147      	bne.n	8000e5e <__udivmoddi4+0x156>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d302      	bcc.n	8000dd8 <__udivmoddi4+0xd0>
 8000dd2:	4282      	cmp	r2, r0
 8000dd4:	f200 80fa 	bhi.w	8000fcc <__udivmoddi4+0x2c4>
 8000dd8:	1a84      	subs	r4, r0, r2
 8000dda:	eb61 0303 	sbc.w	r3, r1, r3
 8000dde:	2001      	movs	r0, #1
 8000de0:	4698      	mov	r8, r3
 8000de2:	2e00      	cmp	r6, #0
 8000de4:	d0e0      	beq.n	8000da8 <__udivmoddi4+0xa0>
 8000de6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dea:	e7dd      	b.n	8000da8 <__udivmoddi4+0xa0>
 8000dec:	b902      	cbnz	r2, 8000df0 <__udivmoddi4+0xe8>
 8000dee:	deff      	udf	#255	; 0xff
 8000df0:	fab2 f282 	clz	r2, r2
 8000df4:	2a00      	cmp	r2, #0
 8000df6:	f040 808f 	bne.w	8000f18 <__udivmoddi4+0x210>
 8000dfa:	1b49      	subs	r1, r1, r5
 8000dfc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e00:	fa1f f885 	uxth.w	r8, r5
 8000e04:	2701      	movs	r7, #1
 8000e06:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e0a:	0c23      	lsrs	r3, r4, #16
 8000e0c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e10:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e14:	fb08 f10c 	mul.w	r1, r8, ip
 8000e18:	4299      	cmp	r1, r3
 8000e1a:	d907      	bls.n	8000e2c <__udivmoddi4+0x124>
 8000e1c:	18eb      	adds	r3, r5, r3
 8000e1e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e22:	d202      	bcs.n	8000e2a <__udivmoddi4+0x122>
 8000e24:	4299      	cmp	r1, r3
 8000e26:	f200 80cd 	bhi.w	8000fc4 <__udivmoddi4+0x2bc>
 8000e2a:	4684      	mov	ip, r0
 8000e2c:	1a59      	subs	r1, r3, r1
 8000e2e:	b2a3      	uxth	r3, r4
 8000e30:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e34:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e38:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e3c:	fb08 f800 	mul.w	r8, r8, r0
 8000e40:	45a0      	cmp	r8, r4
 8000e42:	d907      	bls.n	8000e54 <__udivmoddi4+0x14c>
 8000e44:	192c      	adds	r4, r5, r4
 8000e46:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e4a:	d202      	bcs.n	8000e52 <__udivmoddi4+0x14a>
 8000e4c:	45a0      	cmp	r8, r4
 8000e4e:	f200 80b6 	bhi.w	8000fbe <__udivmoddi4+0x2b6>
 8000e52:	4618      	mov	r0, r3
 8000e54:	eba4 0408 	sub.w	r4, r4, r8
 8000e58:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e5c:	e79f      	b.n	8000d9e <__udivmoddi4+0x96>
 8000e5e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e62:	40bb      	lsls	r3, r7
 8000e64:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e68:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e6c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e70:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e74:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e78:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e7c:	4325      	orrs	r5, r4
 8000e7e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e82:	0c2c      	lsrs	r4, r5, #16
 8000e84:	fb08 3319 	mls	r3, r8, r9, r3
 8000e88:	fa1f fa8e 	uxth.w	sl, lr
 8000e8c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e90:	fb09 f40a 	mul.w	r4, r9, sl
 8000e94:	429c      	cmp	r4, r3
 8000e96:	fa02 f207 	lsl.w	r2, r2, r7
 8000e9a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e9e:	d90b      	bls.n	8000eb8 <__udivmoddi4+0x1b0>
 8000ea0:	eb1e 0303 	adds.w	r3, lr, r3
 8000ea4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ea8:	f080 8087 	bcs.w	8000fba <__udivmoddi4+0x2b2>
 8000eac:	429c      	cmp	r4, r3
 8000eae:	f240 8084 	bls.w	8000fba <__udivmoddi4+0x2b2>
 8000eb2:	f1a9 0902 	sub.w	r9, r9, #2
 8000eb6:	4473      	add	r3, lr
 8000eb8:	1b1b      	subs	r3, r3, r4
 8000eba:	b2ad      	uxth	r5, r5
 8000ebc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ec0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ec4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ec8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ecc:	45a2      	cmp	sl, r4
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x1da>
 8000ed0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ed4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ed8:	d26b      	bcs.n	8000fb2 <__udivmoddi4+0x2aa>
 8000eda:	45a2      	cmp	sl, r4
 8000edc:	d969      	bls.n	8000fb2 <__udivmoddi4+0x2aa>
 8000ede:	3802      	subs	r0, #2
 8000ee0:	4474      	add	r4, lr
 8000ee2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ee6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eea:	eba4 040a 	sub.w	r4, r4, sl
 8000eee:	454c      	cmp	r4, r9
 8000ef0:	46c2      	mov	sl, r8
 8000ef2:	464b      	mov	r3, r9
 8000ef4:	d354      	bcc.n	8000fa0 <__udivmoddi4+0x298>
 8000ef6:	d051      	beq.n	8000f9c <__udivmoddi4+0x294>
 8000ef8:	2e00      	cmp	r6, #0
 8000efa:	d069      	beq.n	8000fd0 <__udivmoddi4+0x2c8>
 8000efc:	ebb1 050a 	subs.w	r5, r1, sl
 8000f00:	eb64 0403 	sbc.w	r4, r4, r3
 8000f04:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f08:	40fd      	lsrs	r5, r7
 8000f0a:	40fc      	lsrs	r4, r7
 8000f0c:	ea4c 0505 	orr.w	r5, ip, r5
 8000f10:	e9c6 5400 	strd	r5, r4, [r6]
 8000f14:	2700      	movs	r7, #0
 8000f16:	e747      	b.n	8000da8 <__udivmoddi4+0xa0>
 8000f18:	f1c2 0320 	rsb	r3, r2, #32
 8000f1c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f20:	4095      	lsls	r5, r2
 8000f22:	fa01 f002 	lsl.w	r0, r1, r2
 8000f26:	fa21 f303 	lsr.w	r3, r1, r3
 8000f2a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f2e:	4338      	orrs	r0, r7
 8000f30:	0c01      	lsrs	r1, r0, #16
 8000f32:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f36:	fa1f f885 	uxth.w	r8, r5
 8000f3a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f42:	fb07 f308 	mul.w	r3, r7, r8
 8000f46:	428b      	cmp	r3, r1
 8000f48:	fa04 f402 	lsl.w	r4, r4, r2
 8000f4c:	d907      	bls.n	8000f5e <__udivmoddi4+0x256>
 8000f4e:	1869      	adds	r1, r5, r1
 8000f50:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f54:	d22f      	bcs.n	8000fb6 <__udivmoddi4+0x2ae>
 8000f56:	428b      	cmp	r3, r1
 8000f58:	d92d      	bls.n	8000fb6 <__udivmoddi4+0x2ae>
 8000f5a:	3f02      	subs	r7, #2
 8000f5c:	4429      	add	r1, r5
 8000f5e:	1acb      	subs	r3, r1, r3
 8000f60:	b281      	uxth	r1, r0
 8000f62:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f66:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f6a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f6e:	fb00 f308 	mul.w	r3, r0, r8
 8000f72:	428b      	cmp	r3, r1
 8000f74:	d907      	bls.n	8000f86 <__udivmoddi4+0x27e>
 8000f76:	1869      	adds	r1, r5, r1
 8000f78:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f7c:	d217      	bcs.n	8000fae <__udivmoddi4+0x2a6>
 8000f7e:	428b      	cmp	r3, r1
 8000f80:	d915      	bls.n	8000fae <__udivmoddi4+0x2a6>
 8000f82:	3802      	subs	r0, #2
 8000f84:	4429      	add	r1, r5
 8000f86:	1ac9      	subs	r1, r1, r3
 8000f88:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f8c:	e73b      	b.n	8000e06 <__udivmoddi4+0xfe>
 8000f8e:	4637      	mov	r7, r6
 8000f90:	4630      	mov	r0, r6
 8000f92:	e709      	b.n	8000da8 <__udivmoddi4+0xa0>
 8000f94:	4607      	mov	r7, r0
 8000f96:	e6e7      	b.n	8000d68 <__udivmoddi4+0x60>
 8000f98:	4618      	mov	r0, r3
 8000f9a:	e6fb      	b.n	8000d94 <__udivmoddi4+0x8c>
 8000f9c:	4541      	cmp	r1, r8
 8000f9e:	d2ab      	bcs.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fa0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000fa4:	eb69 020e 	sbc.w	r2, r9, lr
 8000fa8:	3801      	subs	r0, #1
 8000faa:	4613      	mov	r3, r2
 8000fac:	e7a4      	b.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fae:	4660      	mov	r0, ip
 8000fb0:	e7e9      	b.n	8000f86 <__udivmoddi4+0x27e>
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	e795      	b.n	8000ee2 <__udivmoddi4+0x1da>
 8000fb6:	4667      	mov	r7, ip
 8000fb8:	e7d1      	b.n	8000f5e <__udivmoddi4+0x256>
 8000fba:	4681      	mov	r9, r0
 8000fbc:	e77c      	b.n	8000eb8 <__udivmoddi4+0x1b0>
 8000fbe:	3802      	subs	r0, #2
 8000fc0:	442c      	add	r4, r5
 8000fc2:	e747      	b.n	8000e54 <__udivmoddi4+0x14c>
 8000fc4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fc8:	442b      	add	r3, r5
 8000fca:	e72f      	b.n	8000e2c <__udivmoddi4+0x124>
 8000fcc:	4638      	mov	r0, r7
 8000fce:	e708      	b.n	8000de2 <__udivmoddi4+0xda>
 8000fd0:	4637      	mov	r7, r6
 8000fd2:	e6e9      	b.n	8000da8 <__udivmoddi4+0xa0>

08000fd4 <__aeabi_idiv0>:
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop

08000fd8 <CAN_Init>:
uint32_t				can_tx_mailbox;



void CAN_Init(void)
{
 8000fd8:	b500      	push	{lr}
 8000fda:	b08b      	sub	sp, #44	; 0x2c
	CAN_FilterTypeDef  sFilterConfig;

	/*##-1- Configure the CAN peripheral #######################################*/
	hcan1.Instance = CAN1;
 8000fdc:	4825      	ldr	r0, [pc, #148]	; (8001074 <CAN_Init+0x9c>)
 8000fde:	4b26      	ldr	r3, [pc, #152]	; (8001078 <CAN_Init+0xa0>)
 8000fe0:	6003      	str	r3, [r0, #0]
	hcan1.Init.Prescaler = 16;
 8000fe2:	2310      	movs	r3, #16
 8000fe4:	6043      	str	r3, [r0, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	6083      	str	r3, [r0, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000fea:	60c3      	str	r3, [r0, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_9TQ;
 8000fec:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000ff0:	6102      	str	r2, [r0, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_8TQ;
 8000ff2:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 8000ff6:	6142      	str	r2, [r0, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8000ff8:	7603      	strb	r3, [r0, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 8000ffa:	7643      	strb	r3, [r0, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8000ffc:	7683      	strb	r3, [r0, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 8000ffe:	76c3      	strb	r3, [r0, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001000:	7703      	strb	r3, [r0, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8001002:	7743      	strb	r3, [r0, #29]

	if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001004:	f001 f868 	bl	80020d8 <HAL_CAN_Init>
 8001008:	2800      	cmp	r0, #0
 800100a:	d12a      	bne.n	8001062 <CAN_Init+0x8a>
		/* Initialization Error */
		Error_Handler();
	}

	/*##-2- Configure the CAN Filter ###########################################*/
	sFilterConfig.FilterBank = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	9305      	str	r3, [sp, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;	//use id list
 8001010:	9306      	str	r3, [sp, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;	//16 bit for idlist
 8001012:	2201      	movs	r2, #1
 8001014:	9207      	str	r2, [sp, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 8001016:	9300      	str	r3, [sp, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 8001018:	9301      	str	r3, [sp, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 800101a:	9302      	str	r3, [sp, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;	//deactivate incoming filter. we getting it all
 800101c:	9303      	str	r3, [sp, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800101e:	9304      	str	r3, [sp, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8001020:	9208      	str	r2, [sp, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 8001022:	230e      	movs	r3, #14
 8001024:	9309      	str	r3, [sp, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8001026:	4669      	mov	r1, sp
 8001028:	4812      	ldr	r0, [pc, #72]	; (8001074 <CAN_Init+0x9c>)
 800102a:	f001 f8fb 	bl	8002224 <HAL_CAN_ConfigFilter>
 800102e:	b9d8      	cbnz	r0, 8001068 <CAN_Init+0x90>
		/* Filter configuration Error */
		Error_Handler();
	}

	/*##-3- Start the CAN peripheral ###########################################*/
	if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8001030:	4810      	ldr	r0, [pc, #64]	; (8001074 <CAN_Init+0x9c>)
 8001032:	f001 f975 	bl	8002320 <HAL_CAN_Start>
 8001036:	b9d0      	cbnz	r0, 800106e <CAN_Init+0x96>
//		/* Notification Error */
//		Error_Handler();
//	}

	/*##-5- Configure Transmission process #####################################*/
	can_tx_header.StdId = 23;
 8001038:	4a10      	ldr	r2, [pc, #64]	; (800107c <CAN_Init+0xa4>)
 800103a:	2317      	movs	r3, #23
 800103c:	6013      	str	r3, [r2, #0]
	can_tx_header.ExtId = 0x00;
 800103e:	2300      	movs	r3, #0
 8001040:	6053      	str	r3, [r2, #4]
	can_tx_header.RTR = CAN_RTR_DATA;
 8001042:	60d3      	str	r3, [r2, #12]
	can_tx_header.IDE = CAN_ID_STD;
 8001044:	6093      	str	r3, [r2, #8]
	can_tx_header.DLC = sizeof(float);	//4
 8001046:	2104      	movs	r1, #4
 8001048:	6111      	str	r1, [r2, #16]
	can_tx_header.TransmitGlobalTime = DISABLE;
 800104a:	7513      	strb	r3, [r2, #20]

	can_rx_header.StdId = 0x000;	//gets loaded by getmessage
 800104c:	4a0c      	ldr	r2, [pc, #48]	; (8001080 <CAN_Init+0xa8>)
 800104e:	6013      	str	r3, [r2, #0]
	can_rx_header.ExtId = 0x00;
 8001050:	6053      	str	r3, [r2, #4]
	can_rx_header.IDE = CAN_ID_STD;
 8001052:	6093      	str	r3, [r2, #8]
	can_rx_header.RTR = CAN_RTR_DATA;
 8001054:	60d3      	str	r3, [r2, #12]
	can_rx_header.DLC = sizeof(float);	//4
 8001056:	6111      	str	r1, [r2, #16]
	can_rx_header.Timestamp = 0;
 8001058:	6153      	str	r3, [r2, #20]
	can_rx_header.FilterMatchIndex = 0;
 800105a:	6193      	str	r3, [r2, #24]
}
 800105c:	b00b      	add	sp, #44	; 0x2c
 800105e:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 8001062:	f000 f9b7 	bl	80013d4 <Error_Handler>
 8001066:	e7d1      	b.n	800100c <CAN_Init+0x34>
		Error_Handler();
 8001068:	f000 f9b4 	bl	80013d4 <Error_Handler>
 800106c:	e7e0      	b.n	8001030 <CAN_Init+0x58>
		Error_Handler();
 800106e:	f000 f9b1 	bl	80013d4 <Error_Handler>
 8001072:	e7e1      	b.n	8001038 <CAN_Init+0x60>
 8001074:	200005b8 	.word	0x200005b8
 8001078:	40006400 	.word	0x40006400
 800107c:	2000047c 	.word	0x2000047c
 8001080:	20000418 	.word	0x20000418

08001084 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001084:	b570      	push	{r4, r5, r6, lr}
 8001086:	b0b4      	sub	sp, #208	; 0xd0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001088:	2230      	movs	r2, #48	; 0x30
 800108a:	2100      	movs	r1, #0
 800108c:	a828      	add	r0, sp, #160	; 0xa0
 800108e:	f003 f9cf 	bl	8004430 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001092:	2400      	movs	r4, #0
 8001094:	9423      	str	r4, [sp, #140]	; 0x8c
 8001096:	9424      	str	r4, [sp, #144]	; 0x90
 8001098:	9425      	str	r4, [sp, #148]	; 0x94
 800109a:	9426      	str	r4, [sp, #152]	; 0x98
 800109c:	9427      	str	r4, [sp, #156]	; 0x9c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800109e:	2680      	movs	r6, #128	; 0x80
 80010a0:	4632      	mov	r2, r6
 80010a2:	4621      	mov	r1, r4
 80010a4:	a803      	add	r0, sp, #12
 80010a6:	f003 f9c3 	bl	8004430 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010aa:	4b1e      	ldr	r3, [pc, #120]	; (8001124 <SystemClock_Config+0xa0>)
 80010ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010ae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80010b2:	641a      	str	r2, [r3, #64]	; 0x40
 80010b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ba:	9301      	str	r3, [sp, #4]
 80010bc:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80010be:	4a1a      	ldr	r2, [pc, #104]	; (8001128 <SystemClock_Config+0xa4>)
 80010c0:	6813      	ldr	r3, [r2, #0]
 80010c2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010ca:	6013      	str	r3, [r2, #0]
 80010cc:	6813      	ldr	r3, [r2, #0]
 80010ce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010d2:	9302      	str	r3, [sp, #8]
 80010d4:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010d6:	2502      	movs	r5, #2
 80010d8:	9528      	str	r5, [sp, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010da:	2301      	movs	r3, #1
 80010dc:	932b      	str	r3, [sp, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010de:	2310      	movs	r3, #16
 80010e0:	932c      	str	r3, [sp, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010e2:	952e      	str	r5, [sp, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010e4:	942f      	str	r4, [sp, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010e6:	2308      	movs	r3, #8
 80010e8:	9330      	str	r3, [sp, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 144;
 80010ea:	2390      	movs	r3, #144	; 0x90
 80010ec:	9331      	str	r3, [sp, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010ee:	9532      	str	r5, [sp, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80010f0:	9533      	str	r5, [sp, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f2:	a828      	add	r0, sp, #160	; 0xa0
 80010f4:	f001 fd00 	bl	8002af8 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010f8:	230f      	movs	r3, #15
 80010fa:	9323      	str	r3, [sp, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010fc:	9524      	str	r5, [sp, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010fe:	9425      	str	r4, [sp, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001100:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001104:	9326      	str	r3, [sp, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001106:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800110a:	9327      	str	r3, [sp, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800110c:	2104      	movs	r1, #4
 800110e:	a823      	add	r0, sp, #140	; 0x8c
 8001110:	f001 ff60 	bl	8002fd4 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001114:	9603      	str	r6, [sp, #12]
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001116:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001118:	a803      	add	r0, sp, #12
 800111a:	f002 f835 	bl	8003188 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 800111e:	b034      	add	sp, #208	; 0xd0
 8001120:	bd70      	pop	{r4, r5, r6, pc}
 8001122:	bf00      	nop
 8001124:	40023800 	.word	0x40023800
 8001128:	40007000 	.word	0x40007000

0800112c <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
void MX_ADC1_Init(void)
{
 800112c:	b570      	push	{r4, r5, r6, lr}
 800112e:	b084      	sub	sp, #16

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8001130:	2500      	movs	r5, #0
 8001132:	9500      	str	r5, [sp, #0]
 8001134:	9501      	str	r5, [sp, #4]
 8001136:	9502      	str	r5, [sp, #8]
 8001138:	9503      	str	r5, [sp, #12]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 800113a:	4c10      	ldr	r4, [pc, #64]	; (800117c <MX_ADC1_Init+0x50>)
 800113c:	4b10      	ldr	r3, [pc, #64]	; (8001180 <MX_ADC1_Init+0x54>)
 800113e:	6023      	str	r3, [r4, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001140:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001144:	6063      	str	r3, [r4, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001146:	60a5      	str	r5, [r4, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001148:	6125      	str	r5, [r4, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 800114a:	61a5      	str	r5, [r4, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800114c:	f884 5020 	strb.w	r5, [r4, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001150:	62e5      	str	r5, [r4, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001152:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <MX_ADC1_Init+0x58>)
 8001154:	62a3      	str	r3, [r4, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001156:	60e5      	str	r5, [r4, #12]
	hadc1.Init.NbrOfConversion = 1;
 8001158:	2601      	movs	r6, #1
 800115a:	61e6      	str	r6, [r4, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800115c:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001160:	6166      	str	r6, [r4, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001162:	4620      	mov	r0, r4
 8001164:	f000 fea6 	bl	8001eb4 <HAL_ADC_Init>
	{
		Error_Handler();
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8001168:	9500      	str	r5, [sp, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800116a:	9601      	str	r6, [sp, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800116c:	9502      	str	r5, [sp, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800116e:	4669      	mov	r1, sp
 8001170:	4620      	mov	r0, r4
 8001172:	f000 fecb 	bl	8001f0c <HAL_ADC_ConfigChannel>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001176:	b004      	add	sp, #16
 8001178:	bd70      	pop	{r4, r5, r6, pc}
 800117a:	bf00      	nop
 800117c:	20000434 	.word	0x20000434
 8001180:	40012000 	.word	0x40012000
 8001184:	0f000001 	.word	0x0f000001

08001188 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
void MX_SPI1_Init(void)
{
 8001188:	b508      	push	{r3, lr}

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800118a:	480e      	ldr	r0, [pc, #56]	; (80011c4 <MX_SPI1_Init+0x3c>)
 800118c:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <MX_SPI1_Init+0x40>)
 800118e:	6003      	str	r3, [r0, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001190:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001194:	6043      	str	r3, [r0, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001196:	2300      	movs	r3, #0
 8001198:	6083      	str	r3, [r0, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800119a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800119e:	60c2      	str	r2, [r0, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011a0:	6103      	str	r3, [r0, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011a2:	6143      	str	r3, [r0, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80011a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011a8:	6182      	str	r2, [r0, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80011aa:	2238      	movs	r2, #56	; 0x38
 80011ac:	61c2      	str	r2, [r0, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011ae:	6203      	str	r3, [r0, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011b0:	6243      	str	r3, [r0, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011b2:	6283      	str	r3, [r0, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 80011b4:	2207      	movs	r2, #7
 80011b6:	62c2      	str	r2, [r0, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011b8:	6303      	str	r3, [r0, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011ba:	2308      	movs	r3, #8
 80011bc:	6343      	str	r3, [r0, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011be:	f002 fa57 	bl	8003670 <HAL_SPI_Init>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80011c2:	bd08      	pop	{r3, pc}
 80011c4:	200004d4 	.word	0x200004d4
 80011c8:	40013000 	.word	0x40013000

080011cc <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
void MX_TIM1_Init(void)
{
 80011cc:	b570      	push	{r4, r5, r6, lr}
 80011ce:	b096      	sub	sp, #88	; 0x58

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d0:	2400      	movs	r4, #0
 80011d2:	9413      	str	r4, [sp, #76]	; 0x4c
 80011d4:	9414      	str	r4, [sp, #80]	; 0x50
 80011d6:	9415      	str	r4, [sp, #84]	; 0x54
	TIM_OC_InitTypeDef sConfigOC = {0};
 80011d8:	940c      	str	r4, [sp, #48]	; 0x30
 80011da:	940d      	str	r4, [sp, #52]	; 0x34
 80011dc:	940e      	str	r4, [sp, #56]	; 0x38
 80011de:	940f      	str	r4, [sp, #60]	; 0x3c
 80011e0:	9410      	str	r4, [sp, #64]	; 0x40
 80011e2:	9411      	str	r4, [sp, #68]	; 0x44
 80011e4:	9412      	str	r4, [sp, #72]	; 0x48
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011e6:	222c      	movs	r2, #44	; 0x2c
 80011e8:	4621      	mov	r1, r4
 80011ea:	a801      	add	r0, sp, #4
 80011ec:	f003 f920 	bl	8004430 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80011f0:	4d22      	ldr	r5, [pc, #136]	; (800127c <MX_TIM1_Init+0xb0>)
 80011f2:	4b23      	ldr	r3, [pc, #140]	; (8001280 <MX_TIM1_Init+0xb4>)
 80011f4:	602b      	str	r3, [r5, #0]
	htim1.Init.Prescaler = 4;
 80011f6:	2604      	movs	r6, #4
 80011f8:	606e      	str	r6, [r5, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011fa:	60ac      	str	r4, [r5, #8]
	htim1.Init.Period = 255;
 80011fc:	23ff      	movs	r3, #255	; 0xff
 80011fe:	60eb      	str	r3, [r5, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001200:	612c      	str	r4, [r5, #16]
	htim1.Init.RepetitionCounter = 0;
 8001202:	616c      	str	r4, [r5, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001204:	61ac      	str	r4, [r5, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001206:	4628      	mov	r0, r5
 8001208:	f002 fc00 	bl	8003a0c <HAL_TIM_PWM_Init>
	{
		Error_Handler();
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800120c:	9413      	str	r4, [sp, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800120e:	9414      	str	r4, [sp, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001210:	9415      	str	r4, [sp, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001212:	a913      	add	r1, sp, #76	; 0x4c
 8001214:	4628      	mov	r0, r5
 8001216:	f002 fd1d 	bl	8003c54 <HAL_TIMEx_MasterConfigSynchronization>
	{
		Error_Handler();
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800121a:	2360      	movs	r3, #96	; 0x60
 800121c:	930c      	str	r3, [sp, #48]	; 0x30
	sConfigOC.Pulse = 0;
 800121e:	940d      	str	r4, [sp, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001220:	940e      	str	r4, [sp, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001222:	940f      	str	r4, [sp, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001224:	9410      	str	r4, [sp, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001226:	9411      	str	r4, [sp, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001228:	9412      	str	r4, [sp, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800122a:	4622      	mov	r2, r4
 800122c:	a90c      	add	r1, sp, #48	; 0x30
 800122e:	4628      	mov	r0, r5
 8001230:	f002 fc3e 	bl	8003ab0 <HAL_TIM_PWM_ConfigChannel>
	{
		Error_Handler();
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001234:	4632      	mov	r2, r6
 8001236:	a90c      	add	r1, sp, #48	; 0x30
 8001238:	4628      	mov	r0, r5
 800123a:	f002 fc39 	bl	8003ab0 <HAL_TIM_PWM_ConfigChannel>
	{
		Error_Handler();
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800123e:	2208      	movs	r2, #8
 8001240:	a90c      	add	r1, sp, #48	; 0x30
 8001242:	4628      	mov	r0, r5
 8001244:	f002 fc34 	bl	8003ab0 <HAL_TIM_PWM_ConfigChannel>
	{
		Error_Handler();
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001248:	9401      	str	r4, [sp, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800124a:	9402      	str	r4, [sp, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800124c:	9403      	str	r4, [sp, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800124e:	9404      	str	r4, [sp, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001250:	9405      	str	r4, [sp, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001252:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001256:	9306      	str	r3, [sp, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8001258:	9407      	str	r4, [sp, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800125a:	9408      	str	r4, [sp, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800125c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001260:	9309      	str	r3, [sp, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8001262:	940a      	str	r4, [sp, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001264:	940b      	str	r4, [sp, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001266:	eb0d 0106 	add.w	r1, sp, r6
 800126a:	4628      	mov	r0, r5
 800126c:	f002 fd42 	bl	8003cf4 <HAL_TIMEx_ConfigBreakDeadTime>
		Error_Handler();
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8001270:	4628      	mov	r0, r5
 8001272:	f000 fc4f 	bl	8001b14 <HAL_TIM_MspPostInit>

}
 8001276:	b016      	add	sp, #88	; 0x58
 8001278:	bd70      	pop	{r4, r5, r6, pc}
 800127a:	bf00      	nop
 800127c:	20000494 	.word	0x20000494
 8001280:	40010000 	.word	0x40010000

08001284 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
void MX_USART2_UART_Init(void)
{
 8001284:	b508      	push	{r3, lr}
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001286:	4809      	ldr	r0, [pc, #36]	; (80012ac <MX_USART2_UART_Init+0x28>)
 8001288:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <MX_USART2_UART_Init+0x2c>)
 800128a:	6003      	str	r3, [r0, #0]
	huart2.Init.BaudRate = 115200;
 800128c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001290:	6043      	str	r3, [r0, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001292:	2300      	movs	r3, #0
 8001294:	6083      	str	r3, [r0, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001296:	60c3      	str	r3, [r0, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001298:	6103      	str	r3, [r0, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800129a:	220c      	movs	r2, #12
 800129c:	6142      	str	r2, [r0, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800129e:	6183      	str	r3, [r0, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012a0:	61c3      	str	r3, [r0, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012a2:	6203      	str	r3, [r0, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012a4:	6243      	str	r3, [r0, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80012a6:	f003 f868 	bl	800437a <HAL_UART_Init>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80012aa:	bd08      	pop	{r3, pc}
 80012ac:	20000538 	.word	0x20000538
 80012b0:	40004400 	.word	0x40004400

080012b4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
void MX_GPIO_Init(void)
{
 80012b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012b8:	b088      	sub	sp, #32
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ba:	2400      	movs	r4, #0
 80012bc:	9403      	str	r4, [sp, #12]
 80012be:	9404      	str	r4, [sp, #16]
 80012c0:	9405      	str	r4, [sp, #20]
 80012c2:	9406      	str	r4, [sp, #24]
 80012c4:	9407      	str	r4, [sp, #28]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80012c6:	4b3e      	ldr	r3, [pc, #248]	; (80013c0 <MX_GPIO_Init+0x10c>)
 80012c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012ca:	f042 0204 	orr.w	r2, r2, #4
 80012ce:	631a      	str	r2, [r3, #48]	; 0x30
 80012d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012d2:	f002 0204 	and.w	r2, r2, #4
 80012d6:	9200      	str	r2, [sp, #0]
 80012d8:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80012da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012dc:	f042 0201 	orr.w	r2, r2, #1
 80012e0:	631a      	str	r2, [r3, #48]	; 0x30
 80012e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012e4:	f002 0201 	and.w	r2, r2, #1
 80012e8:	9201      	str	r2, [sp, #4]
 80012ea:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80012ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012ee:	f042 0202 	orr.w	r2, r2, #2
 80012f2:	631a      	str	r2, [r3, #48]	; 0x30
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	9302      	str	r3, [sp, #8]
 80012fc:	9b02      	ldr	r3, [sp, #8]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, NRF_SS_Pin|NRF_CE_Pin, GPIO_PIN_RESET);
 80012fe:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80013d0 <MX_GPIO_Init+0x11c>
 8001302:	4622      	mov	r2, r4
 8001304:	f248 0104 	movw	r1, #32772	; 0x8004
 8001308:	4640      	mov	r0, r8
 800130a:	f001 fbef 	bl	8002aec <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(EN_HP_GPIO_Port, EN_HP_Pin, GPIO_PIN_RESET);
 800130e:	4d2d      	ldr	r5, [pc, #180]	; (80013c4 <MX_GPIO_Init+0x110>)
 8001310:	4622      	mov	r2, r4
 8001312:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001316:	4628      	mov	r0, r5
 8001318:	f001 fbe8 	bl	8002aec <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(MPU_SS_GPIO_Port, MPU_SS_Pin, GPIO_PIN_RESET);
 800131c:	4e2a      	ldr	r6, [pc, #168]	; (80013c8 <MX_GPIO_Init+0x114>)
 800131e:	4622      	mov	r2, r4
 8001320:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001324:	4630      	mov	r0, r6
 8001326:	f001 fbe1 	bl	8002aec <HAL_GPIO_WritePin>

	/*Configure GPIO pin : NRF_INT_Pin */
	GPIO_InitStruct.Pin = NRF_INT_Pin;
 800132a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800132e:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001330:	2302      	movs	r3, #2
 8001332:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	9405      	str	r4, [sp, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001336:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct.Alternate = GPIO_AF15_EVENTOUT;
 8001338:	230f      	movs	r3, #15
 800133a:	9307      	str	r3, [sp, #28]
	HAL_GPIO_Init(NRF_INT_GPIO_Port, &GPIO_InitStruct);
 800133c:	a903      	add	r1, sp, #12
 800133e:	4640      	mov	r0, r8
 8001340:	f001 faf2 	bl	8002928 <HAL_GPIO_Init>

	/*Configure GPIO pins : NRF_SS_Pin NRF_CE_Pin */
	GPIO_InitStruct.Pin = NRF_SS_Pin|NRF_CE_Pin;
 8001344:	f248 0304 	movw	r3, #32772	; 0x8004
 8001348:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134a:	2701      	movs	r7, #1
 800134c:	9704      	str	r7, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	9405      	str	r4, [sp, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001350:	9406      	str	r4, [sp, #24]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001352:	a903      	add	r1, sp, #12
 8001354:	4640      	mov	r0, r8
 8001356:	f001 fae7 	bl	8002928 <HAL_GPIO_Init>

	/*Configure GPIO pin : EN_HP_Pin */
	GPIO_InitStruct.Pin = EN_HP_Pin;
 800135a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800135e:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001360:	9704      	str	r7, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	9405      	str	r4, [sp, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001364:	9406      	str	r4, [sp, #24]
	HAL_GPIO_Init(EN_HP_GPIO_Port, &GPIO_InitStruct);
 8001366:	a903      	add	r1, sp, #12
 8001368:	4628      	mov	r0, r5
 800136a:	f001 fadd 	bl	8002928 <HAL_GPIO_Init>

	/*Configure GPIO pins : GP_SW_Pin SWITCH_Pin */
	GPIO_InitStruct.Pin = GP_SW_Pin|SWITCH_Pin;
 800136e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001372:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001374:	9404      	str	r4, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	9405      	str	r4, [sp, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001378:	a903      	add	r1, sp, #12
 800137a:	4628      	mov	r0, r5
 800137c:	f001 fad4 	bl	8002928 <HAL_GPIO_Init>

	/*Configure GPIO pin : MPU_INT_Pin */
	GPIO_InitStruct.Pin = MPU_INT_Pin;
 8001380:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001384:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001386:	4b11      	ldr	r3, [pc, #68]	; (80013cc <MX_GPIO_Init+0x118>)
 8001388:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	9405      	str	r4, [sp, #20]
	HAL_GPIO_Init(MPU_INT_GPIO_Port, &GPIO_InitStruct);
 800138c:	a903      	add	r1, sp, #12
 800138e:	4630      	mov	r0, r6
 8001390:	f001 faca 	bl	8002928 <HAL_GPIO_Init>

	/*Configure GPIO pin : MPU_SS_Pin */
	GPIO_InitStruct.Pin = MPU_SS_Pin;
 8001394:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001398:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139a:	9704      	str	r7, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	9405      	str	r4, [sp, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139e:	9406      	str	r4, [sp, #24]
	HAL_GPIO_Init(MPU_SS_GPIO_Port, &GPIO_InitStruct);
 80013a0:	a903      	add	r1, sp, #12
 80013a2:	4630      	mov	r0, r6
 80013a4:	f001 fac0 	bl	8002928 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB3 PB4 PB5 PB6
                           PB7 */
	GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80013a8:	23f8      	movs	r3, #248	; 0xf8
 80013aa:	9303      	str	r3, [sp, #12]
			|GPIO_PIN_7;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ac:	2303      	movs	r3, #3
 80013ae:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	9405      	str	r4, [sp, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b2:	a903      	add	r1, sp, #12
 80013b4:	4628      	mov	r0, r5
 80013b6:	f001 fab7 	bl	8002928 <HAL_GPIO_Init>

}
 80013ba:	b008      	add	sp, #32
 80013bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40020400 	.word	0x40020400
 80013c8:	40020000 	.word	0x40020000
 80013cc:	10110000 	.word	0x10110000
 80013d0:	40020800 	.word	0x40020800

080013d4 <Error_Handler>:
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80013d4:	4770      	bx	lr
	...

080013d8 <can_comm_misc>:
				.misc_cmd = LED_OFF
		}
};

void can_comm_misc(joint * chain, int num_joints)
{
 80013d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013da:	4606      	mov	r6, r0
 80013dc:	460f      	mov	r7, r1
	for(int i = 0; i < num_joints; i++)
 80013de:	2500      	movs	r5, #0
 80013e0:	e000      	b.n	80013e4 <can_comm_misc+0xc>
 80013e2:	3501      	adds	r5, #1
 80013e4:	42bd      	cmp	r5, r7
 80013e6:	da34      	bge.n	8001452 <can_comm_misc+0x7a>
	{
		can_tx_header.StdId = 0x7FF - chain[i].id;
 80013e8:	2398      	movs	r3, #152	; 0x98
 80013ea:	fb03 f305 	mul.w	r3, r3, r5
 80013ee:	18f2      	adds	r2, r6, r3
 80013f0:	5af1      	ldrh	r1, [r6, r3]
 80013f2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80013f6:	1a5b      	subs	r3, r3, r1
 80013f8:	4916      	ldr	r1, [pc, #88]	; (8001454 <can_comm_misc+0x7c>)
 80013fa:	600b      	str	r3, [r1, #0]
		can_tx_data.d[3]=chain[i].misc_cmd;
 80013fc:	f892 3094 	ldrb.w	r3, [r2, #148]	; 0x94
 8001400:	4a15      	ldr	r2, [pc, #84]	; (8001458 <can_comm_misc+0x80>)
 8001402:	70d3      	strb	r3, [r2, #3]
		HAL_CAN_AddTxMessage(&hcan1, &can_tx_header, can_tx_data.d, &can_tx_mailbox);
 8001404:	4b15      	ldr	r3, [pc, #84]	; (800145c <can_comm_misc+0x84>)
 8001406:	4816      	ldr	r0, [pc, #88]	; (8001460 <can_comm_misc+0x88>)
 8001408:	f000 ffb8 	bl	800237c <HAL_CAN_AddTxMessage>

		for(uint32_t exp_ts = HAL_GetTick()+1; HAL_GetTick() < exp_ts;)
 800140c:	f000 fc9e 	bl	8001d4c <HAL_GetTick>
 8001410:	1c44      	adds	r4, r0, #1
 8001412:	f000 fc9b 	bl	8001d4c <HAL_GetTick>
 8001416:	42a0      	cmp	r0, r4
 8001418:	d206      	bcs.n	8001428 <can_comm_misc+0x50>
		{
			if(HAL_CAN_IsTxMessagePending(&hcan1,can_tx_mailbox) == 0)
 800141a:	4b10      	ldr	r3, [pc, #64]	; (800145c <can_comm_misc+0x84>)
 800141c:	6819      	ldr	r1, [r3, #0]
 800141e:	4810      	ldr	r0, [pc, #64]	; (8001460 <can_comm_misc+0x88>)
 8001420:	f001 f821 	bl	8002466 <HAL_CAN_IsTxMessagePending>
 8001424:	2800      	cmp	r0, #0
 8001426:	d1f4      	bne.n	8001412 <can_comm_misc+0x3a>
				break;
		}
		for(uint32_t exp_ts = HAL_GetTick()+10;  HAL_GetTick() < exp_ts;)
 8001428:	f000 fc90 	bl	8001d4c <HAL_GetTick>
 800142c:	f100 040a 	add.w	r4, r0, #10
 8001430:	f000 fc8c 	bl	8001d4c <HAL_GetTick>
 8001434:	42a0      	cmp	r0, r4
 8001436:	d2d4      	bcs.n	80013e2 <can_comm_misc+0xa>
		{
			if(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) >= 1)
 8001438:	2100      	movs	r1, #0
 800143a:	4809      	ldr	r0, [pc, #36]	; (8001460 <can_comm_misc+0x88>)
 800143c:	f001 f8bf 	bl	80025be <HAL_CAN_GetRxFifoFillLevel>
 8001440:	2800      	cmp	r0, #0
 8001442:	d0f5      	beq.n	8001430 <can_comm_misc+0x58>
			{
				if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &can_rx_header, can_rx_data.d) != HAL_OK)
 8001444:	4b07      	ldr	r3, [pc, #28]	; (8001464 <can_comm_misc+0x8c>)
 8001446:	4a08      	ldr	r2, [pc, #32]	; (8001468 <can_comm_misc+0x90>)
 8001448:	2100      	movs	r1, #0
 800144a:	4805      	ldr	r0, [pc, #20]	; (8001460 <can_comm_misc+0x88>)
 800144c:	f001 f81d 	bl	800248a <HAL_CAN_GetRxMessage>
				{}
				break;
 8001450:	e7c7      	b.n	80013e2 <can_comm_misc+0xa>
			}
		}
	}
}
 8001452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001454:	2000047c 	.word	0x2000047c
 8001458:	20000000 	.word	0x20000000
 800145c:	20000414 	.word	0x20000414
 8001460:	200005b8 	.word	0x200005b8
 8001464:	200003c4 	.word	0x200003c4
 8001468:	20000418 	.word	0x20000418

0800146c <can_comm_motor>:

void can_comm_motor(joint * chain, int num_joints)
{
 800146c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001470:	4607      	mov	r7, r0
 8001472:	4688      	mov	r8, r1
	for(int i = 0; i < num_joints; i++)
 8001474:	2600      	movs	r6, #0
 8001476:	e016      	b.n	80014a6 <can_comm_motor+0x3a>
				{
					if(can_rx_header.StdId == chain[i].id)
						chain[i].q = can_rx_data.v;
					else
					{
						for(int sb = 0; sb < num_joints; sb++)	//sb = search base
 8001478:	3201      	adds	r2, #1
 800147a:	4542      	cmp	r2, r8
 800147c:	da12      	bge.n	80014a4 <can_comm_motor+0x38>
						{
							int sidx = (sb + i) % num_joints;
 800147e:	18b1      	adds	r1, r6, r2
 8001480:	fb91 f3f8 	sdiv	r3, r1, r8
 8001484:	fb08 1113 	mls	r1, r8, r3, r1
							if(can_rx_header.StdId == chain[sidx].id)
 8001488:	2398      	movs	r3, #152	; 0x98
 800148a:	fb03 f301 	mul.w	r3, r3, r1
 800148e:	18f9      	adds	r1, r7, r3
 8001490:	5afb      	ldrh	r3, [r7, r3]
 8001492:	4298      	cmp	r0, r3
 8001494:	d1f0      	bne.n	8001478 <can_comm_motor+0xc>
								chain[sidx].q = can_rx_data.v;
 8001496:	4b24      	ldr	r3, [pc, #144]	; (8001528 <can_comm_motor+0xbc>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800149e:	e7eb      	b.n	8001478 <can_comm_motor+0xc>
						for(int sb = 0; sb < num_joints; sb++)	//sb = search base
 80014a0:	2200      	movs	r2, #0
 80014a2:	e7ea      	b.n	800147a <can_comm_motor+0xe>
	for(int i = 0; i < num_joints; i++)
 80014a4:	3601      	adds	r6, #1
 80014a6:	4546      	cmp	r6, r8
 80014a8:	da3b      	bge.n	8001522 <can_comm_motor+0xb6>
		can_tx_header.StdId = chain[i].id;
 80014aa:	2598      	movs	r5, #152	; 0x98
 80014ac:	fb05 f506 	mul.w	r5, r5, r6
 80014b0:	eb07 0905 	add.w	r9, r7, r5
 80014b4:	5b7b      	ldrh	r3, [r7, r5]
 80014b6:	491d      	ldr	r1, [pc, #116]	; (800152c <can_comm_motor+0xc0>)
 80014b8:	600b      	str	r3, [r1, #0]
		HAL_CAN_AddTxMessage(&hcan1, &can_tx_header, chain[i].tau.d, &can_tx_mailbox);
 80014ba:	4b1d      	ldr	r3, [pc, #116]	; (8001530 <can_comm_motor+0xc4>)
 80014bc:	f109 028c 	add.w	r2, r9, #140	; 0x8c
 80014c0:	481c      	ldr	r0, [pc, #112]	; (8001534 <can_comm_motor+0xc8>)
 80014c2:	f000 ff5b 	bl	800237c <HAL_CAN_AddTxMessage>
		for(uint32_t exp_ts = HAL_GetTick()+1; HAL_GetTick() < exp_ts;)
 80014c6:	f000 fc41 	bl	8001d4c <HAL_GetTick>
 80014ca:	1c44      	adds	r4, r0, #1
 80014cc:	f000 fc3e 	bl	8001d4c <HAL_GetTick>
 80014d0:	42a0      	cmp	r0, r4
 80014d2:	d206      	bcs.n	80014e2 <can_comm_motor+0x76>
			if(HAL_CAN_IsTxMessagePending(&hcan1,can_tx_mailbox) == 0)
 80014d4:	4b16      	ldr	r3, [pc, #88]	; (8001530 <can_comm_motor+0xc4>)
 80014d6:	6819      	ldr	r1, [r3, #0]
 80014d8:	4816      	ldr	r0, [pc, #88]	; (8001534 <can_comm_motor+0xc8>)
 80014da:	f000 ffc4 	bl	8002466 <HAL_CAN_IsTxMessagePending>
 80014de:	2800      	cmp	r0, #0
 80014e0:	d1f4      	bne.n	80014cc <can_comm_motor+0x60>
		for(uint32_t exp_ts = HAL_GetTick()+10;  HAL_GetTick() < exp_ts;)
 80014e2:	f000 fc33 	bl	8001d4c <HAL_GetTick>
 80014e6:	f100 040a 	add.w	r4, r0, #10
 80014ea:	f000 fc2f 	bl	8001d4c <HAL_GetTick>
 80014ee:	42a0      	cmp	r0, r4
 80014f0:	d2d8      	bcs.n	80014a4 <can_comm_motor+0x38>
			if(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) >= 1)
 80014f2:	2100      	movs	r1, #0
 80014f4:	480f      	ldr	r0, [pc, #60]	; (8001534 <can_comm_motor+0xc8>)
 80014f6:	f001 f862 	bl	80025be <HAL_CAN_GetRxFifoFillLevel>
 80014fa:	2800      	cmp	r0, #0
 80014fc:	d0f5      	beq.n	80014ea <can_comm_motor+0x7e>
				if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &can_rx_header, can_rx_data.d) == HAL_OK)
 80014fe:	4b0a      	ldr	r3, [pc, #40]	; (8001528 <can_comm_motor+0xbc>)
 8001500:	4a0d      	ldr	r2, [pc, #52]	; (8001538 <can_comm_motor+0xcc>)
 8001502:	2100      	movs	r1, #0
 8001504:	480b      	ldr	r0, [pc, #44]	; (8001534 <can_comm_motor+0xc8>)
 8001506:	f000 ffc0 	bl	800248a <HAL_CAN_GetRxMessage>
 800150a:	2800      	cmp	r0, #0
 800150c:	d1ca      	bne.n	80014a4 <can_comm_motor+0x38>
					if(can_rx_header.StdId == chain[i].id)
 800150e:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <can_comm_motor+0xcc>)
 8001510:	6818      	ldr	r0, [r3, #0]
 8001512:	5b7b      	ldrh	r3, [r7, r5]
 8001514:	4298      	cmp	r0, r3
 8001516:	d1c3      	bne.n	80014a0 <can_comm_motor+0x34>
						chain[i].q = can_rx_data.v;
 8001518:	4b03      	ldr	r3, [pc, #12]	; (8001528 <can_comm_motor+0xbc>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f8c9 3088 	str.w	r3, [r9, #136]	; 0x88
 8001520:	e7c0      	b.n	80014a4 <can_comm_motor+0x38>
				}
				break;
			}
		}
	}
}
 8001522:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001526:	bf00      	nop
 8001528:	200003c4 	.word	0x200003c4
 800152c:	2000047c 	.word	0x2000047c
 8001530:	20000414 	.word	0x20000414
 8001534:	200005b8 	.word	0x200005b8
 8001538:	20000418 	.word	0x20000418

0800153c <main>:

int main(void)
{
 800153c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800153e:	ed2d 8b02 	vpush	{d8}
 8001542:	b085      	sub	sp, #20

	HAL_Init();
 8001544:	f000 fbea 	bl	8001d1c <HAL_Init>

	SystemClock_Config();
 8001548:	f7ff fd9c 	bl	8001084 <SystemClock_Config>

	MX_GPIO_Init();
 800154c:	f7ff feb2 	bl	80012b4 <MX_GPIO_Init>
	MX_ADC1_Init();
 8001550:	f7ff fdec 	bl	800112c <MX_ADC1_Init>
	HAL_Delay(100);
 8001554:	2064      	movs	r0, #100	; 0x64
 8001556:	f000 fbff 	bl	8001d58 <HAL_Delay>
	CAN_Init();
 800155a:	f7ff fd3d 	bl	8000fd8 <CAN_Init>
	//	MX_CAN1_Init();
	MX_USART2_UART_Init();
 800155e:	f7ff fe91 	bl	8001284 <MX_USART2_UART_Init>
	MX_SPI1_Init();
 8001562:	f7ff fe11 	bl	8001188 <MX_SPI1_Init>
	MX_TIM1_Init();
 8001566:	f7ff fe31 	bl	80011cc <MX_TIM1_Init>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800156a:	4c8f      	ldr	r4, [pc, #572]	; (80017a8 <main+0x26c>)
 800156c:	2100      	movs	r1, #0
 800156e:	4620      	mov	r0, r4
 8001570:	f002 fb4a 	bl	8003c08 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001574:	2104      	movs	r1, #4
 8001576:	4620      	mov	r0, r4
 8001578:	f002 fb46 	bl	8003c08 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800157c:	2108      	movs	r1, #8
 800157e:	4620      	mov	r0, r4
 8001580:	f002 fb42 	bl	8003c08 <HAL_TIM_PWM_Start>

	can_comm_misc(chain,NUM_JOINTS);
 8001584:	2103      	movs	r1, #3
 8001586:	4889      	ldr	r0, [pc, #548]	; (80017ac <main+0x270>)
 8001588:	f7ff ff26 	bl	80013d8 <can_comm_misc>
	HAL_Delay(100);
 800158c:	2064      	movs	r0, #100	; 0x64
 800158e:	f000 fbe3 	bl	8001d58 <HAL_Delay>
	for(int i = 0; i < NUM_JOINTS; i++)
 8001592:	2300      	movs	r3, #0
 8001594:	e007      	b.n	80015a6 <main+0x6a>
		chain[i].misc_cmd = EN_UART_ENC;
 8001596:	4985      	ldr	r1, [pc, #532]	; (80017ac <main+0x270>)
 8001598:	2298      	movs	r2, #152	; 0x98
 800159a:	fb02 1203 	mla	r2, r2, r3, r1
 800159e:	2134      	movs	r1, #52	; 0x34
 80015a0:	f882 1094 	strb.w	r1, [r2, #148]	; 0x94
	for(int i = 0; i < NUM_JOINTS; i++)
 80015a4:	3301      	adds	r3, #1
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	ddf5      	ble.n	8001596 <main+0x5a>
	can_comm_misc(chain,NUM_JOINTS);
 80015aa:	4c80      	ldr	r4, [pc, #512]	; (80017ac <main+0x270>)
 80015ac:	2103      	movs	r1, #3
 80015ae:	4620      	mov	r0, r4
 80015b0:	f7ff ff12 	bl	80013d8 <can_comm_misc>



	int led_state = NUM_JOINTS;
	uint32_t can_tx_ts = 0;
	chain[0].tau.v = 15.f;
 80015b4:	4b7e      	ldr	r3, [pc, #504]	; (80017b0 <main+0x274>)
 80015b6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	chain[1].tau.v = 0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
	can_comm_motor(chain, NUM_JOINTS);
 80015c0:	2103      	movs	r1, #3
 80015c2:	4620      	mov	r0, r4
 80015c4:	f7ff ff52 	bl	800146c <can_comm_motor>

	rgb_play((rgb_t){0,255,0});
 80015c8:	2600      	movs	r6, #0
 80015ca:	f88d 6004 	strb.w	r6, [sp, #4]
 80015ce:	23ff      	movs	r3, #255	; 0xff
 80015d0:	f88d 3005 	strb.w	r3, [sp, #5]
 80015d4:	f88d 6006 	strb.w	r6, [sp, #6]
 80015d8:	9801      	ldr	r0, [sp, #4]
 80015da:	f000 f909 	bl	80017f0 <rgb_play>



	uint32_t disp_ts = HAL_GetTick()+15;
 80015de:	f000 fbb5 	bl	8001d4c <HAL_GetTick>
 80015e2:	f100 040f 	add.w	r4, r0, #15
	int led_state = NUM_JOINTS;
 80015e6:	2503      	movs	r5, #3
 80015e8:	e0a7      	b.n	800173a <main+0x1fe>
	{
		if(HAL_GetTick()>can_tx_ts)
		{
			if(led_state == NUM_JOINTS)
			{
				rgb_play((rgb_t){0,255,0});
 80015ea:	2600      	movs	r6, #0
 80015ec:	f88d 6008 	strb.w	r6, [sp, #8]
 80015f0:	23ff      	movs	r3, #255	; 0xff
 80015f2:	f88d 3009 	strb.w	r3, [sp, #9]
 80015f6:	f88d 600a 	strb.w	r6, [sp, #10]
 80015fa:	9802      	ldr	r0, [sp, #8]
 80015fc:	f000 f8f8 	bl	80017f0 <rgb_play>
				for(int i = 0; i < NUM_JOINTS; i++)
 8001600:	4633      	mov	r3, r6
 8001602:	e007      	b.n	8001614 <main+0xd8>
					chain[i].misc_cmd = LED_OFF;
 8001604:	4969      	ldr	r1, [pc, #420]	; (80017ac <main+0x270>)
 8001606:	2298      	movs	r2, #152	; 0x98
 8001608:	fb02 1203 	mla	r2, r2, r3, r1
 800160c:	21fe      	movs	r1, #254	; 0xfe
 800160e:	f882 1094 	strb.w	r1, [r2, #148]	; 0x94
				for(int i = 0; i < NUM_JOINTS; i++)
 8001612:	3301      	adds	r3, #1
 8001614:	2b02      	cmp	r3, #2
 8001616:	ddf5      	ble.n	8001604 <main+0xc8>
 8001618:	e010      	b.n	800163c <main+0x100>
			}
			else
			{
				rgb_play((rgb_t){0,0,0});
				for(int i = 0; i < NUM_JOINTS; i++)
					chain[i].misc_cmd = LED_OFF;
 800161a:	4964      	ldr	r1, [pc, #400]	; (80017ac <main+0x270>)
 800161c:	2298      	movs	r2, #152	; 0x98
 800161e:	fb02 1203 	mla	r2, r2, r3, r1
 8001622:	21fe      	movs	r1, #254	; 0xfe
 8001624:	f882 1094 	strb.w	r1, [r2, #148]	; 0x94
				for(int i = 0; i < NUM_JOINTS; i++)
 8001628:	3301      	adds	r3, #1
 800162a:	2b02      	cmp	r3, #2
 800162c:	ddf5      	ble.n	800161a <main+0xde>
				chain[led_state].misc_cmd = LED_ON;
 800162e:	4a5f      	ldr	r2, [pc, #380]	; (80017ac <main+0x270>)
 8001630:	2398      	movs	r3, #152	; 0x98
 8001632:	fb03 2305 	mla	r3, r3, r5, r2
 8001636:	22de      	movs	r2, #222	; 0xde
 8001638:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
			}

			led_state = (led_state + 1) % (NUM_JOINTS + 1);
 800163c:	3501      	adds	r5, #1
 800163e:	426b      	negs	r3, r5
 8001640:	f005 0503 	and.w	r5, r5, #3
 8001644:	f003 0303 	and.w	r3, r3, #3
 8001648:	bf58      	it	pl
 800164a:	425d      	negpl	r5, r3
			can_tx_ts = HAL_GetTick()+1000;
 800164c:	f000 fb7e 	bl	8001d4c <HAL_GetTick>
 8001650:	f500 767a 	add.w	r6, r0, #1000	; 0x3e8
			can_comm_misc(chain,NUM_JOINTS);
 8001654:	2103      	movs	r1, #3
 8001656:	4855      	ldr	r0, [pc, #340]	; (80017ac <main+0x270>)
 8001658:	f7ff febe 	bl	80013d8 <can_comm_misc>
		}

		float t = ((float)HAL_GetTick())*.001f;
 800165c:	f000 fb76 	bl	8001d4c <HAL_GetTick>
 8001660:	ee07 0a90 	vmov	s15, r0
 8001664:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001668:	eddf 7a52 	vldr	s15, [pc, #328]	; 80017b4 <main+0x278>
 800166c:	ee28 8a27 	vmul.f32	s16, s16, s15
//		chain[0].qd =
		float f = 4.f;
		chain[0].qd = -0.77f + .6f*sin_fast(t*f);
 8001670:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8001674:	ee28 8a27 	vmul.f32	s16, s16, s15
 8001678:	eeb0 0a48 	vmov.f32	s0, s16
 800167c:	f000 f8f8 	bl	8001870 <sin_fast>
 8001680:	eddf 8a4d 	vldr	s17, [pc, #308]	; 80017b8 <main+0x27c>
 8001684:	ee20 0a28 	vmul.f32	s0, s0, s17
 8001688:	eddf 7a4c 	vldr	s15, [pc, #304]	; 80017bc <main+0x280>
 800168c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8001690:	4f46      	ldr	r7, [pc, #280]	; (80017ac <main+0x270>)
 8001692:	ed87 0a24 	vstr	s0, [r7, #144]	; 0x90
		chain[1].qd = -2.45f + .6f*sin_fast(t*f-1.57f);
 8001696:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 80017c0 <main+0x284>
 800169a:	ee38 0a40 	vsub.f32	s0, s16, s0
 800169e:	f000 f8e7 	bl	8001870 <sin_fast>
 80016a2:	ee20 0a28 	vmul.f32	s0, s0, s17
 80016a6:	eddf 8a47 	vldr	s17, [pc, #284]	; 80017c4 <main+0x288>
 80016aa:	ee30 0a68 	vsub.f32	s0, s0, s17
 80016ae:	ed87 0a4a 	vstr	s0, [r7, #296]	; 0x128
		chain[2].qd = -1.90f + 1.4f*sin_fast(t*f-3.14f);
 80016b2:	ed9f 0a45 	vldr	s0, [pc, #276]	; 80017c8 <main+0x28c>
 80016b6:	ee38 0a40 	vsub.f32	s0, s16, s0
 80016ba:	f000 f8d9 	bl	8001870 <sin_fast>
 80016be:	eddf 7a43 	vldr	s15, [pc, #268]	; 80017cc <main+0x290>
 80016c2:	ee20 0a27 	vmul.f32	s0, s0, s15
 80016c6:	eddf 7a42 	vldr	s15, [pc, #264]	; 80017d0 <main+0x294>
 80016ca:	ee30 0a67 	vsub.f32	s0, s0, s15
 80016ce:	ed87 0a70 	vstr	s0, [r7, #448]	; 0x1c0

		//chain[0].qd = 3.f*sin_fast(t);
		for(int joint = 0; joint < NUM_JOINTS; joint++)
 80016d2:	2300      	movs	r3, #0
 80016d4:	e006      	b.n	80016e4 <main+0x1a8>
			float tau = sign*75.f*(chain[joint].qd - chain[joint].q);
			if(tau > 35.f)
				tau = 35.f;
			if(tau < -35.f)
				tau = -35.f;
			chain[joint].tau.v = tau;
 80016d6:	4935      	ldr	r1, [pc, #212]	; (80017ac <main+0x270>)
 80016d8:	2298      	movs	r2, #152	; 0x98
 80016da:	fb02 1203 	mla	r2, r2, r3, r1
 80016de:	edc2 7a23 	vstr	s15, [r2, #140]	; 0x8c
		for(int joint = 0; joint < NUM_JOINTS; joint++)
 80016e2:	3301      	adds	r3, #1
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	dc20      	bgt.n	800172a <main+0x1ee>
			float tau = sign*75.f*(chain[joint].qd - chain[joint].q);
 80016e8:	4930      	ldr	r1, [pc, #192]	; (80017ac <main+0x270>)
 80016ea:	2298      	movs	r2, #152	; 0x98
 80016ec:	fb02 1203 	mla	r2, r2, r3, r1
 80016f0:	edd2 7a24 	vldr	s15, [r2, #144]	; 0x90
 80016f4:	ed92 7a22 	vldr	s14, [r2, #136]	; 0x88
 80016f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80016fc:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80017d4 <main+0x298>
 8001700:	ee67 7a87 	vmul.f32	s15, s15, s14
			if(tau > 35.f)
 8001704:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80017d8 <main+0x29c>
 8001708:	eef4 7ac7 	vcmpe.f32	s15, s14
 800170c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001710:	dd01      	ble.n	8001716 <main+0x1da>
				tau = 35.f;
 8001712:	eef0 7a47 	vmov.f32	s15, s14
			if(tau < -35.f)
 8001716:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80017dc <main+0x2a0>
 800171a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800171e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001722:	d5d8      	bpl.n	80016d6 <main+0x19a>
				tau = -35.f;
 8001724:	eef0 7a47 	vmov.f32	s15, s14
 8001728:	e7d5      	b.n	80016d6 <main+0x19a>
		}
		can_comm_motor(chain, NUM_JOINTS);
 800172a:	2103      	movs	r1, #3
 800172c:	481f      	ldr	r0, [pc, #124]	; (80017ac <main+0x270>)
 800172e:	f7ff fe9d 	bl	800146c <can_comm_motor>

		if(HAL_GetTick()>disp_ts)
 8001732:	f000 fb0b 	bl	8001d4c <HAL_GetTick>
 8001736:	42a0      	cmp	r0, r4
 8001738:	d834      	bhi.n	80017a4 <main+0x268>
		if(HAL_GetTick()>can_tx_ts)
 800173a:	f000 fb07 	bl	8001d4c <HAL_GetTick>
 800173e:	42b0      	cmp	r0, r6
 8001740:	d98c      	bls.n	800165c <main+0x120>
			if(led_state == NUM_JOINTS)
 8001742:	2d03      	cmp	r5, #3
 8001744:	f43f af51 	beq.w	80015ea <main+0xae>
				rgb_play((rgb_t){0,0,0});
 8001748:	2600      	movs	r6, #0
 800174a:	f88d 600c 	strb.w	r6, [sp, #12]
 800174e:	f88d 600d 	strb.w	r6, [sp, #13]
 8001752:	f88d 600e 	strb.w	r6, [sp, #14]
 8001756:	9803      	ldr	r0, [sp, #12]
 8001758:	f000 f84a 	bl	80017f0 <rgb_play>
				for(int i = 0; i < NUM_JOINTS; i++)
 800175c:	4633      	mov	r3, r6
 800175e:	e764      	b.n	800162a <main+0xee>
		{
			for(int i = 0; i < NUM_JOINTS; i++)
			{
				sprintf(gl_print_str, "q[%d] = %d, ", i, (int)(chain[i].q*1000));
 8001760:	4a12      	ldr	r2, [pc, #72]	; (80017ac <main+0x270>)
 8001762:	2398      	movs	r3, #152	; 0x98
 8001764:	fb03 2304 	mla	r3, r3, r4, r2
 8001768:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800176c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80017e0 <main+0x2a4>
 8001770:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001774:	4f1b      	ldr	r7, [pc, #108]	; (80017e4 <main+0x2a8>)
 8001776:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800177a:	ee17 3a90 	vmov	r3, s15
 800177e:	4622      	mov	r2, r4
 8001780:	4919      	ldr	r1, [pc, #100]	; (80017e8 <main+0x2ac>)
 8001782:	4638      	mov	r0, r7
 8001784:	f003 fca0 	bl	80050c8 <siprintf>
				print_string(gl_print_str);
 8001788:	4638      	mov	r0, r7
 800178a:	f000 fa67 	bl	8001c5c <print_string>
			for(int i = 0; i < NUM_JOINTS; i++)
 800178e:	3401      	adds	r4, #1
 8001790:	2c02      	cmp	r4, #2
 8001792:	dde5      	ble.n	8001760 <main+0x224>
			}
			print_string("\r\n");
 8001794:	4815      	ldr	r0, [pc, #84]	; (80017ec <main+0x2b0>)
 8001796:	f000 fa61 	bl	8001c5c <print_string>

			disp_ts = HAL_GetTick()+15;
 800179a:	f000 fad7 	bl	8001d4c <HAL_GetTick>
 800179e:	f100 040f 	add.w	r4, r0, #15
 80017a2:	e7ca      	b.n	800173a <main+0x1fe>
			for(int i = 0; i < NUM_JOINTS; i++)
 80017a4:	2400      	movs	r4, #0
 80017a6:	e7f3      	b.n	8001790 <main+0x254>
 80017a8:	20000494 	.word	0x20000494
 80017ac:	20000004 	.word	0x20000004
 80017b0:	41700000 	.word	0x41700000
 80017b4:	3a83126f 	.word	0x3a83126f
 80017b8:	3f19999a 	.word	0x3f19999a
 80017bc:	3f451eb8 	.word	0x3f451eb8
 80017c0:	3fc8f5c3 	.word	0x3fc8f5c3
 80017c4:	401ccccd 	.word	0x401ccccd
 80017c8:	4048f5c3 	.word	0x4048f5c3
 80017cc:	3fb33333 	.word	0x3fb33333
 80017d0:	3ff33333 	.word	0x3ff33333
 80017d4:	c2960000 	.word	0xc2960000
 80017d8:	420c0000 	.word	0x420c0000
 80017dc:	c20c0000 	.word	0xc20c0000
 80017e0:	447a0000 	.word	0x447a0000
 80017e4:	200003cc 	.word	0x200003cc
 80017e8:	08007ec8 	.word	0x08007ec8
 80017ec:	08007ed8 	.word	0x08007ed8

080017f0 <rgb_play>:
 *      Author: Ocanath Robotman
 */
#include "rgb.h"

void rgb_play(rgb_t rgb)
{
 80017f0:	b082      	sub	sp, #8
 80017f2:	9001      	str	r0, [sp, #4]
	TIMER_UPDATE_DUTY(rgb.b, rgb.g, rgb.r);
 80017f4:	4b09      	ldr	r3, [pc, #36]	; (800181c <rgb_play+0x2c>)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	f042 0202 	orr.w	r2, r2, #2
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8001802:	635a      	str	r2, [r3, #52]	; 0x34
 8001804:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8001808:	639a      	str	r2, [r3, #56]	; 0x38
 800180a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800180e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	f022 0202 	bic.w	r2, r2, #2
 8001816:	601a      	str	r2, [r3, #0]
}
 8001818:	b002      	add	sp, #8
 800181a:	4770      	bx	lr
 800181c:	40010000 	.word	0x40010000

08001820 <fmod_2pi>:
 */
float fmod_2pi(float in)
{
	uint8_t aneg = 0;
	float in_eval = in;
	if(in < 0)
 8001820:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8001824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001828:	d412      	bmi.n	8001850 <fmod_2pi+0x30>
	float in_eval = in;
 800182a:	eef0 7a40 	vmov.f32	s15, s0
	uint8_t aneg = 0;
 800182e:	2300      	movs	r3, #0
	{
		aneg = 1;
		in_eval = -in;
	}
	float fv = (float)((int)(in_eval*ONE_BY_TWO_PI));
 8001830:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001868 <fmod_2pi+0x48>
 8001834:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001838:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800183c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	if(aneg == 1)
 8001840:	b953      	cbnz	r3, 8001858 <fmod_2pi+0x38>
		fv = (-fv)-1;
	return in-TWO_PI*fv;
 8001842:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800186c <fmod_2pi+0x4c>
 8001846:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800184a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800184e:	4770      	bx	lr
		in_eval = -in;
 8001850:	eef1 7a40 	vneg.f32	s15, s0
		aneg = 1;
 8001854:	2301      	movs	r3, #1
 8001856:	e7eb      	b.n	8001830 <fmod_2pi+0x10>
		fv = (-fv)-1;
 8001858:	eef1 7a67 	vneg.f32	s15, s15
 800185c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001860:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001864:	e7ed      	b.n	8001842 <fmod_2pi+0x22>
 8001866:	bf00      	nop
 8001868:	3e22f981 	.word	0x3e22f981
 800186c:	40c90fdb 	.word	0x40c90fdb

08001870 <sin_fast>:
{
 8001870:	b508      	push	{r3, lr}
 8001872:	ed2d 8b02 	vpush	{d8}
	theta = fmod_2pi(theta+PI)-PI;	//get theta into the range of -pi to pi. this line wraps any arbitrary theta to -pi to pi
 8001876:	ed9f 8a37 	vldr	s16, [pc, #220]	; 8001954 <sin_fast+0xe4>
 800187a:	ee30 0a08 	vadd.f32	s0, s0, s16
 800187e:	f7ff ffcf 	bl	8001820 <fmod_2pi>
 8001882:	ee30 0a48 	vsub.f32	s0, s0, s16
	if(theta > HALF_PI && theta <= PI)	// if positive and in quadrant II, put in quadrant I (same)
 8001886:	eddf 7a34 	vldr	s15, [pc, #208]	; 8001958 <sin_fast+0xe8>
 800188a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800188e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001892:	dd1e      	ble.n	80018d2 <sin_fast+0x62>
 8001894:	eeb4 0ac8 	vcmpe.f32	s0, s16
 8001898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800189c:	d819      	bhi.n	80018d2 <sin_fast+0x62>
		theta = PI - theta;
 800189e:	ee38 0a40 	vsub.f32	s0, s16, s0
	uint8_t is_neg = 0;
 80018a2:	2300      	movs	r3, #0
	float theta_2 = theta*theta;
 80018a4:	ee60 7a00 	vmul.f32	s15, s0, s0
	float theta_3 = theta_2*theta;
 80018a8:	ee20 7a27 	vmul.f32	s14, s0, s15
	float theta_5 = theta_3*theta_2;
 80018ac:	ee67 7a87 	vmul.f32	s15, s15, s14
	float res = theta-theta_3*ONE_BY_THREE_FACTORIAL + theta_5 * ONE_BY_FIVE_FACTORIAL;
 80018b0:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800195c <sin_fast+0xec>
 80018b4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80018b8:	ee30 0a47 	vsub.f32	s0, s0, s14
 80018bc:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001960 <sin_fast+0xf0>
 80018c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018c4:	ee30 0a27 	vadd.f32	s0, s0, s15
	if(is_neg == 1)
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d140      	bne.n	800194e <sin_fast+0xde>
}
 80018cc:	ecbd 8b02 	vpop	{d8}
 80018d0:	bd08      	pop	{r3, pc}
	else if (theta >= PI && theta < THREE_BY_TWO_PI)  // if positive and in quadrant III (possible for cosine)
 80018d2:	eddf 7a20 	vldr	s15, [pc, #128]	; 8001954 <sin_fast+0xe4>
 80018d6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80018da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018de:	db0c      	blt.n	80018fa <sin_fast+0x8a>
 80018e0:	eddf 7a20 	vldr	s15, [pc, #128]	; 8001964 <sin_fast+0xf4>
 80018e4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80018e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ec:	d505      	bpl.n	80018fa <sin_fast+0x8a>
		theta = theta - PI;
 80018ee:	eddf 7a19 	vldr	s15, [pc, #100]	; 8001954 <sin_fast+0xe4>
 80018f2:	ee30 0a67 	vsub.f32	s0, s0, s15
		is_neg = 1;
 80018f6:	2301      	movs	r3, #1
		theta = theta - PI;
 80018f8:	e7d4      	b.n	80018a4 <sin_fast+0x34>
	else if (theta > THREE_BY_TWO_PI && theta < TWO_PI)  // if positive and in quadrant IV (edge case of cosine, rare but possible)
 80018fa:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8001964 <sin_fast+0xf4>
 80018fe:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001906:	dd0a      	ble.n	800191e <sin_fast+0xae>
 8001908:	eddf 7a17 	vldr	s15, [pc, #92]	; 8001968 <sin_fast+0xf8>
 800190c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001914:	d503      	bpl.n	800191e <sin_fast+0xae>
		theta = theta - TWO_PI;
 8001916:	ee30 0a67 	vsub.f32	s0, s0, s15
	uint8_t is_neg = 0;
 800191a:	2300      	movs	r3, #0
		theta = theta - TWO_PI;
 800191c:	e7c2      	b.n	80018a4 <sin_fast+0x34>
	else if (theta < -HALF_PI && theta >= -PI ) // if negative and in quadrant III,
 800191e:	eddf 7a13 	vldr	s15, [pc, #76]	; 800196c <sin_fast+0xfc>
 8001922:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800192a:	d50c      	bpl.n	8001946 <sin_fast+0xd6>
 800192c:	eddf 7a10 	vldr	s15, [pc, #64]	; 8001970 <sin_fast+0x100>
 8001930:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001938:	db07      	blt.n	800194a <sin_fast+0xda>
		theta = PI + theta;
 800193a:	eddf 7a06 	vldr	s15, [pc, #24]	; 8001954 <sin_fast+0xe4>
 800193e:	ee30 0a27 	vadd.f32	s0, s0, s15
		is_neg = 1;
 8001942:	2301      	movs	r3, #1
 8001944:	e7ae      	b.n	80018a4 <sin_fast+0x34>
	uint8_t is_neg = 0;
 8001946:	2300      	movs	r3, #0
 8001948:	e7ac      	b.n	80018a4 <sin_fast+0x34>
 800194a:	2300      	movs	r3, #0
 800194c:	e7aa      	b.n	80018a4 <sin_fast+0x34>
		return -res;
 800194e:	eeb1 0a40 	vneg.f32	s0, s0
 8001952:	e7bb      	b.n	80018cc <sin_fast+0x5c>
 8001954:	40490fdb 	.word	0x40490fdb
 8001958:	3fc90fdb 	.word	0x3fc90fdb
 800195c:	3e2aaaab 	.word	0x3e2aaaab
 8001960:	3c088889 	.word	0x3c088889
 8001964:	4096cbe4 	.word	0x4096cbe4
 8001968:	40c90fdb 	.word	0x40c90fdb
 800196c:	bfc90fdb 	.word	0xbfc90fdb
 8001970:	c0490fdb 	.word	0xc0490fdb

08001974 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001974:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001976:	4b0a      	ldr	r3, [pc, #40]	; (80019a0 <HAL_MspInit+0x2c>)
 8001978:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800197a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800197e:	641a      	str	r2, [r3, #64]	; 0x40
 8001980:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001982:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001986:	9200      	str	r2, [sp, #0]
 8001988:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800198a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800198c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001990:	645a      	str	r2, [r3, #68]	; 0x44
 8001992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001994:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001998:	9301      	str	r3, [sp, #4]
 800199a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800199c:	b002      	add	sp, #8
 800199e:	4770      	bx	lr
 80019a0:	40023800 	.word	0x40023800

080019a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019a4:	b500      	push	{lr}
 80019a6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a8:	2300      	movs	r3, #0
 80019aa:	9303      	str	r3, [sp, #12]
 80019ac:	9304      	str	r3, [sp, #16]
 80019ae:	9305      	str	r3, [sp, #20]
 80019b0:	9306      	str	r3, [sp, #24]
 80019b2:	9307      	str	r3, [sp, #28]
  if(hadc->Instance==ADC1)
 80019b4:	6802      	ldr	r2, [r0, #0]
 80019b6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80019ba:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 80019be:	429a      	cmp	r2, r3
 80019c0:	d002      	beq.n	80019c8 <HAL_ADC_MspInit+0x24>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80019c2:	b009      	add	sp, #36	; 0x24
 80019c4:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_ADC1_CLK_ENABLE();
 80019c8:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 80019cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80019ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019d2:	645a      	str	r2, [r3, #68]	; 0x44
 80019d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80019d6:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80019da:	9201      	str	r2, [sp, #4]
 80019dc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019e0:	f042 0201 	orr.w	r2, r2, #1
 80019e4:	631a      	str	r2, [r3, #48]	; 0x30
 80019e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e8:	f003 0301 	and.w	r3, r3, #1
 80019ec:	9302      	str	r3, [sp, #8]
 80019ee:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80019f0:	2303      	movs	r3, #3
 80019f2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019f4:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f6:	a903      	add	r1, sp, #12
 80019f8:	4801      	ldr	r0, [pc, #4]	; (8001a00 <HAL_ADC_MspInit+0x5c>)
 80019fa:	f000 ff95 	bl	8002928 <HAL_GPIO_Init>
}
 80019fe:	e7e0      	b.n	80019c2 <HAL_ADC_MspInit+0x1e>
 8001a00:	40020000 	.word	0x40020000

08001a04 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001a04:	b500      	push	{lr}
 8001a06:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a08:	2300      	movs	r3, #0
 8001a0a:	9303      	str	r3, [sp, #12]
 8001a0c:	9304      	str	r3, [sp, #16]
 8001a0e:	9305      	str	r3, [sp, #20]
 8001a10:	9306      	str	r3, [sp, #24]
 8001a12:	9307      	str	r3, [sp, #28]
  if(hcan->Instance==CAN1)
 8001a14:	6802      	ldr	r2, [r0, #0]
 8001a16:	4b18      	ldr	r3, [pc, #96]	; (8001a78 <HAL_CAN_MspInit+0x74>)
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d002      	beq.n	8001a22 <HAL_CAN_MspInit+0x1e>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001a1c:	b009      	add	sp, #36	; 0x24
 8001a1e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001a22:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8001a26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a28:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001a2c:	641a      	str	r2, [r3, #64]	; 0x40
 8001a2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a30:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8001a34:	9201      	str	r2, [sp, #4]
 8001a36:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a3a:	f042 0202 	orr.w	r2, r2, #2
 8001a3e:	631a      	str	r2, [r3, #48]	; 0x30
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	9302      	str	r3, [sp, #8]
 8001a48:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a4a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a4e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a50:	2302      	movs	r3, #2
 8001a52:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a54:	2303      	movs	r3, #3
 8001a56:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001a58:	2309      	movs	r3, #9
 8001a5a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a5c:	a903      	add	r1, sp, #12
 8001a5e:	4807      	ldr	r0, [pc, #28]	; (8001a7c <HAL_CAN_MspInit+0x78>)
 8001a60:	f000 ff62 	bl	8002928 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001a64:	2200      	movs	r2, #0
 8001a66:	4611      	mov	r1, r2
 8001a68:	2014      	movs	r0, #20
 8001a6a:	f000 ff07 	bl	800287c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001a6e:	2014      	movs	r0, #20
 8001a70:	f000 ff36 	bl	80028e0 <HAL_NVIC_EnableIRQ>
}
 8001a74:	e7d2      	b.n	8001a1c <HAL_CAN_MspInit+0x18>
 8001a76:	bf00      	nop
 8001a78:	40006400 	.word	0x40006400
 8001a7c:	40020400 	.word	0x40020400

08001a80 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a80:	b500      	push	{lr}
 8001a82:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a84:	2300      	movs	r3, #0
 8001a86:	9303      	str	r3, [sp, #12]
 8001a88:	9304      	str	r3, [sp, #16]
 8001a8a:	9305      	str	r3, [sp, #20]
 8001a8c:	9306      	str	r3, [sp, #24]
 8001a8e:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI1)
 8001a90:	6802      	ldr	r2, [r0, #0]
 8001a92:	4b13      	ldr	r3, [pc, #76]	; (8001ae0 <HAL_SPI_MspInit+0x60>)
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d002      	beq.n	8001a9e <HAL_SPI_MspInit+0x1e>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001a98:	b009      	add	sp, #36	; 0x24
 8001a9a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a9e:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8001aa2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001aa4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001aa8:	645a      	str	r2, [r3, #68]	; 0x44
 8001aaa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001aac:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001ab0:	9201      	str	r2, [sp, #4]
 8001ab2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ab6:	f042 0201 	orr.w	r2, r2, #1
 8001aba:	631a      	str	r2, [r3, #48]	; 0x30
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	9302      	str	r3, [sp, #8]
 8001ac4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001ac6:	23e0      	movs	r3, #224	; 0xe0
 8001ac8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aca:	2302      	movs	r3, #2
 8001acc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ad2:	2305      	movs	r3, #5
 8001ad4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad6:	a903      	add	r1, sp, #12
 8001ad8:	4802      	ldr	r0, [pc, #8]	; (8001ae4 <HAL_SPI_MspInit+0x64>)
 8001ada:	f000 ff25 	bl	8002928 <HAL_GPIO_Init>
}
 8001ade:	e7db      	b.n	8001a98 <HAL_SPI_MspInit+0x18>
 8001ae0:	40013000 	.word	0x40013000
 8001ae4:	40020000 	.word	0x40020000

08001ae8 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM1)
 8001ae8:	6802      	ldr	r2, [r0, #0]
 8001aea:	4b09      	ldr	r3, [pc, #36]	; (8001b10 <HAL_TIM_PWM_MspInit+0x28>)
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d000      	beq.n	8001af2 <HAL_TIM_PWM_MspInit+0xa>
 8001af0:	4770      	bx	lr
{
 8001af2:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001af4:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8001af8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001afa:	f042 0201 	orr.w	r2, r2, #1
 8001afe:	645a      	str	r2, [r3, #68]	; 0x44
 8001b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	9301      	str	r3, [sp, #4]
 8001b08:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001b0a:	b002      	add	sp, #8
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	40010000 	.word	0x40010000

08001b14 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b14:	b500      	push	{lr}
 8001b16:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b18:	2300      	movs	r3, #0
 8001b1a:	9301      	str	r3, [sp, #4]
 8001b1c:	9302      	str	r3, [sp, #8]
 8001b1e:	9303      	str	r3, [sp, #12]
 8001b20:	9304      	str	r3, [sp, #16]
 8001b22:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM1)
 8001b24:	6802      	ldr	r2, [r0, #0]
 8001b26:	4b0e      	ldr	r3, [pc, #56]	; (8001b60 <HAL_TIM_MspPostInit+0x4c>)
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d002      	beq.n	8001b32 <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001b2c:	b007      	add	sp, #28
 8001b2e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b32:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8001b36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b38:	f042 0201 	orr.w	r2, r2, #1
 8001b3c:	631a      	str	r2, [r3, #48]	; 0x30
 8001b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b40:	f003 0301 	and.w	r3, r3, #1
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001b48:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001b4c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b52:	2301      	movs	r3, #1
 8001b54:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b56:	a901      	add	r1, sp, #4
 8001b58:	4802      	ldr	r0, [pc, #8]	; (8001b64 <HAL_TIM_MspPostInit+0x50>)
 8001b5a:	f000 fee5 	bl	8002928 <HAL_GPIO_Init>
}
 8001b5e:	e7e5      	b.n	8001b2c <HAL_TIM_MspPostInit+0x18>
 8001b60:	40010000 	.word	0x40010000
 8001b64:	40020000 	.word	0x40020000

08001b68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b68:	b500      	push	{lr}
 8001b6a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	9303      	str	r3, [sp, #12]
 8001b70:	9304      	str	r3, [sp, #16]
 8001b72:	9305      	str	r3, [sp, #20]
 8001b74:	9306      	str	r3, [sp, #24]
 8001b76:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART2)
 8001b78:	6802      	ldr	r2, [r0, #0]
 8001b7a:	4b13      	ldr	r3, [pc, #76]	; (8001bc8 <HAL_UART_MspInit+0x60>)
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d002      	beq.n	8001b86 <HAL_UART_MspInit+0x1e>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b80:	b009      	add	sp, #36	; 0x24
 8001b82:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b86:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8001b8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b8c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001b90:	641a      	str	r2, [r3, #64]	; 0x40
 8001b92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b94:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001b98:	9201      	str	r2, [sp, #4]
 8001b9a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b9e:	f042 0201 	orr.w	r2, r2, #1
 8001ba2:	631a      	str	r2, [r3, #48]	; 0x30
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	9302      	str	r3, [sp, #8]
 8001bac:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001bae:	230c      	movs	r3, #12
 8001bb0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bba:	2307      	movs	r3, #7
 8001bbc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bbe:	a903      	add	r1, sp, #12
 8001bc0:	4802      	ldr	r0, [pc, #8]	; (8001bcc <HAL_UART_MspInit+0x64>)
 8001bc2:	f000 feb1 	bl	8002928 <HAL_GPIO_Init>
}
 8001bc6:	e7db      	b.n	8001b80 <HAL_UART_MspInit+0x18>
 8001bc8:	40004400 	.word	0x40004400
 8001bcc:	40020000 	.word	0x40020000

08001bd0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001bd0:	4770      	bx	lr

08001bd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bd2:	e7fe      	b.n	8001bd2 <HardFault_Handler>

08001bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bd4:	e7fe      	b.n	8001bd4 <MemManage_Handler>

08001bd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bd6:	e7fe      	b.n	8001bd6 <BusFault_Handler>

08001bd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bd8:	e7fe      	b.n	8001bd8 <UsageFault_Handler>

08001bda <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bda:	4770      	bx	lr

08001bdc <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bdc:	4770      	bx	lr

08001bde <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bde:	4770      	bx	lr

08001be0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001be0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001be2:	f000 f8a7 	bl	8001d34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001be6:	bd08      	pop	{r3, pc}

08001be8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001be8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001bea:	4802      	ldr	r0, [pc, #8]	; (8001bf4 <CAN1_RX0_IRQHandler+0xc>)
 8001bec:	f000 fd07 	bl	80025fe <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001bf0:	bd08      	pop	{r3, pc}
 8001bf2:	bf00      	nop
 8001bf4:	200005b8 	.word	0x200005b8

08001bf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bf8:	b510      	push	{r4, lr}
 8001bfa:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bfc:	4a0c      	ldr	r2, [pc, #48]	; (8001c30 <_sbrk+0x38>)
 8001bfe:	490d      	ldr	r1, [pc, #52]	; (8001c34 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c00:	480d      	ldr	r0, [pc, #52]	; (8001c38 <_sbrk+0x40>)
 8001c02:	6800      	ldr	r0, [r0, #0]
 8001c04:	b140      	cbz	r0, 8001c18 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c06:	480c      	ldr	r0, [pc, #48]	; (8001c38 <_sbrk+0x40>)
 8001c08:	6800      	ldr	r0, [r0, #0]
 8001c0a:	4403      	add	r3, r0
 8001c0c:	1a52      	subs	r2, r2, r1
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d806      	bhi.n	8001c20 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001c12:	4a09      	ldr	r2, [pc, #36]	; (8001c38 <_sbrk+0x40>)
 8001c14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001c16:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001c18:	4807      	ldr	r0, [pc, #28]	; (8001c38 <_sbrk+0x40>)
 8001c1a:	4c08      	ldr	r4, [pc, #32]	; (8001c3c <_sbrk+0x44>)
 8001c1c:	6004      	str	r4, [r0, #0]
 8001c1e:	e7f2      	b.n	8001c06 <_sbrk+0xe>
    errno = ENOMEM;
 8001c20:	f002 fbdc 	bl	80043dc <__errno>
 8001c24:	230c      	movs	r3, #12
 8001c26:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001c28:	f04f 30ff 	mov.w	r0, #4294967295
 8001c2c:	e7f3      	b.n	8001c16 <_sbrk+0x1e>
 8001c2e:	bf00      	nop
 8001c30:	20040000 	.word	0x20040000
 8001c34:	00000400 	.word	0x00000400
 8001c38:	200003c8 	.word	0x200003c8
 8001c3c:	200005e8 	.word	0x200005e8

08001c40 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c40:	4b05      	ldr	r3, [pc, #20]	; (8001c58 <SystemInit+0x18>)
 8001c42:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001c46:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001c4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c4e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c52:	609a      	str	r2, [r3, #8]
#endif
}
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	e000ed00 	.word	0xe000ed00

08001c5c <print_string>:
 */
#include "uart-disp-tools.h"

char gl_print_str[64] = {0};
void print_string(const char * str)
{
 8001c5c:	b508      	push	{r3, lr}
 8001c5e:	4601      	mov	r1, r0
	int strlen;
	for(strlen = 0; str[strlen] != 0; strlen++);
 8001c60:	2200      	movs	r2, #0
 8001c62:	e000      	b.n	8001c66 <print_string+0xa>
 8001c64:	3201      	adds	r2, #1
 8001c66:	5c8b      	ldrb	r3, [r1, r2]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d1fb      	bne.n	8001c64 <print_string+0x8>
	HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen, 10);
 8001c6c:	230a      	movs	r3, #10
 8001c6e:	b292      	uxth	r2, r2
 8001c70:	4801      	ldr	r0, [pc, #4]	; (8001c78 <print_string+0x1c>)
 8001c72:	f002 faf2 	bl	800425a <HAL_UART_Transmit>
}
 8001c76:	bd08      	pop	{r3, pc}
 8001c78:	20000538 	.word	0x20000538

08001c7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cb4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001c80:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001c82:	e003      	b.n	8001c8c <LoopCopyDataInit>

08001c84 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001c84:	4b0c      	ldr	r3, [pc, #48]	; (8001cb8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001c86:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001c88:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001c8a:	3104      	adds	r1, #4

08001c8c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001c8c:	480b      	ldr	r0, [pc, #44]	; (8001cbc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001c8e:	4b0c      	ldr	r3, [pc, #48]	; (8001cc0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001c90:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001c92:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001c94:	d3f6      	bcc.n	8001c84 <CopyDataInit>
  ldr  r2, =_sbss
 8001c96:	4a0b      	ldr	r2, [pc, #44]	; (8001cc4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001c98:	e002      	b.n	8001ca0 <LoopFillZerobss>

08001c9a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001c9a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001c9c:	f842 3b04 	str.w	r3, [r2], #4

08001ca0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ca0:	4b09      	ldr	r3, [pc, #36]	; (8001cc8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001ca2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001ca4:	d3f9      	bcc.n	8001c9a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001ca6:	f7ff ffcb 	bl	8001c40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001caa:	f002 fb9d 	bl	80043e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cae:	f7ff fc45 	bl	800153c <main>
  bx  lr    
 8001cb2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cb4:	20040000 	.word	0x20040000
  ldr  r3, =_sidata
 8001cb8:	080081b8 	.word	0x080081b8
  ldr  r0, =_sdata
 8001cbc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001cc0:	200003a8 	.word	0x200003a8
  ldr  r2, =_sbss
 8001cc4:	200003a8 	.word	0x200003a8
  ldr  r3, = _ebss
 8001cc8:	200005e8 	.word	0x200005e8

08001ccc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ccc:	e7fe      	b.n	8001ccc <ADC_IRQHandler>
	...

08001cd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cd0:	b510      	push	{r4, lr}
 8001cd2:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cd4:	4b0e      	ldr	r3, [pc, #56]	; (8001d10 <HAL_InitTick+0x40>)
 8001cd6:	7818      	ldrb	r0, [r3, #0]
 8001cd8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cdc:	fbb3 f3f0 	udiv	r3, r3, r0
 8001ce0:	4a0c      	ldr	r2, [pc, #48]	; (8001d14 <HAL_InitTick+0x44>)
 8001ce2:	6810      	ldr	r0, [r2, #0]
 8001ce4:	fbb0 f0f3 	udiv	r0, r0, r3
 8001ce8:	f000 fe08 	bl	80028fc <HAL_SYSTICK_Config>
 8001cec:	b968      	cbnz	r0, 8001d0a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cee:	2c0f      	cmp	r4, #15
 8001cf0:	d901      	bls.n	8001cf6 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8001cf2:	2001      	movs	r0, #1
 8001cf4:	e00a      	b.n	8001d0c <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	4621      	mov	r1, r4
 8001cfa:	f04f 30ff 	mov.w	r0, #4294967295
 8001cfe:	f000 fdbd 	bl	800287c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d02:	4b05      	ldr	r3, [pc, #20]	; (8001d18 <HAL_InitTick+0x48>)
 8001d04:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d06:	2000      	movs	r0, #0
 8001d08:	e000      	b.n	8001d0c <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8001d0a:	2001      	movs	r0, #1
}
 8001d0c:	bd10      	pop	{r4, pc}
 8001d0e:	bf00      	nop
 8001d10:	200001d0 	.word	0x200001d0
 8001d14:	200001cc 	.word	0x200001cc
 8001d18:	200001d4 	.word	0x200001d4

08001d1c <HAL_Init>:
{
 8001d1c:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d1e:	2003      	movs	r0, #3
 8001d20:	f000 fd9a 	bl	8002858 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d24:	2000      	movs	r0, #0
 8001d26:	f7ff ffd3 	bl	8001cd0 <HAL_InitTick>
  HAL_MspInit();
 8001d2a:	f7ff fe23 	bl	8001974 <HAL_MspInit>
}
 8001d2e:	2000      	movs	r0, #0
 8001d30:	bd08      	pop	{r3, pc}
	...

08001d34 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001d34:	4a03      	ldr	r2, [pc, #12]	; (8001d44 <HAL_IncTick+0x10>)
 8001d36:	6811      	ldr	r1, [r2, #0]
 8001d38:	4b03      	ldr	r3, [pc, #12]	; (8001d48 <HAL_IncTick+0x14>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	440b      	add	r3, r1
 8001d3e:	6013      	str	r3, [r2, #0]
}
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	200005e0 	.word	0x200005e0
 8001d48:	200001d0 	.word	0x200001d0

08001d4c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001d4c:	4b01      	ldr	r3, [pc, #4]	; (8001d54 <HAL_GetTick+0x8>)
 8001d4e:	6818      	ldr	r0, [r3, #0]
}
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	200005e0 	.word	0x200005e0

08001d58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d58:	b538      	push	{r3, r4, r5, lr}
 8001d5a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001d5c:	f7ff fff6 	bl	8001d4c <HAL_GetTick>
 8001d60:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d62:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001d66:	d002      	beq.n	8001d6e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d68:	4b04      	ldr	r3, [pc, #16]	; (8001d7c <HAL_Delay+0x24>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d6e:	f7ff ffed 	bl	8001d4c <HAL_GetTick>
 8001d72:	1b40      	subs	r0, r0, r5
 8001d74:	42a0      	cmp	r0, r4
 8001d76:	d3fa      	bcc.n	8001d6e <HAL_Delay+0x16>
  {
  }
}
 8001d78:	bd38      	pop	{r3, r4, r5, pc}
 8001d7a:	bf00      	nop
 8001d7c:	200001d0 	.word	0x200001d0

08001d80 <ADC_Init>:
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001d80:	4b4a      	ldr	r3, [pc, #296]	; (8001eac <ADC_Init+0x12c>)
 8001d82:	685a      	ldr	r2, [r3, #4]
 8001d84:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001d88:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001d8a:	685a      	ldr	r2, [r3, #4]
 8001d8c:	6841      	ldr	r1, [r0, #4]
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d92:	6802      	ldr	r2, [r0, #0]
 8001d94:	6853      	ldr	r3, [r2, #4]
 8001d96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d9a:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d9c:	6802      	ldr	r2, [r0, #0]
 8001d9e:	6853      	ldr	r3, [r2, #4]
 8001da0:	6901      	ldr	r1, [r0, #16]
 8001da2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001da6:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001da8:	6802      	ldr	r2, [r0, #0]
 8001daa:	6853      	ldr	r3, [r2, #4]
 8001dac:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001db0:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001db2:	6802      	ldr	r2, [r0, #0]
 8001db4:	6853      	ldr	r3, [r2, #4]
 8001db6:	6881      	ldr	r1, [r0, #8]
 8001db8:	430b      	orrs	r3, r1
 8001dba:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001dbc:	6802      	ldr	r2, [r0, #0]
 8001dbe:	6893      	ldr	r3, [r2, #8]
 8001dc0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001dc4:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001dc6:	6802      	ldr	r2, [r0, #0]
 8001dc8:	6893      	ldr	r3, [r2, #8]
 8001dca:	68c1      	ldr	r1, [r0, #12]
 8001dcc:	430b      	orrs	r3, r1
 8001dce:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001dd0:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001dd2:	4b37      	ldr	r3, [pc, #220]	; (8001eb0 <ADC_Init+0x130>)
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d04b      	beq.n	8001e70 <ADC_Init+0xf0>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001dd8:	6802      	ldr	r2, [r0, #0]
 8001dda:	6893      	ldr	r3, [r2, #8]
 8001ddc:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001de0:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001de2:	6802      	ldr	r2, [r0, #0]
 8001de4:	6893      	ldr	r3, [r2, #8]
 8001de6:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8001de8:	430b      	orrs	r3, r1
 8001dea:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001dec:	6802      	ldr	r2, [r0, #0]
 8001dee:	6893      	ldr	r3, [r2, #8]
 8001df0:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001df4:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001df6:	6802      	ldr	r2, [r0, #0]
 8001df8:	6893      	ldr	r3, [r2, #8]
 8001dfa:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001dfc:	430b      	orrs	r3, r1
 8001dfe:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e00:	6802      	ldr	r2, [r0, #0]
 8001e02:	6893      	ldr	r3, [r2, #8]
 8001e04:	f023 0302 	bic.w	r3, r3, #2
 8001e08:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e0a:	6802      	ldr	r2, [r0, #0]
 8001e0c:	6893      	ldr	r3, [r2, #8]
 8001e0e:	6981      	ldr	r1, [r0, #24]
 8001e10:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8001e14:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e16:	f890 3020 	ldrb.w	r3, [r0, #32]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d133      	bne.n	8001e86 <ADC_Init+0x106>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e1e:	6802      	ldr	r2, [r0, #0]
 8001e20:	6853      	ldr	r3, [r2, #4]
 8001e22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001e26:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e28:	6802      	ldr	r2, [r0, #0]
 8001e2a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001e2c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001e30:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e32:	6801      	ldr	r1, [r0, #0]
 8001e34:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8001e36:	69c2      	ldr	r2, [r0, #28]
 8001e38:	3a01      	subs	r2, #1
 8001e3a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8001e3e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e40:	6802      	ldr	r2, [r0, #0]
 8001e42:	6893      	ldr	r3, [r2, #8]
 8001e44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001e48:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e4a:	6802      	ldr	r2, [r0, #0]
 8001e4c:	6893      	ldr	r3, [r2, #8]
 8001e4e:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
 8001e52:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8001e56:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e58:	6802      	ldr	r2, [r0, #0]
 8001e5a:	6893      	ldr	r3, [r2, #8]
 8001e5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001e60:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e62:	6802      	ldr	r2, [r0, #0]
 8001e64:	6893      	ldr	r3, [r2, #8]
 8001e66:	6941      	ldr	r1, [r0, #20]
 8001e68:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8001e6c:	6093      	str	r3, [r2, #8]
}
 8001e6e:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e70:	6802      	ldr	r2, [r0, #0]
 8001e72:	6893      	ldr	r3, [r2, #8]
 8001e74:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001e78:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e7a:	6802      	ldr	r2, [r0, #0]
 8001e7c:	6893      	ldr	r3, [r2, #8]
 8001e7e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001e82:	6093      	str	r3, [r2, #8]
 8001e84:	e7bc      	b.n	8001e00 <ADC_Init+0x80>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e86:	6802      	ldr	r2, [r0, #0]
 8001e88:	6853      	ldr	r3, [r2, #4]
 8001e8a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e8e:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e90:	6802      	ldr	r2, [r0, #0]
 8001e92:	6853      	ldr	r3, [r2, #4]
 8001e94:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001e98:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e9a:	6801      	ldr	r1, [r0, #0]
 8001e9c:	684b      	ldr	r3, [r1, #4]
 8001e9e:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8001ea0:	3a01      	subs	r2, #1
 8001ea2:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8001ea6:	604b      	str	r3, [r1, #4]
 8001ea8:	e7be      	b.n	8001e28 <ADC_Init+0xa8>
 8001eaa:	bf00      	nop
 8001eac:	40012300 	.word	0x40012300
 8001eb0:	0f000001 	.word	0x0f000001

08001eb4 <HAL_ADC_Init>:
  if(hadc == NULL)
 8001eb4:	b328      	cbz	r0, 8001f02 <HAL_ADC_Init+0x4e>
{
 8001eb6:	b510      	push	{r4, lr}
 8001eb8:	4604      	mov	r4, r0
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001eba:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001ebc:	b143      	cbz	r3, 8001ed0 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ebe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ec0:	f013 0f10 	tst.w	r3, #16
 8001ec4:	d00b      	beq.n	8001ede <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 8001ec6:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8001ec8:	2300      	movs	r3, #0
 8001eca:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8001ece:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 8001ed0:	f7ff fd68 	bl	80019a4 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 8001ed8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001edc:	e7ef      	b.n	8001ebe <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 8001ede:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001ee0:	4b09      	ldr	r3, [pc, #36]	; (8001f08 <HAL_ADC_Init+0x54>)
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	f043 0302 	orr.w	r3, r3, #2
 8001ee8:	6423      	str	r3, [r4, #64]	; 0x40
    ADC_Init(hadc);
 8001eea:	4620      	mov	r0, r4
 8001eec:	f7ff ff48 	bl	8001d80 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 8001ef0:	2000      	movs	r0, #0
 8001ef2:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001ef4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ef6:	f023 0303 	bic.w	r3, r3, #3
 8001efa:	f043 0301 	orr.w	r3, r3, #1
 8001efe:	6423      	str	r3, [r4, #64]	; 0x40
 8001f00:	e7e2      	b.n	8001ec8 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 8001f02:	2001      	movs	r0, #1
}
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	ffffeefd 	.word	0xffffeefd

08001f0c <HAL_ADC_ConfigChannel>:
{
 8001f0c:	b430      	push	{r4, r5}
 8001f0e:	b082      	sub	sp, #8
  __IO uint32_t counter = 0;
 8001f10:	2300      	movs	r3, #0
 8001f12:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001f14:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	f000 80d1 	beq.w	80020c0 <HAL_ADC_ConfigChannel+0x1b4>
 8001f1e:	2301      	movs	r3, #1
 8001f20:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001f24:	680b      	ldr	r3, [r1, #0]
 8001f26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001f2a:	bf18      	it	ne
 8001f2c:	2b09      	cmpne	r3, #9
 8001f2e:	d922      	bls.n	8001f76 <HAL_ADC_ConfigChannel+0x6a>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f30:	6805      	ldr	r5, [r0, #0]
 8001f32:	68ea      	ldr	r2, [r5, #12]
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001f3a:	3b1e      	subs	r3, #30
 8001f3c:	2407      	movs	r4, #7
 8001f3e:	fa04 f303 	lsl.w	r3, r4, r3
 8001f42:	ea22 0303 	bic.w	r3, r2, r3
 8001f46:	60eb      	str	r3, [r5, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f48:	680b      	ldr	r3, [r1, #0]
 8001f4a:	4a5e      	ldr	r2, [pc, #376]	; (80020c4 <HAL_ADC_ConfigChannel+0x1b8>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d00b      	beq.n	8001f68 <HAL_ADC_ConfigChannel+0x5c>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f50:	6805      	ldr	r5, [r0, #0]
 8001f52:	68ea      	ldr	r2, [r5, #12]
 8001f54:	688c      	ldr	r4, [r1, #8]
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001f5c:	3b1e      	subs	r3, #30
 8001f5e:	fa04 f303 	lsl.w	r3, r4, r3
 8001f62:	4313      	orrs	r3, r2
 8001f64:	60eb      	str	r3, [r5, #12]
 8001f66:	e01b      	b.n	8001fa0 <HAL_ADC_ConfigChannel+0x94>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001f68:	6802      	ldr	r2, [r0, #0]
 8001f6a:	68d3      	ldr	r3, [r2, #12]
 8001f6c:	688c      	ldr	r4, [r1, #8]
 8001f6e:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 8001f72:	60d3      	str	r3, [r2, #12]
 8001f74:	e014      	b.n	8001fa0 <HAL_ADC_ConfigChannel+0x94>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f76:	6805      	ldr	r5, [r0, #0]
 8001f78:	692a      	ldr	r2, [r5, #16]
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001f80:	2407      	movs	r4, #7
 8001f82:	fa04 f303 	lsl.w	r3, r4, r3
 8001f86:	ea22 0303 	bic.w	r3, r2, r3
 8001f8a:	612b      	str	r3, [r5, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f8c:	6805      	ldr	r5, [r0, #0]
 8001f8e:	692a      	ldr	r2, [r5, #16]
 8001f90:	688c      	ldr	r4, [r1, #8]
 8001f92:	880b      	ldrh	r3, [r1, #0]
 8001f94:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001f98:	fa04 f303 	lsl.w	r3, r4, r3
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	612b      	str	r3, [r5, #16]
  if (sConfig->Rank < 7)
 8001fa0:	684b      	ldr	r3, [r1, #4]
 8001fa2:	2b06      	cmp	r3, #6
 8001fa4:	d828      	bhi.n	8001ff8 <HAL_ADC_ConfigChannel+0xec>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001fa6:	6805      	ldr	r5, [r0, #0]
 8001fa8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001faa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001fae:	3b05      	subs	r3, #5
 8001fb0:	241f      	movs	r4, #31
 8001fb2:	fa04 f303 	lsl.w	r3, r4, r3
 8001fb6:	ea22 0303 	bic.w	r3, r2, r3
 8001fba:	636b      	str	r3, [r5, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001fbc:	6805      	ldr	r5, [r0, #0]
 8001fbe:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001fc0:	684b      	ldr	r3, [r1, #4]
 8001fc2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001fc6:	3b05      	subs	r3, #5
 8001fc8:	880c      	ldrh	r4, [r1, #0]
 8001fca:	fa04 f303 	lsl.w	r3, r4, r3
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	636b      	str	r3, [r5, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001fd2:	6802      	ldr	r2, [r0, #0]
 8001fd4:	4b3c      	ldr	r3, [pc, #240]	; (80020c8 <HAL_ADC_ConfigChannel+0x1bc>)
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d03e      	beq.n	8002058 <HAL_ADC_ConfigChannel+0x14c>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001fda:	6802      	ldr	r2, [r0, #0]
 8001fdc:	4b3a      	ldr	r3, [pc, #232]	; (80020c8 <HAL_ADC_ConfigChannel+0x1bc>)
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d044      	beq.n	800206c <HAL_ADC_ConfigChannel+0x160>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001fe2:	6802      	ldr	r2, [r0, #0]
 8001fe4:	4b38      	ldr	r3, [pc, #224]	; (80020c8 <HAL_ADC_ConfigChannel+0x1bc>)
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d049      	beq.n	800207e <HAL_ADC_ConfigChannel+0x172>
  __HAL_UNLOCK(hadc);
 8001fea:	2300      	movs	r3, #0
 8001fec:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8001ff0:	4618      	mov	r0, r3
}
 8001ff2:	b002      	add	sp, #8
 8001ff4:	bc30      	pop	{r4, r5}
 8001ff6:	4770      	bx	lr
  else if (sConfig->Rank < 13)
 8001ff8:	2b0c      	cmp	r3, #12
 8001ffa:	d816      	bhi.n	800202a <HAL_ADC_ConfigChannel+0x11e>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ffc:	6805      	ldr	r5, [r0, #0]
 8001ffe:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8002000:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002004:	3b23      	subs	r3, #35	; 0x23
 8002006:	241f      	movs	r4, #31
 8002008:	fa04 f303 	lsl.w	r3, r4, r3
 800200c:	ea22 0303 	bic.w	r3, r2, r3
 8002010:	632b      	str	r3, [r5, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002012:	6805      	ldr	r5, [r0, #0]
 8002014:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8002016:	684b      	ldr	r3, [r1, #4]
 8002018:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800201c:	3b23      	subs	r3, #35	; 0x23
 800201e:	880c      	ldrh	r4, [r1, #0]
 8002020:	fa04 f303 	lsl.w	r3, r4, r3
 8002024:	4313      	orrs	r3, r2
 8002026:	632b      	str	r3, [r5, #48]	; 0x30
 8002028:	e7d3      	b.n	8001fd2 <HAL_ADC_ConfigChannel+0xc6>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800202a:	6805      	ldr	r5, [r0, #0]
 800202c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800202e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002032:	3b41      	subs	r3, #65	; 0x41
 8002034:	241f      	movs	r4, #31
 8002036:	fa04 f303 	lsl.w	r3, r4, r3
 800203a:	ea22 0303 	bic.w	r3, r2, r3
 800203e:	62eb      	str	r3, [r5, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002040:	6805      	ldr	r5, [r0, #0]
 8002042:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002044:	684b      	ldr	r3, [r1, #4]
 8002046:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800204a:	3b41      	subs	r3, #65	; 0x41
 800204c:	880c      	ldrh	r4, [r1, #0]
 800204e:	fa04 f303 	lsl.w	r3, r4, r3
 8002052:	4313      	orrs	r3, r2
 8002054:	62eb      	str	r3, [r5, #44]	; 0x2c
 8002056:	e7bc      	b.n	8001fd2 <HAL_ADC_ConfigChannel+0xc6>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002058:	680b      	ldr	r3, [r1, #0]
 800205a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800205e:	d1bc      	bne.n	8001fda <HAL_ADC_ConfigChannel+0xce>
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002060:	4a1a      	ldr	r2, [pc, #104]	; (80020cc <HAL_ADC_ConfigChannel+0x1c0>)
 8002062:	6853      	ldr	r3, [r2, #4]
 8002064:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002068:	6053      	str	r3, [r2, #4]
 800206a:	e7b6      	b.n	8001fda <HAL_ADC_ConfigChannel+0xce>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800206c:	680b      	ldr	r3, [r1, #0]
 800206e:	2b12      	cmp	r3, #18
 8002070:	d1b7      	bne.n	8001fe2 <HAL_ADC_ConfigChannel+0xd6>
    ADC->CCR |= ADC_CCR_VBATE;
 8002072:	4a16      	ldr	r2, [pc, #88]	; (80020cc <HAL_ADC_ConfigChannel+0x1c0>)
 8002074:	6853      	ldr	r3, [r2, #4]
 8002076:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800207a:	6053      	str	r3, [r2, #4]
 800207c:	e7b1      	b.n	8001fe2 <HAL_ADC_ConfigChannel+0xd6>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800207e:	680b      	ldr	r3, [r1, #0]
 8002080:	4a10      	ldr	r2, [pc, #64]	; (80020c4 <HAL_ADC_ConfigChannel+0x1b8>)
 8002082:	2b11      	cmp	r3, #17
 8002084:	bf18      	it	ne
 8002086:	4293      	cmpne	r3, r2
 8002088:	d1af      	bne.n	8001fea <HAL_ADC_ConfigChannel+0xde>
    ADC->CCR |= ADC_CCR_TSVREFE;
 800208a:	4a10      	ldr	r2, [pc, #64]	; (80020cc <HAL_ADC_ConfigChannel+0x1c0>)
 800208c:	6853      	ldr	r3, [r2, #4]
 800208e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002092:	6053      	str	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002094:	680a      	ldr	r2, [r1, #0]
 8002096:	4b0b      	ldr	r3, [pc, #44]	; (80020c4 <HAL_ADC_ConfigChannel+0x1b8>)
 8002098:	429a      	cmp	r2, r3
 800209a:	d1a6      	bne.n	8001fea <HAL_ADC_ConfigChannel+0xde>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800209c:	4b0c      	ldr	r3, [pc, #48]	; (80020d0 <HAL_ADC_ConfigChannel+0x1c4>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a0c      	ldr	r2, [pc, #48]	; (80020d4 <HAL_ADC_ConfigChannel+0x1c8>)
 80020a2:	fba2 2303 	umull	r2, r3, r2, r3
 80020a6:	0c9b      	lsrs	r3, r3, #18
 80020a8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80020ac:	005a      	lsls	r2, r3, #1
 80020ae:	9201      	str	r2, [sp, #4]
      while(counter != 0)
 80020b0:	e002      	b.n	80020b8 <HAL_ADC_ConfigChannel+0x1ac>
        counter--;
 80020b2:	9b01      	ldr	r3, [sp, #4]
 80020b4:	3b01      	subs	r3, #1
 80020b6:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 80020b8:	9b01      	ldr	r3, [sp, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1f9      	bne.n	80020b2 <HAL_ADC_ConfigChannel+0x1a6>
 80020be:	e794      	b.n	8001fea <HAL_ADC_ConfigChannel+0xde>
  __HAL_LOCK(hadc);
 80020c0:	2002      	movs	r0, #2
 80020c2:	e796      	b.n	8001ff2 <HAL_ADC_ConfigChannel+0xe6>
 80020c4:	10000012 	.word	0x10000012
 80020c8:	40012000 	.word	0x40012000
 80020cc:	40012300 	.word	0x40012300
 80020d0:	200001cc 	.word	0x200001cc
 80020d4:	431bde83 	.word	0x431bde83

080020d8 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80020d8:	2800      	cmp	r0, #0
 80020da:	f000 80a1 	beq.w	8002220 <HAL_CAN_Init+0x148>
{
 80020de:	b538      	push	{r3, r4, r5, lr}
 80020e0:	4604      	mov	r4, r0
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80020e2:	f890 3020 	ldrb.w	r3, [r0, #32]
 80020e6:	b1d3      	cbz	r3, 800211e <HAL_CAN_Init+0x46>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80020e8:	6822      	ldr	r2, [r4, #0]
 80020ea:	6813      	ldr	r3, [r2, #0]
 80020ec:	f023 0302 	bic.w	r3, r3, #2
 80020f0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020f2:	f7ff fe2b 	bl	8001d4c <HAL_GetTick>
 80020f6:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80020f8:	6823      	ldr	r3, [r4, #0]
 80020fa:	685a      	ldr	r2, [r3, #4]
 80020fc:	f012 0f02 	tst.w	r2, #2
 8002100:	d010      	beq.n	8002124 <HAL_CAN_Init+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002102:	f7ff fe23 	bl	8001d4c <HAL_GetTick>
 8002106:	1b40      	subs	r0, r0, r5
 8002108:	280a      	cmp	r0, #10
 800210a:	d9f5      	bls.n	80020f8 <HAL_CAN_Init+0x20>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800210c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800210e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002112:	6263      	str	r3, [r4, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002114:	2305      	movs	r3, #5
 8002116:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 800211a:	2001      	movs	r0, #1
  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 800211c:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 800211e:	f7ff fc71 	bl	8001a04 <HAL_CAN_MspInit>
 8002122:	e7e1      	b.n	80020e8 <HAL_CAN_Init+0x10>
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	f042 0201 	orr.w	r2, r2, #1
 800212a:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800212c:	f7ff fe0e 	bl	8001d4c <HAL_GetTick>
 8002130:	4605      	mov	r5, r0
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002132:	6823      	ldr	r3, [r4, #0]
 8002134:	685a      	ldr	r2, [r3, #4]
 8002136:	f012 0f01 	tst.w	r2, #1
 800213a:	d10d      	bne.n	8002158 <HAL_CAN_Init+0x80>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800213c:	f7ff fe06 	bl	8001d4c <HAL_GetTick>
 8002140:	1b40      	subs	r0, r0, r5
 8002142:	280a      	cmp	r0, #10
 8002144:	d9f5      	bls.n	8002132 <HAL_CAN_Init+0x5a>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002146:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002148:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800214c:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 800214e:	2305      	movs	r3, #5
 8002150:	f884 3020 	strb.w	r3, [r4, #32]
      return HAL_ERROR;
 8002154:	2001      	movs	r0, #1
 8002156:	e7e1      	b.n	800211c <HAL_CAN_Init+0x44>
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002158:	7e22      	ldrb	r2, [r4, #24]
 800215a:	2a01      	cmp	r2, #1
 800215c:	d03d      	beq.n	80021da <HAL_CAN_Init+0x102>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002164:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8002166:	7e63      	ldrb	r3, [r4, #25]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d03b      	beq.n	80021e4 <HAL_CAN_Init+0x10c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800216c:	6822      	ldr	r2, [r4, #0]
 800216e:	6813      	ldr	r3, [r2, #0]
 8002170:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002174:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002176:	7ea3      	ldrb	r3, [r4, #26]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d039      	beq.n	80021f0 <HAL_CAN_Init+0x118>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800217c:	6822      	ldr	r2, [r4, #0]
 800217e:	6813      	ldr	r3, [r2, #0]
 8002180:	f023 0320 	bic.w	r3, r3, #32
 8002184:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002186:	7ee3      	ldrb	r3, [r4, #27]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d037      	beq.n	80021fc <HAL_CAN_Init+0x124>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800218c:	6822      	ldr	r2, [r4, #0]
 800218e:	6813      	ldr	r3, [r2, #0]
 8002190:	f043 0310 	orr.w	r3, r3, #16
 8002194:	6013      	str	r3, [r2, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002196:	7f23      	ldrb	r3, [r4, #28]
 8002198:	2b01      	cmp	r3, #1
 800219a:	d035      	beq.n	8002208 <HAL_CAN_Init+0x130>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800219c:	6822      	ldr	r2, [r4, #0]
 800219e:	6813      	ldr	r3, [r2, #0]
 80021a0:	f023 0308 	bic.w	r3, r3, #8
 80021a4:	6013      	str	r3, [r2, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80021a6:	7f63      	ldrb	r3, [r4, #29]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d033      	beq.n	8002214 <HAL_CAN_Init+0x13c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80021ac:	6822      	ldr	r2, [r4, #0]
 80021ae:	6813      	ldr	r3, [r2, #0]
 80021b0:	f023 0304 	bic.w	r3, r3, #4
 80021b4:	6013      	str	r3, [r2, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80021b6:	68a3      	ldr	r3, [r4, #8]
 80021b8:	68e2      	ldr	r2, [r4, #12]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	6922      	ldr	r2, [r4, #16]
 80021be:	4313      	orrs	r3, r2
 80021c0:	6962      	ldr	r2, [r4, #20]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	6862      	ldr	r2, [r4, #4]
 80021c6:	3a01      	subs	r2, #1
 80021c8:	6821      	ldr	r1, [r4, #0]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	61cb      	str	r3, [r1, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80021ce:	2000      	movs	r0, #0
 80021d0:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 80021d2:	2301      	movs	r3, #1
 80021d4:	f884 3020 	strb.w	r3, [r4, #32]
  return HAL_OK;
 80021d8:	e7a0      	b.n	800211c <HAL_CAN_Init+0x44>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	e7c0      	b.n	8002166 <HAL_CAN_Init+0x8e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80021e4:	6822      	ldr	r2, [r4, #0]
 80021e6:	6813      	ldr	r3, [r2, #0]
 80021e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021ec:	6013      	str	r3, [r2, #0]
 80021ee:	e7c2      	b.n	8002176 <HAL_CAN_Init+0x9e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80021f0:	6822      	ldr	r2, [r4, #0]
 80021f2:	6813      	ldr	r3, [r2, #0]
 80021f4:	f043 0320 	orr.w	r3, r3, #32
 80021f8:	6013      	str	r3, [r2, #0]
 80021fa:	e7c4      	b.n	8002186 <HAL_CAN_Init+0xae>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80021fc:	6822      	ldr	r2, [r4, #0]
 80021fe:	6813      	ldr	r3, [r2, #0]
 8002200:	f023 0310 	bic.w	r3, r3, #16
 8002204:	6013      	str	r3, [r2, #0]
 8002206:	e7c6      	b.n	8002196 <HAL_CAN_Init+0xbe>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002208:	6822      	ldr	r2, [r4, #0]
 800220a:	6813      	ldr	r3, [r2, #0]
 800220c:	f043 0308 	orr.w	r3, r3, #8
 8002210:	6013      	str	r3, [r2, #0]
 8002212:	e7c8      	b.n	80021a6 <HAL_CAN_Init+0xce>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002214:	6822      	ldr	r2, [r4, #0]
 8002216:	6813      	ldr	r3, [r2, #0]
 8002218:	f043 0304 	orr.w	r3, r3, #4
 800221c:	6013      	str	r3, [r2, #0]
 800221e:	e7ca      	b.n	80021b6 <HAL_CAN_Init+0xde>
    return HAL_ERROR;
 8002220:	2001      	movs	r0, #1
}
 8002222:	4770      	bx	lr

08002224 <HAL_CAN_ConfigFilter>:
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002224:	6803      	ldr	r3, [r0, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002226:	f890 2020 	ldrb.w	r2, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 800222a:	3a01      	subs	r2, #1
 800222c:	b2d2      	uxtb	r2, r2
 800222e:	2a01      	cmp	r2, #1
 8002230:	d905      	bls.n	800223e <HAL_CAN_ConfigFilter+0x1a>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002232:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002234:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002238:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800223a:	2001      	movs	r0, #1
  }
}
 800223c:	4770      	bx	lr
{
 800223e:	b470      	push	{r4, r5, r6}
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002240:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002244:	f042 0201 	orr.w	r2, r2, #1
 8002248:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800224c:	694a      	ldr	r2, [r1, #20]
 800224e:	f002 021f 	and.w	r2, r2, #31
 8002252:	2001      	movs	r0, #1
 8002254:	fa00 f202 	lsl.w	r2, r0, r2
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002258:	f8d3 421c 	ldr.w	r4, [r3, #540]	; 0x21c
 800225c:	43d0      	mvns	r0, r2
 800225e:	4004      	ands	r4, r0
 8002260:	f8c3 421c 	str.w	r4, [r3, #540]	; 0x21c
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002264:	69cc      	ldr	r4, [r1, #28]
 8002266:	b9ac      	cbnz	r4, 8002294 <HAL_CAN_ConfigFilter+0x70>
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002268:	f8d3 420c 	ldr.w	r4, [r3, #524]	; 0x20c
 800226c:	4004      	ands	r4, r0
 800226e:	f8c3 420c 	str.w	r4, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002272:	68ce      	ldr	r6, [r1, #12]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002274:	888d      	ldrh	r5, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002276:	694c      	ldr	r4, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002278:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800227c:	3448      	adds	r4, #72	; 0x48
 800227e:	f843 5034 	str.w	r5, [r3, r4, lsl #3]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002282:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002284:	880d      	ldrh	r5, [r1, #0]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002286:	694c      	ldr	r4, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002288:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800228c:	3448      	adds	r4, #72	; 0x48
 800228e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8002292:	6065      	str	r5, [r4, #4]
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002294:	69cc      	ldr	r4, [r1, #28]
 8002296:	2c01      	cmp	r4, #1
 8002298:	d019      	beq.n	80022ce <HAL_CAN_ConfigFilter+0xaa>
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800229a:	698c      	ldr	r4, [r1, #24]
 800229c:	bb74      	cbnz	r4, 80022fc <HAL_CAN_ConfigFilter+0xd8>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800229e:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 80022a2:	4004      	ands	r4, r0
 80022a4:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80022a8:	690c      	ldr	r4, [r1, #16]
 80022aa:	bb6c      	cbnz	r4, 8002308 <HAL_CAN_ConfigFilter+0xe4>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80022ac:	f8d3 4214 	ldr.w	r4, [r3, #532]	; 0x214
 80022b0:	4020      	ands	r0, r4
 80022b2:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80022b6:	6a09      	ldr	r1, [r1, #32]
 80022b8:	2901      	cmp	r1, #1
 80022ba:	d02b      	beq.n	8002314 <HAL_CAN_ConfigFilter+0xf0>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80022bc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80022c0:	f022 0201 	bic.w	r2, r2, #1
 80022c4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    return HAL_OK;
 80022c8:	2000      	movs	r0, #0
}
 80022ca:	bc70      	pop	{r4, r5, r6}
 80022cc:	4770      	bx	lr
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80022ce:	f8d3 420c 	ldr.w	r4, [r3, #524]	; 0x20c
 80022d2:	4314      	orrs	r4, r2
 80022d4:	f8c3 420c 	str.w	r4, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80022d8:	680e      	ldr	r6, [r1, #0]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80022da:	888d      	ldrh	r5, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80022dc:	694c      	ldr	r4, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80022de:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80022e2:	3448      	adds	r4, #72	; 0x48
 80022e4:	f843 5034 	str.w	r5, [r3, r4, lsl #3]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80022e8:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80022ea:	898d      	ldrh	r5, [r1, #12]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80022ec:	694c      	ldr	r4, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80022ee:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80022f2:	3448      	adds	r4, #72	; 0x48
 80022f4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80022f8:	6065      	str	r5, [r4, #4]
 80022fa:	e7ce      	b.n	800229a <HAL_CAN_ConfigFilter+0x76>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80022fc:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8002300:	4314      	orrs	r4, r2
 8002302:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
 8002306:	e7cf      	b.n	80022a8 <HAL_CAN_ConfigFilter+0x84>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002308:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 800230c:	4310      	orrs	r0, r2
 800230e:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
 8002312:	e7d0      	b.n	80022b6 <HAL_CAN_ConfigFilter+0x92>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002314:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
 8002318:	430a      	orrs	r2, r1
 800231a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 800231e:	e7cd      	b.n	80022bc <HAL_CAN_ConfigFilter+0x98>

08002320 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002320:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002322:	f890 3020 	ldrb.w	r3, [r0, #32]
 8002326:	b2db      	uxtb	r3, r3
 8002328:	2b01      	cmp	r3, #1
 800232a:	d005      	beq.n	8002338 <HAL_CAN_Start+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800232c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800232e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002332:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8002334:	2001      	movs	r0, #1
  }
}
 8002336:	bd38      	pop	{r3, r4, r5, pc}
 8002338:	4604      	mov	r4, r0
    hcan->State = HAL_CAN_STATE_LISTENING;
 800233a:	2302      	movs	r3, #2
 800233c:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002340:	6802      	ldr	r2, [r0, #0]
 8002342:	6813      	ldr	r3, [r2, #0]
 8002344:	f023 0301 	bic.w	r3, r3, #1
 8002348:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800234a:	f7ff fcff 	bl	8001d4c <HAL_GetTick>
 800234e:	4605      	mov	r5, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002350:	6823      	ldr	r3, [r4, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f013 0f01 	tst.w	r3, #1
 8002358:	d00d      	beq.n	8002376 <HAL_CAN_Start+0x56>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800235a:	f7ff fcf7 	bl	8001d4c <HAL_GetTick>
 800235e:	1b40      	subs	r0, r0, r5
 8002360:	280a      	cmp	r0, #10
 8002362:	d9f5      	bls.n	8002350 <HAL_CAN_Start+0x30>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002364:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002366:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800236a:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 800236c:	2305      	movs	r3, #5
 800236e:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 8002372:	2001      	movs	r0, #1
 8002374:	e7df      	b.n	8002336 <HAL_CAN_Start+0x16>
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002376:	2000      	movs	r0, #0
 8002378:	6260      	str	r0, [r4, #36]	; 0x24
    return HAL_OK;
 800237a:	e7dc      	b.n	8002336 <HAL_CAN_Start+0x16>

0800237c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800237c:	b470      	push	{r4, r5, r6}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800237e:	f890 4020 	ldrb.w	r4, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002382:	6805      	ldr	r5, [r0, #0]
 8002384:	68ad      	ldr	r5, [r5, #8]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002386:	3c01      	subs	r4, #1
 8002388:	b2e4      	uxtb	r4, r4
 800238a:	2c01      	cmp	r4, #1
 800238c:	d906      	bls.n	800239c <HAL_CAN_AddTxMessage+0x20>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800238e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002390:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002394:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8002396:	2001      	movs	r0, #1
  }
}
 8002398:	bc70      	pop	{r4, r5, r6}
 800239a:	4770      	bx	lr
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800239c:	f015 5fe0 	tst.w	r5, #469762048	; 0x1c000000
 80023a0:	d05b      	beq.n	800245a <HAL_CAN_AddTxMessage+0xde>
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80023a2:	f3c5 6501 	ubfx	r5, r5, #24, #2
      if (transmitmailbox > 2U)
 80023a6:	2d02      	cmp	r5, #2
 80023a8:	d83e      	bhi.n	8002428 <HAL_CAN_AddTxMessage+0xac>
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80023aa:	2401      	movs	r4, #1
 80023ac:	40ac      	lsls	r4, r5
 80023ae:	601c      	str	r4, [r3, #0]
      if (pHeader->IDE == CAN_ID_STD)
 80023b0:	688b      	ldr	r3, [r1, #8]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d13e      	bne.n	8002434 <HAL_CAN_AddTxMessage+0xb8>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80023b6:	680e      	ldr	r6, [r1, #0]
                                                           pHeader->RTR);
 80023b8:	68cb      	ldr	r3, [r1, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80023ba:	6804      	ldr	r4, [r0, #0]
 80023bc:	ea43 5646 	orr.w	r6, r3, r6, lsl #21
 80023c0:	f105 0318 	add.w	r3, r5, #24
 80023c4:	011b      	lsls	r3, r3, #4
 80023c6:	50e6      	str	r6, [r4, r3]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80023c8:	6803      	ldr	r3, [r0, #0]
 80023ca:	690c      	ldr	r4, [r1, #16]
 80023cc:	f105 0618 	add.w	r6, r5, #24
 80023d0:	eb03 1306 	add.w	r3, r3, r6, lsl #4
 80023d4:	605c      	str	r4, [r3, #4]
      if (pHeader->TransmitGlobalTime == ENABLE)
 80023d6:	7d0b      	ldrb	r3, [r1, #20]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d036      	beq.n	800244a <HAL_CAN_AddTxMessage+0xce>
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80023dc:	79d1      	ldrb	r1, [r2, #7]
 80023de:	7993      	ldrb	r3, [r2, #6]
 80023e0:	041b      	lsls	r3, r3, #16
 80023e2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80023e6:	7951      	ldrb	r1, [r2, #5]
 80023e8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80023ec:	7914      	ldrb	r4, [r2, #4]
 80023ee:	6801      	ldr	r1, [r0, #0]
 80023f0:	4323      	orrs	r3, r4
 80023f2:	012c      	lsls	r4, r5, #4
 80023f4:	4421      	add	r1, r4
 80023f6:	f8c1 318c 	str.w	r3, [r1, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80023fa:	78d1      	ldrb	r1, [r2, #3]
 80023fc:	7893      	ldrb	r3, [r2, #2]
 80023fe:	041b      	lsls	r3, r3, #16
 8002400:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002404:	7851      	ldrb	r1, [r2, #1]
 8002406:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800240a:	7811      	ldrb	r1, [r2, #0]
 800240c:	6802      	ldr	r2, [r0, #0]
 800240e:	430b      	orrs	r3, r1
 8002410:	4422      	add	r2, r4
 8002412:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002416:	6802      	ldr	r2, [r0, #0]
 8002418:	3518      	adds	r5, #24
 800241a:	012d      	lsls	r5, r5, #4
 800241c:	5953      	ldr	r3, [r2, r5]
 800241e:	f043 0301 	orr.w	r3, r3, #1
 8002422:	5153      	str	r3, [r2, r5]
      return HAL_OK;
 8002424:	2000      	movs	r0, #0
 8002426:	e7b7      	b.n	8002398 <HAL_CAN_AddTxMessage+0x1c>
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002428:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800242a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800242e:	6243      	str	r3, [r0, #36]	; 0x24
        return HAL_ERROR;
 8002430:	2001      	movs	r0, #1
 8002432:	e7b1      	b.n	8002398 <HAL_CAN_AddTxMessage+0x1c>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002434:	684c      	ldr	r4, [r1, #4]
 8002436:	ea43 03c4 	orr.w	r3, r3, r4, lsl #3
                                                           pHeader->RTR);
 800243a:	68cc      	ldr	r4, [r1, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800243c:	6806      	ldr	r6, [r0, #0]
                                                           pHeader->IDE |
 800243e:	4323      	orrs	r3, r4
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002440:	f105 0418 	add.w	r4, r5, #24
 8002444:	0124      	lsls	r4, r4, #4
 8002446:	5133      	str	r3, [r6, r4]
 8002448:	e7be      	b.n	80023c8 <HAL_CAN_AddTxMessage+0x4c>
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800244a:	6803      	ldr	r3, [r0, #0]
 800244c:	eb03 1306 	add.w	r3, r3, r6, lsl #4
 8002450:	6859      	ldr	r1, [r3, #4]
 8002452:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002456:	6059      	str	r1, [r3, #4]
 8002458:	e7c0      	b.n	80023dc <HAL_CAN_AddTxMessage+0x60>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800245a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800245c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002460:	6243      	str	r3, [r0, #36]	; 0x24
      return HAL_ERROR;
 8002462:	2001      	movs	r0, #1
 8002464:	e798      	b.n	8002398 <HAL_CAN_AddTxMessage+0x1c>

08002466 <HAL_CAN_IsTxMessagePending>:
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
  uint32_t status = 0U;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002466:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 800246a:	3b01      	subs	r3, #1
 800246c:	b2db      	uxtb	r3, r3
 800246e:	2b01      	cmp	r3, #1
 8002470:	d901      	bls.n	8002476 <HAL_CAN_IsTxMessagePending+0x10>
  uint32_t status = 0U;
 8002472:	2000      	movs	r0, #0
 8002474:	4770      	bx	lr
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8002476:	6803      	ldr	r3, [r0, #0]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	0689      	lsls	r1, r1, #26
 800247c:	ea31 0303 	bics.w	r3, r1, r3
 8002480:	d001      	beq.n	8002486 <HAL_CAN_IsTxMessagePending+0x20>
    {
      status = 1U;
 8002482:	2001      	movs	r0, #1
    }
  }

  /* Return status */
  return status;
}
 8002484:	4770      	bx	lr
  uint32_t status = 0U;
 8002486:	2000      	movs	r0, #0
 8002488:	4770      	bx	lr

0800248a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800248a:	b430      	push	{r4, r5}
  HAL_CAN_StateTypeDef state = hcan->State;
 800248c:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002490:	3c01      	subs	r4, #1
 8002492:	b2e4      	uxtb	r4, r4
 8002494:	2c01      	cmp	r4, #1
 8002496:	d906      	bls.n	80024a6 <HAL_CAN_GetRxMessage+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002498:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800249a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800249e:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80024a0:	2001      	movs	r0, #1
  }
}
 80024a2:	bc30      	pop	{r4, r5}
 80024a4:	4770      	bx	lr
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80024a6:	2900      	cmp	r1, #0
 80024a8:	d16f      	bne.n	800258a <HAL_CAN_GetRxMessage+0x100>
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80024aa:	6804      	ldr	r4, [r0, #0]
 80024ac:	68e4      	ldr	r4, [r4, #12]
 80024ae:	f014 0f03 	tst.w	r4, #3
 80024b2:	d064      	beq.n	800257e <HAL_CAN_GetRxMessage+0xf4>
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80024b4:	6805      	ldr	r5, [r0, #0]
 80024b6:	f101 041b 	add.w	r4, r1, #27
 80024ba:	0124      	lsls	r4, r4, #4
 80024bc:	592c      	ldr	r4, [r5, r4]
 80024be:	f004 0404 	and.w	r4, r4, #4
 80024c2:	6094      	str	r4, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80024c4:	2c00      	cmp	r4, #0
 80024c6:	d16b      	bne.n	80025a0 <HAL_CAN_GetRxMessage+0x116>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80024c8:	6805      	ldr	r5, [r0, #0]
 80024ca:	f101 041b 	add.w	r4, r1, #27
 80024ce:	0124      	lsls	r4, r4, #4
 80024d0:	592c      	ldr	r4, [r5, r4]
 80024d2:	0d64      	lsrs	r4, r4, #21
 80024d4:	6014      	str	r4, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80024d6:	6805      	ldr	r5, [r0, #0]
 80024d8:	f101 041b 	add.w	r4, r1, #27
 80024dc:	0124      	lsls	r4, r4, #4
 80024de:	592d      	ldr	r5, [r5, r4]
 80024e0:	f005 0502 	and.w	r5, r5, #2
 80024e4:	60d5      	str	r5, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80024e6:	6805      	ldr	r5, [r0, #0]
 80024e8:	4425      	add	r5, r4
 80024ea:	686d      	ldr	r5, [r5, #4]
 80024ec:	f005 050f 	and.w	r5, r5, #15
 80024f0:	6115      	str	r5, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80024f2:	6805      	ldr	r5, [r0, #0]
 80024f4:	4425      	add	r5, r4
 80024f6:	686d      	ldr	r5, [r5, #4]
 80024f8:	f3c5 2507 	ubfx	r5, r5, #8, #8
 80024fc:	6195      	str	r5, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80024fe:	6805      	ldr	r5, [r0, #0]
 8002500:	442c      	add	r4, r5
 8002502:	6864      	ldr	r4, [r4, #4]
 8002504:	0c24      	lsrs	r4, r4, #16
 8002506:	6154      	str	r4, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002508:	6804      	ldr	r4, [r0, #0]
 800250a:	010a      	lsls	r2, r1, #4
 800250c:	4414      	add	r4, r2
 800250e:	f8d4 41b8 	ldr.w	r4, [r4, #440]	; 0x1b8
 8002512:	701c      	strb	r4, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002514:	6804      	ldr	r4, [r0, #0]
 8002516:	4414      	add	r4, r2
 8002518:	f8d4 41b8 	ldr.w	r4, [r4, #440]	; 0x1b8
 800251c:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8002520:	705c      	strb	r4, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002522:	6804      	ldr	r4, [r0, #0]
 8002524:	4414      	add	r4, r2
 8002526:	f8d4 41b8 	ldr.w	r4, [r4, #440]	; 0x1b8
 800252a:	f3c4 4407 	ubfx	r4, r4, #16, #8
 800252e:	709c      	strb	r4, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002530:	6804      	ldr	r4, [r0, #0]
 8002532:	4414      	add	r4, r2
 8002534:	f8d4 41b8 	ldr.w	r4, [r4, #440]	; 0x1b8
 8002538:	0e24      	lsrs	r4, r4, #24
 800253a:	70dc      	strb	r4, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800253c:	6804      	ldr	r4, [r0, #0]
 800253e:	4414      	add	r4, r2
 8002540:	f8d4 41bc 	ldr.w	r4, [r4, #444]	; 0x1bc
 8002544:	711c      	strb	r4, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002546:	6804      	ldr	r4, [r0, #0]
 8002548:	4414      	add	r4, r2
 800254a:	f8d4 41bc 	ldr.w	r4, [r4, #444]	; 0x1bc
 800254e:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8002552:	715c      	strb	r4, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002554:	6804      	ldr	r4, [r0, #0]
 8002556:	4414      	add	r4, r2
 8002558:	f8d4 41bc 	ldr.w	r4, [r4, #444]	; 0x1bc
 800255c:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8002560:	719c      	strb	r4, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002562:	6804      	ldr	r4, [r0, #0]
 8002564:	4422      	add	r2, r4
 8002566:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 800256a:	0e12      	lsrs	r2, r2, #24
 800256c:	71da      	strb	r2, [r3, #7]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800256e:	b9f9      	cbnz	r1, 80025b0 <HAL_CAN_GetRxMessage+0x126>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002570:	6802      	ldr	r2, [r0, #0]
 8002572:	68d3      	ldr	r3, [r2, #12]
 8002574:	f043 0320 	orr.w	r3, r3, #32
 8002578:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 800257a:	2000      	movs	r0, #0
 800257c:	e791      	b.n	80024a2 <HAL_CAN_GetRxMessage+0x18>
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800257e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002580:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002584:	6243      	str	r3, [r0, #36]	; 0x24
        return HAL_ERROR;
 8002586:	2001      	movs	r0, #1
 8002588:	e78b      	b.n	80024a2 <HAL_CAN_GetRxMessage+0x18>
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800258a:	6804      	ldr	r4, [r0, #0]
 800258c:	6924      	ldr	r4, [r4, #16]
 800258e:	f014 0f03 	tst.w	r4, #3
 8002592:	d18f      	bne.n	80024b4 <HAL_CAN_GetRxMessage+0x2a>
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002594:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002596:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800259a:	6243      	str	r3, [r0, #36]	; 0x24
        return HAL_ERROR;
 800259c:	2001      	movs	r0, #1
 800259e:	e780      	b.n	80024a2 <HAL_CAN_GetRxMessage+0x18>
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80025a0:	6805      	ldr	r5, [r0, #0]
 80025a2:	f101 041b 	add.w	r4, r1, #27
 80025a6:	0124      	lsls	r4, r4, #4
 80025a8:	592c      	ldr	r4, [r5, r4]
 80025aa:	08e4      	lsrs	r4, r4, #3
 80025ac:	6054      	str	r4, [r2, #4]
 80025ae:	e792      	b.n	80024d6 <HAL_CAN_GetRxMessage+0x4c>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80025b0:	6802      	ldr	r2, [r0, #0]
 80025b2:	6913      	ldr	r3, [r2, #16]
 80025b4:	f043 0320 	orr.w	r3, r3, #32
 80025b8:	6113      	str	r3, [r2, #16]
    return HAL_OK;
 80025ba:	2000      	movs	r0, #0
 80025bc:	e771      	b.n	80024a2 <HAL_CAN_GetRxMessage+0x18>

080025be <HAL_CAN_GetRxFifoFillLevel>:
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
  uint32_t filllevel = 0U;
  HAL_CAN_StateTypeDef state = hcan->State;
 80025be:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80025c2:	3b01      	subs	r3, #1
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d901      	bls.n	80025ce <HAL_CAN_GetRxFifoFillLevel+0x10>
  uint32_t filllevel = 0U;
 80025ca:	2000      	movs	r0, #0
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
}
 80025cc:	4770      	bx	lr
    if (RxFifo == CAN_RX_FIFO0)
 80025ce:	b121      	cbz	r1, 80025da <HAL_CAN_GetRxFifoFillLevel+0x1c>
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 80025d0:	6803      	ldr	r3, [r0, #0]
 80025d2:	6918      	ldr	r0, [r3, #16]
 80025d4:	f000 0003 	and.w	r0, r0, #3
 80025d8:	4770      	bx	lr
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80025da:	6803      	ldr	r3, [r0, #0]
 80025dc:	68d8      	ldr	r0, [r3, #12]
 80025de:	f000 0003 	and.w	r0, r0, #3
 80025e2:	4770      	bx	lr

080025e4 <HAL_CAN_TxMailbox0CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80025e4:	4770      	bx	lr

080025e6 <HAL_CAN_TxMailbox1CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80025e6:	4770      	bx	lr

080025e8 <HAL_CAN_TxMailbox2CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80025e8:	4770      	bx	lr

080025ea <HAL_CAN_TxMailbox0AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80025ea:	4770      	bx	lr

080025ec <HAL_CAN_TxMailbox1AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80025ec:	4770      	bx	lr

080025ee <HAL_CAN_TxMailbox2AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80025ee:	4770      	bx	lr

080025f0 <HAL_CAN_RxFifo0MsgPendingCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80025f0:	4770      	bx	lr

080025f2 <HAL_CAN_RxFifo0FullCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80025f2:	4770      	bx	lr

080025f4 <HAL_CAN_RxFifo1MsgPendingCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80025f4:	4770      	bx	lr

080025f6 <HAL_CAN_RxFifo1FullCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80025f6:	4770      	bx	lr

080025f8 <HAL_CAN_SleepCallback>:
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80025f8:	4770      	bx	lr

080025fa <HAL_CAN_WakeUpFromRxMsgCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80025fa:	4770      	bx	lr

080025fc <HAL_CAN_ErrorCallback>:
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80025fc:	4770      	bx	lr

080025fe <HAL_CAN_IRQHandler>:
{
 80025fe:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002602:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002604:	6803      	ldr	r3, [r0, #0]
 8002606:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002608:	685f      	ldr	r7, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800260a:	689e      	ldr	r6, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800260c:	f8d3 900c 	ldr.w	r9, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002610:	f8d3 8010 	ldr.w	r8, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002614:	f8d3 a018 	ldr.w	sl, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002618:	f014 0f01 	tst.w	r4, #1
 800261c:	d05a      	beq.n	80026d4 <HAL_CAN_IRQHandler+0xd6>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800261e:	f016 0f01 	tst.w	r6, #1
 8002622:	d017      	beq.n	8002654 <HAL_CAN_IRQHandler+0x56>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002624:	2201      	movs	r2, #1
 8002626:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002628:	f016 0f02 	tst.w	r6, #2
 800262c:	d108      	bne.n	8002640 <HAL_CAN_IRQHandler+0x42>
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800262e:	f016 0f04 	tst.w	r6, #4
 8002632:	d130      	bne.n	8002696 <HAL_CAN_IRQHandler+0x98>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002634:	f016 0f08 	tst.w	r6, #8
 8002638:	d007      	beq.n	800264a <HAL_CAN_IRQHandler+0x4c>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800263a:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
 800263e:	e00b      	b.n	8002658 <HAL_CAN_IRQHandler+0x5a>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002640:	f7ff ffd0 	bl	80025e4 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002644:	f04f 0b00 	mov.w	fp, #0
 8002648:	e006      	b.n	8002658 <HAL_CAN_IRQHandler+0x5a>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800264a:	f7ff ffce 	bl	80025ea <HAL_CAN_TxMailbox0AbortCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800264e:	f04f 0b00 	mov.w	fp, #0
 8002652:	e001      	b.n	8002658 <HAL_CAN_IRQHandler+0x5a>
 8002654:	f04f 0b00 	mov.w	fp, #0
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002658:	f416 7f80 	tst.w	r6, #256	; 0x100
 800265c:	d00b      	beq.n	8002676 <HAL_CAN_IRQHandler+0x78>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800265e:	682b      	ldr	r3, [r5, #0]
 8002660:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002664:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002666:	f416 7f00 	tst.w	r6, #512	; 0x200
 800266a:	d117      	bne.n	800269c <HAL_CAN_IRQHandler+0x9e>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800266c:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8002670:	d018      	beq.n	80026a4 <HAL_CAN_IRQHandler+0xa6>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002672:	f44b 5b00 	orr.w	fp, fp, #8192	; 0x2000
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002676:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 800267a:	d02d      	beq.n	80026d8 <HAL_CAN_IRQHandler+0xda>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800267c:	682b      	ldr	r3, [r5, #0]
 800267e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002682:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002684:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8002688:	d116      	bne.n	80026b8 <HAL_CAN_IRQHandler+0xba>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800268a:	f416 2f80 	tst.w	r6, #262144	; 0x40000
 800268e:	d017      	beq.n	80026c0 <HAL_CAN_IRQHandler+0xc2>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002690:	f44b 4b00 	orr.w	fp, fp, #32768	; 0x8000
 8002694:	e020      	b.n	80026d8 <HAL_CAN_IRQHandler+0xda>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002696:	f44f 6b00 	mov.w	fp, #2048	; 0x800
 800269a:	e7dd      	b.n	8002658 <HAL_CAN_IRQHandler+0x5a>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800269c:	4628      	mov	r0, r5
 800269e:	f7ff ffa2 	bl	80025e6 <HAL_CAN_TxMailbox1CompleteCallback>
 80026a2:	e7e8      	b.n	8002676 <HAL_CAN_IRQHandler+0x78>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80026a4:	f416 6f00 	tst.w	r6, #2048	; 0x800
 80026a8:	d002      	beq.n	80026b0 <HAL_CAN_IRQHandler+0xb2>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80026aa:	f44b 4b80 	orr.w	fp, fp, #16384	; 0x4000
 80026ae:	e7e2      	b.n	8002676 <HAL_CAN_IRQHandler+0x78>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80026b0:	4628      	mov	r0, r5
 80026b2:	f7ff ff9b 	bl	80025ec <HAL_CAN_TxMailbox1AbortCallback>
 80026b6:	e7de      	b.n	8002676 <HAL_CAN_IRQHandler+0x78>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80026b8:	4628      	mov	r0, r5
 80026ba:	f7ff ff95 	bl	80025e8 <HAL_CAN_TxMailbox2CompleteCallback>
 80026be:	e00b      	b.n	80026d8 <HAL_CAN_IRQHandler+0xda>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80026c0:	f416 2f00 	tst.w	r6, #524288	; 0x80000
 80026c4:	d002      	beq.n	80026cc <HAL_CAN_IRQHandler+0xce>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80026c6:	f44b 3b80 	orr.w	fp, fp, #65536	; 0x10000
 80026ca:	e005      	b.n	80026d8 <HAL_CAN_IRQHandler+0xda>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80026cc:	4628      	mov	r0, r5
 80026ce:	f7ff ff8e 	bl	80025ee <HAL_CAN_TxMailbox2AbortCallback>
 80026d2:	e001      	b.n	80026d8 <HAL_CAN_IRQHandler+0xda>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80026d4:	f04f 0b00 	mov.w	fp, #0
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80026d8:	f014 0f08 	tst.w	r4, #8
 80026dc:	d007      	beq.n	80026ee <HAL_CAN_IRQHandler+0xf0>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80026de:	f019 0f10 	tst.w	r9, #16
 80026e2:	d004      	beq.n	80026ee <HAL_CAN_IRQHandler+0xf0>
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80026e4:	f44b 7b00 	orr.w	fp, fp, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80026e8:	682b      	ldr	r3, [r5, #0]
 80026ea:	2210      	movs	r2, #16
 80026ec:	60da      	str	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80026ee:	f014 0f04 	tst.w	r4, #4
 80026f2:	d002      	beq.n	80026fa <HAL_CAN_IRQHandler+0xfc>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80026f4:	f019 0f08 	tst.w	r9, #8
 80026f8:	d160      	bne.n	80027bc <HAL_CAN_IRQHandler+0x1be>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80026fa:	f014 0f02 	tst.w	r4, #2
 80026fe:	d004      	beq.n	800270a <HAL_CAN_IRQHandler+0x10c>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002700:	682b      	ldr	r3, [r5, #0]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	f013 0f03 	tst.w	r3, #3
 8002708:	d15f      	bne.n	80027ca <HAL_CAN_IRQHandler+0x1cc>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800270a:	f014 0f40 	tst.w	r4, #64	; 0x40
 800270e:	d007      	beq.n	8002720 <HAL_CAN_IRQHandler+0x122>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002710:	f018 0f10 	tst.w	r8, #16
 8002714:	d004      	beq.n	8002720 <HAL_CAN_IRQHandler+0x122>
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002716:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800271a:	682b      	ldr	r3, [r5, #0]
 800271c:	2210      	movs	r2, #16
 800271e:	611a      	str	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002720:	f014 0f20 	tst.w	r4, #32
 8002724:	d002      	beq.n	800272c <HAL_CAN_IRQHandler+0x12e>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002726:	f018 0f08 	tst.w	r8, #8
 800272a:	d152      	bne.n	80027d2 <HAL_CAN_IRQHandler+0x1d4>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800272c:	f014 0f10 	tst.w	r4, #16
 8002730:	d004      	beq.n	800273c <HAL_CAN_IRQHandler+0x13e>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002732:	682b      	ldr	r3, [r5, #0]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	f013 0f03 	tst.w	r3, #3
 800273a:	d151      	bne.n	80027e0 <HAL_CAN_IRQHandler+0x1e2>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800273c:	f414 3f00 	tst.w	r4, #131072	; 0x20000
 8002740:	d002      	beq.n	8002748 <HAL_CAN_IRQHandler+0x14a>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002742:	f017 0f10 	tst.w	r7, #16
 8002746:	d14f      	bne.n	80027e8 <HAL_CAN_IRQHandler+0x1ea>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002748:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 800274c:	d002      	beq.n	8002754 <HAL_CAN_IRQHandler+0x156>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800274e:	f017 0f08 	tst.w	r7, #8
 8002752:	d150      	bne.n	80027f6 <HAL_CAN_IRQHandler+0x1f8>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002754:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8002758:	d067      	beq.n	800282a <HAL_CAN_IRQHandler+0x22c>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800275a:	f017 0f04 	tst.w	r7, #4
 800275e:	d061      	beq.n	8002824 <HAL_CAN_IRQHandler+0x226>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002760:	f414 7f80 	tst.w	r4, #256	; 0x100
 8002764:	d004      	beq.n	8002770 <HAL_CAN_IRQHandler+0x172>
 8002766:	f01a 0f01 	tst.w	sl, #1
 800276a:	d001      	beq.n	8002770 <HAL_CAN_IRQHandler+0x172>
        errorcode |= HAL_CAN_ERROR_EWG;
 800276c:	f04b 0b01 	orr.w	fp, fp, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002770:	f414 7f00 	tst.w	r4, #512	; 0x200
 8002774:	d004      	beq.n	8002780 <HAL_CAN_IRQHandler+0x182>
 8002776:	f01a 0f02 	tst.w	sl, #2
 800277a:	d001      	beq.n	8002780 <HAL_CAN_IRQHandler+0x182>
        errorcode |= HAL_CAN_ERROR_EPV;
 800277c:	f04b 0b02 	orr.w	fp, fp, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002780:	f414 6f80 	tst.w	r4, #1024	; 0x400
 8002784:	d004      	beq.n	8002790 <HAL_CAN_IRQHandler+0x192>
 8002786:	f01a 0f04 	tst.w	sl, #4
 800278a:	d001      	beq.n	8002790 <HAL_CAN_IRQHandler+0x192>
        errorcode |= HAL_CAN_ERROR_BOF;
 800278c:	f04b 0b04 	orr.w	fp, fp, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002790:	f414 6f00 	tst.w	r4, #2048	; 0x800
 8002794:	d046      	beq.n	8002824 <HAL_CAN_IRQHandler+0x226>
 8002796:	f01a 0a70 	ands.w	sl, sl, #112	; 0x70
 800279a:	d043      	beq.n	8002824 <HAL_CAN_IRQHandler+0x226>
        switch (esrflags & CAN_ESR_LEC)
 800279c:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 80027a0:	d048      	beq.n	8002834 <HAL_CAN_IRQHandler+0x236>
 80027a2:	d92f      	bls.n	8002804 <HAL_CAN_IRQHandler+0x206>
 80027a4:	f1ba 0f50 	cmp.w	sl, #80	; 0x50
 80027a8:	d047      	beq.n	800283a <HAL_CAN_IRQHandler+0x23c>
 80027aa:	f1ba 0f60 	cmp.w	sl, #96	; 0x60
 80027ae:	d047      	beq.n	8002840 <HAL_CAN_IRQHandler+0x242>
 80027b0:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 80027b4:	d131      	bne.n	800281a <HAL_CAN_IRQHandler+0x21c>
            errorcode |= HAL_CAN_ERROR_BR;
 80027b6:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
            break;
 80027ba:	e02e      	b.n	800281a <HAL_CAN_IRQHandler+0x21c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80027bc:	682b      	ldr	r3, [r5, #0]
 80027be:	2208      	movs	r2, #8
 80027c0:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 80027c2:	4628      	mov	r0, r5
 80027c4:	f7ff ff15 	bl	80025f2 <HAL_CAN_RxFifo0FullCallback>
 80027c8:	e797      	b.n	80026fa <HAL_CAN_IRQHandler+0xfc>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80027ca:	4628      	mov	r0, r5
 80027cc:	f7ff ff10 	bl	80025f0 <HAL_CAN_RxFifo0MsgPendingCallback>
 80027d0:	e79b      	b.n	800270a <HAL_CAN_IRQHandler+0x10c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80027d2:	682b      	ldr	r3, [r5, #0]
 80027d4:	2208      	movs	r2, #8
 80027d6:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 80027d8:	4628      	mov	r0, r5
 80027da:	f7ff ff0c 	bl	80025f6 <HAL_CAN_RxFifo1FullCallback>
 80027de:	e7a5      	b.n	800272c <HAL_CAN_IRQHandler+0x12e>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80027e0:	4628      	mov	r0, r5
 80027e2:	f7ff ff07 	bl	80025f4 <HAL_CAN_RxFifo1MsgPendingCallback>
 80027e6:	e7a9      	b.n	800273c <HAL_CAN_IRQHandler+0x13e>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80027e8:	682b      	ldr	r3, [r5, #0]
 80027ea:	2210      	movs	r2, #16
 80027ec:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 80027ee:	4628      	mov	r0, r5
 80027f0:	f7ff ff02 	bl	80025f8 <HAL_CAN_SleepCallback>
 80027f4:	e7a8      	b.n	8002748 <HAL_CAN_IRQHandler+0x14a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80027f6:	682b      	ldr	r3, [r5, #0]
 80027f8:	2208      	movs	r2, #8
 80027fa:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80027fc:	4628      	mov	r0, r5
 80027fe:	f7ff fefc 	bl	80025fa <HAL_CAN_WakeUpFromRxMsgCallback>
 8002802:	e7a7      	b.n	8002754 <HAL_CAN_IRQHandler+0x156>
        switch (esrflags & CAN_ESR_LEC)
 8002804:	f1ba 0f10 	cmp.w	sl, #16
 8002808:	d005      	beq.n	8002816 <HAL_CAN_IRQHandler+0x218>
 800280a:	f1ba 0f20 	cmp.w	sl, #32
 800280e:	d104      	bne.n	800281a <HAL_CAN_IRQHandler+0x21c>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002810:	f04b 0b10 	orr.w	fp, fp, #16
            break;
 8002814:	e001      	b.n	800281a <HAL_CAN_IRQHandler+0x21c>
            errorcode |= HAL_CAN_ERROR_STF;
 8002816:	f04b 0b08 	orr.w	fp, fp, #8
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800281a:	682a      	ldr	r2, [r5, #0]
 800281c:	6993      	ldr	r3, [r2, #24]
 800281e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002822:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002824:	682b      	ldr	r3, [r5, #0]
 8002826:	2204      	movs	r2, #4
 8002828:	605a      	str	r2, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 800282a:	f1bb 0f00 	cmp.w	fp, #0
 800282e:	d10a      	bne.n	8002846 <HAL_CAN_IRQHandler+0x248>
}
 8002830:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            errorcode |= HAL_CAN_ERROR_ACK;
 8002834:	f04b 0b20 	orr.w	fp, fp, #32
            break;
 8002838:	e7ef      	b.n	800281a <HAL_CAN_IRQHandler+0x21c>
            errorcode |= HAL_CAN_ERROR_BD;
 800283a:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
            break;
 800283e:	e7ec      	b.n	800281a <HAL_CAN_IRQHandler+0x21c>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002840:	f44b 7b80 	orr.w	fp, fp, #256	; 0x100
            break;
 8002844:	e7e9      	b.n	800281a <HAL_CAN_IRQHandler+0x21c>
    hcan->ErrorCode |= errorcode;
 8002846:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002848:	ea43 030b 	orr.w	r3, r3, fp
 800284c:	626b      	str	r3, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 800284e:	4628      	mov	r0, r5
 8002850:	f7ff fed4 	bl	80025fc <HAL_CAN_ErrorCallback>
}
 8002854:	e7ec      	b.n	8002830 <HAL_CAN_IRQHandler+0x232>
	...

08002858 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002858:	4906      	ldr	r1, [pc, #24]	; (8002874 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 800285a:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800285c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002860:	041b      	lsls	r3, r3, #16
 8002862:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002864:	0200      	lsls	r0, r0, #8
 8002866:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800286a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 800286c:	4a02      	ldr	r2, [pc, #8]	; (8002878 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800286e:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8002870:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002872:	4770      	bx	lr
 8002874:	e000ed00 	.word	0xe000ed00
 8002878:	05fa0000 	.word	0x05fa0000

0800287c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800287c:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800287e:	4b15      	ldr	r3, [pc, #84]	; (80028d4 <HAL_NVIC_SetPriority+0x58>)
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002886:	f1c3 0407 	rsb	r4, r3, #7
 800288a:	2c04      	cmp	r4, #4
 800288c:	bf28      	it	cs
 800288e:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002890:	1d1d      	adds	r5, r3, #4
 8002892:	2d06      	cmp	r5, #6
 8002894:	d914      	bls.n	80028c0 <HAL_NVIC_SetPriority+0x44>
 8002896:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002898:	f04f 35ff 	mov.w	r5, #4294967295
 800289c:	fa05 f404 	lsl.w	r4, r5, r4
 80028a0:	ea21 0104 	bic.w	r1, r1, r4
 80028a4:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028a6:	fa05 f303 	lsl.w	r3, r5, r3
 80028aa:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028ae:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80028b0:	2800      	cmp	r0, #0
 80028b2:	db07      	blt.n	80028c4 <HAL_NVIC_SetPriority+0x48>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028b4:	0109      	lsls	r1, r1, #4
 80028b6:	b2c9      	uxtb	r1, r1
 80028b8:	4b07      	ldr	r3, [pc, #28]	; (80028d8 <HAL_NVIC_SetPriority+0x5c>)
 80028ba:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80028bc:	bc30      	pop	{r4, r5}
 80028be:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028c0:	2300      	movs	r3, #0
 80028c2:	e7e9      	b.n	8002898 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028c4:	f000 000f 	and.w	r0, r0, #15
 80028c8:	0109      	lsls	r1, r1, #4
 80028ca:	b2c9      	uxtb	r1, r1
 80028cc:	4b03      	ldr	r3, [pc, #12]	; (80028dc <HAL_NVIC_SetPriority+0x60>)
 80028ce:	5419      	strb	r1, [r3, r0]
 80028d0:	e7f4      	b.n	80028bc <HAL_NVIC_SetPriority+0x40>
 80028d2:	bf00      	nop
 80028d4:	e000ed00 	.word	0xe000ed00
 80028d8:	e000e400 	.word	0xe000e400
 80028dc:	e000ed14 	.word	0xe000ed14

080028e0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80028e0:	2800      	cmp	r0, #0
 80028e2:	db07      	blt.n	80028f4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028e4:	f000 021f 	and.w	r2, r0, #31
 80028e8:	0940      	lsrs	r0, r0, #5
 80028ea:	2301      	movs	r3, #1
 80028ec:	4093      	lsls	r3, r2
 80028ee:	4a02      	ldr	r2, [pc, #8]	; (80028f8 <HAL_NVIC_EnableIRQ+0x18>)
 80028f0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	e000e100 	.word	0xe000e100

080028fc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028fc:	3801      	subs	r0, #1
 80028fe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002902:	d20a      	bcs.n	800291a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002904:	4b06      	ldr	r3, [pc, #24]	; (8002920 <HAL_SYSTICK_Config+0x24>)
 8002906:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002908:	4a06      	ldr	r2, [pc, #24]	; (8002924 <HAL_SYSTICK_Config+0x28>)
 800290a:	21f0      	movs	r1, #240	; 0xf0
 800290c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002910:	2000      	movs	r0, #0
 8002912:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002914:	2207      	movs	r2, #7
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800291a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	e000e010 	.word	0xe000e010
 8002924:	e000ed00 	.word	0xe000ed00

08002928 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002928:	2300      	movs	r3, #0
 800292a:	2b0f      	cmp	r3, #15
 800292c:	f200 80d5 	bhi.w	8002ada <HAL_GPIO_Init+0x1b2>
{
 8002930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002932:	b083      	sub	sp, #12
 8002934:	e039      	b.n	80029aa <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002936:	2207      	movs	r2, #7
 8002938:	e000      	b.n	800293c <HAL_GPIO_Init+0x14>
 800293a:	2200      	movs	r2, #0
 800293c:	40b2      	lsls	r2, r6
 800293e:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8002940:	3402      	adds	r4, #2
 8002942:	4e66      	ldr	r6, [pc, #408]	; (8002adc <HAL_GPIO_Init+0x1b4>)
 8002944:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002948:	4a65      	ldr	r2, [pc, #404]	; (8002ae0 <HAL_GPIO_Init+0x1b8>)
 800294a:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800294c:	43ea      	mvns	r2, r5
 800294e:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002952:	684f      	ldr	r7, [r1, #4]
 8002954:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8002958:	d001      	beq.n	800295e <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 800295a:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 800295e:	4c60      	ldr	r4, [pc, #384]	; (8002ae0 <HAL_GPIO_Init+0x1b8>)
 8002960:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8002962:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8002964:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002968:	684f      	ldr	r7, [r1, #4]
 800296a:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 800296e:	d001      	beq.n	8002974 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8002970:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8002974:	4c5a      	ldr	r4, [pc, #360]	; (8002ae0 <HAL_GPIO_Init+0x1b8>)
 8002976:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002978:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 800297a:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800297e:	684f      	ldr	r7, [r1, #4]
 8002980:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8002984:	d001      	beq.n	800298a <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8002986:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 800298a:	4c55      	ldr	r4, [pc, #340]	; (8002ae0 <HAL_GPIO_Init+0x1b8>)
 800298c:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 800298e:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8002990:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002992:	684e      	ldr	r6, [r1, #4]
 8002994:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8002998:	d001      	beq.n	800299e <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 800299a:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 800299e:	4c50      	ldr	r4, [pc, #320]	; (8002ae0 <HAL_GPIO_Init+0x1b8>)
 80029a0:	60e2      	str	r2, [r4, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80029a2:	3301      	adds	r3, #1
 80029a4:	2b0f      	cmp	r3, #15
 80029a6:	f200 8096 	bhi.w	8002ad6 <HAL_GPIO_Init+0x1ae>
    ioposition = ((uint32_t)0x01) << position;
 80029aa:	2201      	movs	r2, #1
 80029ac:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029ae:	680c      	ldr	r4, [r1, #0]
 80029b0:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 80029b4:	42aa      	cmp	r2, r5
 80029b6:	d1f4      	bne.n	80029a2 <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80029b8:	684c      	ldr	r4, [r1, #4]
 80029ba:	1e66      	subs	r6, r4, #1
 80029bc:	2c11      	cmp	r4, #17
 80029be:	bf18      	it	ne
 80029c0:	2e01      	cmpne	r6, #1
 80029c2:	d901      	bls.n	80029c8 <HAL_GPIO_Init+0xa0>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029c4:	2c12      	cmp	r4, #18
 80029c6:	d112      	bne.n	80029ee <HAL_GPIO_Init+0xc6>
        temp = GPIOx->OSPEEDR; 
 80029c8:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80029ca:	005f      	lsls	r7, r3, #1
 80029cc:	2403      	movs	r4, #3
 80029ce:	40bc      	lsls	r4, r7
 80029d0:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 80029d4:	68cc      	ldr	r4, [r1, #12]
 80029d6:	40bc      	lsls	r4, r7
 80029d8:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 80029da:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 80029dc:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029de:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80029e2:	684c      	ldr	r4, [r1, #4]
 80029e4:	f3c4 1200 	ubfx	r2, r4, #4, #1
 80029e8:	409a      	lsls	r2, r3
 80029ea:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 80029ec:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 80029ee:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80029f0:	005f      	lsls	r7, r3, #1
 80029f2:	2603      	movs	r6, #3
 80029f4:	40be      	lsls	r6, r7
 80029f6:	43f6      	mvns	r6, r6
 80029f8:	4032      	ands	r2, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80029fa:	688c      	ldr	r4, [r1, #8]
 80029fc:	40bc      	lsls	r4, r7
 80029fe:	4314      	orrs	r4, r2
      GPIOx->PUPDR = temp;
 8002a00:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a02:	684a      	ldr	r2, [r1, #4]
 8002a04:	2a12      	cmp	r2, #18
 8002a06:	bf18      	it	ne
 8002a08:	2a02      	cmpne	r2, #2
 8002a0a:	d113      	bne.n	8002a34 <HAL_GPIO_Init+0x10c>
        temp = GPIOx->AFR[position >> 3];
 8002a0c:	08dc      	lsrs	r4, r3, #3
 8002a0e:	3408      	adds	r4, #8
 8002a10:	f850 e024 	ldr.w	lr, [r0, r4, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002a14:	f003 0207 	and.w	r2, r3, #7
 8002a18:	ea4f 0c82 	mov.w	ip, r2, lsl #2
 8002a1c:	220f      	movs	r2, #15
 8002a1e:	fa02 f20c 	lsl.w	r2, r2, ip
 8002a22:	ea2e 0e02 	bic.w	lr, lr, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002a26:	690a      	ldr	r2, [r1, #16]
 8002a28:	fa02 f20c 	lsl.w	r2, r2, ip
 8002a2c:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3] = temp;
 8002a30:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
      temp = GPIOx->MODER;
 8002a34:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002a36:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002a38:	684a      	ldr	r2, [r1, #4]
 8002a3a:	f002 0203 	and.w	r2, r2, #3
 8002a3e:	40ba      	lsls	r2, r7
 8002a40:	4332      	orrs	r2, r6
      GPIOx->MODER = temp;
 8002a42:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a44:	684a      	ldr	r2, [r1, #4]
 8002a46:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8002a4a:	d0aa      	beq.n	80029a2 <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a4c:	4a25      	ldr	r2, [pc, #148]	; (8002ae4 <HAL_GPIO_Init+0x1bc>)
 8002a4e:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8002a50:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8002a54:	6454      	str	r4, [r2, #68]	; 0x44
 8002a56:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002a58:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002a5c:	9201      	str	r2, [sp, #4]
 8002a5e:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8002a60:	089c      	lsrs	r4, r3, #2
 8002a62:	1ca6      	adds	r6, r4, #2
 8002a64:	4a1d      	ldr	r2, [pc, #116]	; (8002adc <HAL_GPIO_Init+0x1b4>)
 8002a66:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002a6a:	f003 0203 	and.w	r2, r3, #3
 8002a6e:	0096      	lsls	r6, r2, #2
 8002a70:	220f      	movs	r2, #15
 8002a72:	40b2      	lsls	r2, r6
 8002a74:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002a78:	4a1b      	ldr	r2, [pc, #108]	; (8002ae8 <HAL_GPIO_Init+0x1c0>)
 8002a7a:	4290      	cmp	r0, r2
 8002a7c:	f43f af5d 	beq.w	800293a <HAL_GPIO_Init+0x12>
 8002a80:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a84:	4290      	cmp	r0, r2
 8002a86:	d01a      	beq.n	8002abe <HAL_GPIO_Init+0x196>
 8002a88:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a8c:	4290      	cmp	r0, r2
 8002a8e:	d018      	beq.n	8002ac2 <HAL_GPIO_Init+0x19a>
 8002a90:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a94:	4290      	cmp	r0, r2
 8002a96:	d016      	beq.n	8002ac6 <HAL_GPIO_Init+0x19e>
 8002a98:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a9c:	4290      	cmp	r0, r2
 8002a9e:	d014      	beq.n	8002aca <HAL_GPIO_Init+0x1a2>
 8002aa0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002aa4:	4290      	cmp	r0, r2
 8002aa6:	d012      	beq.n	8002ace <HAL_GPIO_Init+0x1a6>
 8002aa8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002aac:	4290      	cmp	r0, r2
 8002aae:	d010      	beq.n	8002ad2 <HAL_GPIO_Init+0x1aa>
 8002ab0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ab4:	4290      	cmp	r0, r2
 8002ab6:	f43f af3e 	beq.w	8002936 <HAL_GPIO_Init+0xe>
 8002aba:	2208      	movs	r2, #8
 8002abc:	e73e      	b.n	800293c <HAL_GPIO_Init+0x14>
 8002abe:	2201      	movs	r2, #1
 8002ac0:	e73c      	b.n	800293c <HAL_GPIO_Init+0x14>
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	e73a      	b.n	800293c <HAL_GPIO_Init+0x14>
 8002ac6:	2203      	movs	r2, #3
 8002ac8:	e738      	b.n	800293c <HAL_GPIO_Init+0x14>
 8002aca:	2204      	movs	r2, #4
 8002acc:	e736      	b.n	800293c <HAL_GPIO_Init+0x14>
 8002ace:	2205      	movs	r2, #5
 8002ad0:	e734      	b.n	800293c <HAL_GPIO_Init+0x14>
 8002ad2:	2206      	movs	r2, #6
 8002ad4:	e732      	b.n	800293c <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8002ad6:	b003      	add	sp, #12
 8002ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ada:	4770      	bx	lr
 8002adc:	40013800 	.word	0x40013800
 8002ae0:	40013c00 	.word	0x40013c00
 8002ae4:	40023800 	.word	0x40023800
 8002ae8:	40020000 	.word	0x40020000

08002aec <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002aec:	b912      	cbnz	r2, 8002af4 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002aee:	0409      	lsls	r1, r1, #16
 8002af0:	6181      	str	r1, [r0, #24]
  }
}
 8002af2:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8002af4:	6181      	str	r1, [r0, #24]
 8002af6:	4770      	bx	lr

08002af8 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002af8:	2800      	cmp	r0, #0
 8002afa:	f000 8209 	beq.w	8002f10 <HAL_RCC_OscConfig+0x418>
{
 8002afe:	b570      	push	{r4, r5, r6, lr}
 8002b00:	b082      	sub	sp, #8
 8002b02:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b04:	6803      	ldr	r3, [r0, #0]
 8002b06:	f013 0f01 	tst.w	r3, #1
 8002b0a:	d029      	beq.n	8002b60 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b0c:	4ba2      	ldr	r3, [pc, #648]	; (8002d98 <HAL_RCC_OscConfig+0x2a0>)
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f003 030c 	and.w	r3, r3, #12
 8002b14:	2b04      	cmp	r3, #4
 8002b16:	d01a      	beq.n	8002b4e <HAL_RCC_OscConfig+0x56>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b18:	4b9f      	ldr	r3, [pc, #636]	; (8002d98 <HAL_RCC_OscConfig+0x2a0>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f003 030c 	and.w	r3, r3, #12
 8002b20:	2b08      	cmp	r3, #8
 8002b22:	d00f      	beq.n	8002b44 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b24:	6863      	ldr	r3, [r4, #4]
 8002b26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b2a:	d040      	beq.n	8002bae <HAL_RCC_OscConfig+0xb6>
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d154      	bne.n	8002bda <HAL_RCC_OscConfig+0xe2>
 8002b30:	4b99      	ldr	r3, [pc, #612]	; (8002d98 <HAL_RCC_OscConfig+0x2a0>)
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002b38:	601a      	str	r2, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b40:	601a      	str	r2, [r3, #0]
 8002b42:	e039      	b.n	8002bb8 <HAL_RCC_OscConfig+0xc0>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b44:	4b94      	ldr	r3, [pc, #592]	; (8002d98 <HAL_RCC_OscConfig+0x2a0>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002b4c:	d0ea      	beq.n	8002b24 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b4e:	4b92      	ldr	r3, [pc, #584]	; (8002d98 <HAL_RCC_OscConfig+0x2a0>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002b56:	d003      	beq.n	8002b60 <HAL_RCC_OscConfig+0x68>
 8002b58:	6863      	ldr	r3, [r4, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f000 81da 	beq.w	8002f14 <HAL_RCC_OscConfig+0x41c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b60:	6823      	ldr	r3, [r4, #0]
 8002b62:	f013 0f02 	tst.w	r3, #2
 8002b66:	d075      	beq.n	8002c54 <HAL_RCC_OscConfig+0x15c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b68:	4b8b      	ldr	r3, [pc, #556]	; (8002d98 <HAL_RCC_OscConfig+0x2a0>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f013 0f0c 	tst.w	r3, #12
 8002b70:	d05e      	beq.n	8002c30 <HAL_RCC_OscConfig+0x138>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b72:	4b89      	ldr	r3, [pc, #548]	; (8002d98 <HAL_RCC_OscConfig+0x2a0>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f003 030c 	and.w	r3, r3, #12
 8002b7a:	2b08      	cmp	r3, #8
 8002b7c:	d053      	beq.n	8002c26 <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b7e:	68e3      	ldr	r3, [r4, #12]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	f000 808a 	beq.w	8002c9a <HAL_RCC_OscConfig+0x1a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b86:	4a84      	ldr	r2, [pc, #528]	; (8002d98 <HAL_RCC_OscConfig+0x2a0>)
 8002b88:	6813      	ldr	r3, [r2, #0]
 8002b8a:	f043 0301 	orr.w	r3, r3, #1
 8002b8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b90:	f7ff f8dc 	bl	8001d4c <HAL_GetTick>
 8002b94:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b96:	4b80      	ldr	r3, [pc, #512]	; (8002d98 <HAL_RCC_OscConfig+0x2a0>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f013 0f02 	tst.w	r3, #2
 8002b9e:	d173      	bne.n	8002c88 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ba0:	f7ff f8d4 	bl	8001d4c <HAL_GetTick>
 8002ba4:	1b40      	subs	r0, r0, r5
 8002ba6:	2802      	cmp	r0, #2
 8002ba8:	d9f5      	bls.n	8002b96 <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 8002baa:	2003      	movs	r0, #3
 8002bac:	e1b5      	b.n	8002f1a <HAL_RCC_OscConfig+0x422>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bae:	4a7a      	ldr	r2, [pc, #488]	; (8002d98 <HAL_RCC_OscConfig+0x2a0>)
 8002bb0:	6813      	ldr	r3, [r2, #0]
 8002bb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bb6:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bb8:	6863      	ldr	r3, [r4, #4]
 8002bba:	b32b      	cbz	r3, 8002c08 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8002bbc:	f7ff f8c6 	bl	8001d4c <HAL_GetTick>
 8002bc0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bc2:	4b75      	ldr	r3, [pc, #468]	; (8002d98 <HAL_RCC_OscConfig+0x2a0>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002bca:	d1c9      	bne.n	8002b60 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bcc:	f7ff f8be 	bl	8001d4c <HAL_GetTick>
 8002bd0:	1b40      	subs	r0, r0, r5
 8002bd2:	2864      	cmp	r0, #100	; 0x64
 8002bd4:	d9f5      	bls.n	8002bc2 <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8002bd6:	2003      	movs	r0, #3
 8002bd8:	e19f      	b.n	8002f1a <HAL_RCC_OscConfig+0x422>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bda:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bde:	d009      	beq.n	8002bf4 <HAL_RCC_OscConfig+0xfc>
 8002be0:	4b6d      	ldr	r3, [pc, #436]	; (8002d98 <HAL_RCC_OscConfig+0x2a0>)
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002be8:	601a      	str	r2, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002bf0:	601a      	str	r2, [r3, #0]
 8002bf2:	e7e1      	b.n	8002bb8 <HAL_RCC_OscConfig+0xc0>
 8002bf4:	4b68      	ldr	r3, [pc, #416]	; (8002d98 <HAL_RCC_OscConfig+0x2a0>)
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002bfc:	601a      	str	r2, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002c04:	601a      	str	r2, [r3, #0]
 8002c06:	e7d7      	b.n	8002bb8 <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 8002c08:	f7ff f8a0 	bl	8001d4c <HAL_GetTick>
 8002c0c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c0e:	4b62      	ldr	r3, [pc, #392]	; (8002d98 <HAL_RCC_OscConfig+0x2a0>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002c16:	d0a3      	beq.n	8002b60 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c18:	f7ff f898 	bl	8001d4c <HAL_GetTick>
 8002c1c:	1b40      	subs	r0, r0, r5
 8002c1e:	2864      	cmp	r0, #100	; 0x64
 8002c20:	d9f5      	bls.n	8002c0e <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 8002c22:	2003      	movs	r0, #3
 8002c24:	e179      	b.n	8002f1a <HAL_RCC_OscConfig+0x422>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c26:	4b5c      	ldr	r3, [pc, #368]	; (8002d98 <HAL_RCC_OscConfig+0x2a0>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002c2e:	d1a6      	bne.n	8002b7e <HAL_RCC_OscConfig+0x86>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c30:	4b59      	ldr	r3, [pc, #356]	; (8002d98 <HAL_RCC_OscConfig+0x2a0>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f013 0f02 	tst.w	r3, #2
 8002c38:	d004      	beq.n	8002c44 <HAL_RCC_OscConfig+0x14c>
 8002c3a:	68e3      	ldr	r3, [r4, #12]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d001      	beq.n	8002c44 <HAL_RCC_OscConfig+0x14c>
        return HAL_ERROR;
 8002c40:	2001      	movs	r0, #1
 8002c42:	e16a      	b.n	8002f1a <HAL_RCC_OscConfig+0x422>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c44:	4a54      	ldr	r2, [pc, #336]	; (8002d98 <HAL_RCC_OscConfig+0x2a0>)
 8002c46:	6813      	ldr	r3, [r2, #0]
 8002c48:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002c4c:	6921      	ldr	r1, [r4, #16]
 8002c4e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002c52:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c54:	6823      	ldr	r3, [r4, #0]
 8002c56:	f013 0f08 	tst.w	r3, #8
 8002c5a:	d046      	beq.n	8002cea <HAL_RCC_OscConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c5c:	6963      	ldr	r3, [r4, #20]
 8002c5e:	b383      	cbz	r3, 8002cc2 <HAL_RCC_OscConfig+0x1ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c60:	4a4d      	ldr	r2, [pc, #308]	; (8002d98 <HAL_RCC_OscConfig+0x2a0>)
 8002c62:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8002c64:	f043 0301 	orr.w	r3, r3, #1
 8002c68:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c6a:	f7ff f86f 	bl	8001d4c <HAL_GetTick>
 8002c6e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c70:	4b49      	ldr	r3, [pc, #292]	; (8002d98 <HAL_RCC_OscConfig+0x2a0>)
 8002c72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c74:	f013 0f02 	tst.w	r3, #2
 8002c78:	d137      	bne.n	8002cea <HAL_RCC_OscConfig+0x1f2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c7a:	f7ff f867 	bl	8001d4c <HAL_GetTick>
 8002c7e:	1b40      	subs	r0, r0, r5
 8002c80:	2802      	cmp	r0, #2
 8002c82:	d9f5      	bls.n	8002c70 <HAL_RCC_OscConfig+0x178>
        {
          return HAL_TIMEOUT;
 8002c84:	2003      	movs	r0, #3
 8002c86:	e148      	b.n	8002f1a <HAL_RCC_OscConfig+0x422>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c88:	4a43      	ldr	r2, [pc, #268]	; (8002d98 <HAL_RCC_OscConfig+0x2a0>)
 8002c8a:	6813      	ldr	r3, [r2, #0]
 8002c8c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002c90:	6921      	ldr	r1, [r4, #16]
 8002c92:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002c96:	6013      	str	r3, [r2, #0]
 8002c98:	e7dc      	b.n	8002c54 <HAL_RCC_OscConfig+0x15c>
        __HAL_RCC_HSI_DISABLE();
 8002c9a:	4a3f      	ldr	r2, [pc, #252]	; (8002d98 <HAL_RCC_OscConfig+0x2a0>)
 8002c9c:	6813      	ldr	r3, [r2, #0]
 8002c9e:	f023 0301 	bic.w	r3, r3, #1
 8002ca2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002ca4:	f7ff f852 	bl	8001d4c <HAL_GetTick>
 8002ca8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002caa:	4b3b      	ldr	r3, [pc, #236]	; (8002d98 <HAL_RCC_OscConfig+0x2a0>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f013 0f02 	tst.w	r3, #2
 8002cb2:	d0cf      	beq.n	8002c54 <HAL_RCC_OscConfig+0x15c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cb4:	f7ff f84a 	bl	8001d4c <HAL_GetTick>
 8002cb8:	1b40      	subs	r0, r0, r5
 8002cba:	2802      	cmp	r0, #2
 8002cbc:	d9f5      	bls.n	8002caa <HAL_RCC_OscConfig+0x1b2>
            return HAL_TIMEOUT;
 8002cbe:	2003      	movs	r0, #3
 8002cc0:	e12b      	b.n	8002f1a <HAL_RCC_OscConfig+0x422>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cc2:	4a35      	ldr	r2, [pc, #212]	; (8002d98 <HAL_RCC_OscConfig+0x2a0>)
 8002cc4:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8002cc6:	f023 0301 	bic.w	r3, r3, #1
 8002cca:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ccc:	f7ff f83e 	bl	8001d4c <HAL_GetTick>
 8002cd0:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cd2:	4b31      	ldr	r3, [pc, #196]	; (8002d98 <HAL_RCC_OscConfig+0x2a0>)
 8002cd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cd6:	f013 0f02 	tst.w	r3, #2
 8002cda:	d006      	beq.n	8002cea <HAL_RCC_OscConfig+0x1f2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cdc:	f7ff f836 	bl	8001d4c <HAL_GetTick>
 8002ce0:	1b40      	subs	r0, r0, r5
 8002ce2:	2802      	cmp	r0, #2
 8002ce4:	d9f5      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x1da>
        {
          return HAL_TIMEOUT;
 8002ce6:	2003      	movs	r0, #3
 8002ce8:	e117      	b.n	8002f1a <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cea:	6823      	ldr	r3, [r4, #0]
 8002cec:	f013 0f04 	tst.w	r3, #4
 8002cf0:	d07e      	beq.n	8002df0 <HAL_RCC_OscConfig+0x2f8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cf2:	4b29      	ldr	r3, [pc, #164]	; (8002d98 <HAL_RCC_OscConfig+0x2a0>)
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002cfa:	d11e      	bne.n	8002d3a <HAL_RCC_OscConfig+0x242>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cfc:	4b26      	ldr	r3, [pc, #152]	; (8002d98 <HAL_RCC_OscConfig+0x2a0>)
 8002cfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d00:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002d04:	641a      	str	r2, [r3, #64]	; 0x40
 8002d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d0c:	9301      	str	r3, [sp, #4]
 8002d0e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002d10:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d12:	4b22      	ldr	r3, [pc, #136]	; (8002d9c <HAL_RCC_OscConfig+0x2a4>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002d1a:	d010      	beq.n	8002d3e <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d1c:	68a3      	ldr	r3, [r4, #8]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d021      	beq.n	8002d66 <HAL_RCC_OscConfig+0x26e>
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d13c      	bne.n	8002da0 <HAL_RCC_OscConfig+0x2a8>
 8002d26:	4b1c      	ldr	r3, [pc, #112]	; (8002d98 <HAL_RCC_OscConfig+0x2a0>)
 8002d28:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d2a:	f022 0201 	bic.w	r2, r2, #1
 8002d2e:	671a      	str	r2, [r3, #112]	; 0x70
 8002d30:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d32:	f022 0204 	bic.w	r2, r2, #4
 8002d36:	671a      	str	r2, [r3, #112]	; 0x70
 8002d38:	e01a      	b.n	8002d70 <HAL_RCC_OscConfig+0x278>
  FlagStatus pwrclkchanged = RESET;
 8002d3a:	2500      	movs	r5, #0
 8002d3c:	e7e9      	b.n	8002d12 <HAL_RCC_OscConfig+0x21a>
      PWR->CR1 |= PWR_CR1_DBP;
 8002d3e:	4a17      	ldr	r2, [pc, #92]	; (8002d9c <HAL_RCC_OscConfig+0x2a4>)
 8002d40:	6813      	ldr	r3, [r2, #0]
 8002d42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d46:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002d48:	f7ff f800 	bl	8001d4c <HAL_GetTick>
 8002d4c:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d4e:	4b13      	ldr	r3, [pc, #76]	; (8002d9c <HAL_RCC_OscConfig+0x2a4>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002d56:	d1e1      	bne.n	8002d1c <HAL_RCC_OscConfig+0x224>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d58:	f7fe fff8 	bl	8001d4c <HAL_GetTick>
 8002d5c:	1b80      	subs	r0, r0, r6
 8002d5e:	2864      	cmp	r0, #100	; 0x64
 8002d60:	d9f5      	bls.n	8002d4e <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 8002d62:	2003      	movs	r0, #3
 8002d64:	e0d9      	b.n	8002f1a <HAL_RCC_OscConfig+0x422>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d66:	4a0c      	ldr	r2, [pc, #48]	; (8002d98 <HAL_RCC_OscConfig+0x2a0>)
 8002d68:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002d6a:	f043 0301 	orr.w	r3, r3, #1
 8002d6e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d70:	68a3      	ldr	r3, [r4, #8]
 8002d72:	b35b      	cbz	r3, 8002dcc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d74:	f7fe ffea 	bl	8001d4c <HAL_GetTick>
 8002d78:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d7a:	4b07      	ldr	r3, [pc, #28]	; (8002d98 <HAL_RCC_OscConfig+0x2a0>)
 8002d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d7e:	f013 0f02 	tst.w	r3, #2
 8002d82:	d134      	bne.n	8002dee <HAL_RCC_OscConfig+0x2f6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d84:	f7fe ffe2 	bl	8001d4c <HAL_GetTick>
 8002d88:	1b80      	subs	r0, r0, r6
 8002d8a:	f241 3388 	movw	r3, #5000	; 0x1388
 8002d8e:	4298      	cmp	r0, r3
 8002d90:	d9f3      	bls.n	8002d7a <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 8002d92:	2003      	movs	r0, #3
 8002d94:	e0c1      	b.n	8002f1a <HAL_RCC_OscConfig+0x422>
 8002d96:	bf00      	nop
 8002d98:	40023800 	.word	0x40023800
 8002d9c:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002da0:	2b05      	cmp	r3, #5
 8002da2:	d009      	beq.n	8002db8 <HAL_RCC_OscConfig+0x2c0>
 8002da4:	4b60      	ldr	r3, [pc, #384]	; (8002f28 <HAL_RCC_OscConfig+0x430>)
 8002da6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002da8:	f022 0201 	bic.w	r2, r2, #1
 8002dac:	671a      	str	r2, [r3, #112]	; 0x70
 8002dae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002db0:	f022 0204 	bic.w	r2, r2, #4
 8002db4:	671a      	str	r2, [r3, #112]	; 0x70
 8002db6:	e7db      	b.n	8002d70 <HAL_RCC_OscConfig+0x278>
 8002db8:	4b5b      	ldr	r3, [pc, #364]	; (8002f28 <HAL_RCC_OscConfig+0x430>)
 8002dba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002dbc:	f042 0204 	orr.w	r2, r2, #4
 8002dc0:	671a      	str	r2, [r3, #112]	; 0x70
 8002dc2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002dc4:	f042 0201 	orr.w	r2, r2, #1
 8002dc8:	671a      	str	r2, [r3, #112]	; 0x70
 8002dca:	e7d1      	b.n	8002d70 <HAL_RCC_OscConfig+0x278>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dcc:	f7fe ffbe 	bl	8001d4c <HAL_GetTick>
 8002dd0:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dd2:	4b55      	ldr	r3, [pc, #340]	; (8002f28 <HAL_RCC_OscConfig+0x430>)
 8002dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd6:	f013 0f02 	tst.w	r3, #2
 8002dda:	d008      	beq.n	8002dee <HAL_RCC_OscConfig+0x2f6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ddc:	f7fe ffb6 	bl	8001d4c <HAL_GetTick>
 8002de0:	1b80      	subs	r0, r0, r6
 8002de2:	f241 3388 	movw	r3, #5000	; 0x1388
 8002de6:	4298      	cmp	r0, r3
 8002de8:	d9f3      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x2da>
        {
          return HAL_TIMEOUT;
 8002dea:	2003      	movs	r0, #3
 8002dec:	e095      	b.n	8002f1a <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002dee:	b9fd      	cbnz	r5, 8002e30 <HAL_RCC_OscConfig+0x338>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002df0:	69a3      	ldr	r3, [r4, #24]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f000 8090 	beq.w	8002f18 <HAL_RCC_OscConfig+0x420>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002df8:	4a4b      	ldr	r2, [pc, #300]	; (8002f28 <HAL_RCC_OscConfig+0x430>)
 8002dfa:	6892      	ldr	r2, [r2, #8]
 8002dfc:	f002 020c 	and.w	r2, r2, #12
 8002e00:	2a08      	cmp	r2, #8
 8002e02:	d058      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x3be>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d019      	beq.n	8002e3c <HAL_RCC_OscConfig+0x344>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e08:	4a47      	ldr	r2, [pc, #284]	; (8002f28 <HAL_RCC_OscConfig+0x430>)
 8002e0a:	6813      	ldr	r3, [r2, #0]
 8002e0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e12:	f7fe ff9b 	bl	8001d4c <HAL_GetTick>
 8002e16:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e18:	4b43      	ldr	r3, [pc, #268]	; (8002f28 <HAL_RCC_OscConfig+0x430>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002e20:	d047      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x3ba>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e22:	f7fe ff93 	bl	8001d4c <HAL_GetTick>
 8002e26:	1b00      	subs	r0, r0, r4
 8002e28:	2802      	cmp	r0, #2
 8002e2a:	d9f5      	bls.n	8002e18 <HAL_RCC_OscConfig+0x320>
          {
            return HAL_TIMEOUT;
 8002e2c:	2003      	movs	r0, #3
 8002e2e:	e074      	b.n	8002f1a <HAL_RCC_OscConfig+0x422>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e30:	4a3d      	ldr	r2, [pc, #244]	; (8002f28 <HAL_RCC_OscConfig+0x430>)
 8002e32:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002e34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e38:	6413      	str	r3, [r2, #64]	; 0x40
 8002e3a:	e7d9      	b.n	8002df0 <HAL_RCC_OscConfig+0x2f8>
        __HAL_RCC_PLL_DISABLE();
 8002e3c:	4a3a      	ldr	r2, [pc, #232]	; (8002f28 <HAL_RCC_OscConfig+0x430>)
 8002e3e:	6813      	ldr	r3, [r2, #0]
 8002e40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e44:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002e46:	f7fe ff81 	bl	8001d4c <HAL_GetTick>
 8002e4a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e4c:	4b36      	ldr	r3, [pc, #216]	; (8002f28 <HAL_RCC_OscConfig+0x430>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002e54:	d006      	beq.n	8002e64 <HAL_RCC_OscConfig+0x36c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e56:	f7fe ff79 	bl	8001d4c <HAL_GetTick>
 8002e5a:	1b40      	subs	r0, r0, r5
 8002e5c:	2802      	cmp	r0, #2
 8002e5e:	d9f5      	bls.n	8002e4c <HAL_RCC_OscConfig+0x354>
            return HAL_TIMEOUT;
 8002e60:	2003      	movs	r0, #3
 8002e62:	e05a      	b.n	8002f1a <HAL_RCC_OscConfig+0x422>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e64:	69e3      	ldr	r3, [r4, #28]
 8002e66:	6a22      	ldr	r2, [r4, #32]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002e6c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002e70:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002e72:	0852      	lsrs	r2, r2, #1
 8002e74:	3a01      	subs	r2, #1
 8002e76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002e7a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002e7c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002e80:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002e84:	4a28      	ldr	r2, [pc, #160]	; (8002f28 <HAL_RCC_OscConfig+0x430>)
 8002e86:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002e88:	6813      	ldr	r3, [r2, #0]
 8002e8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e8e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002e90:	f7fe ff5c 	bl	8001d4c <HAL_GetTick>
 8002e94:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e96:	4b24      	ldr	r3, [pc, #144]	; (8002f28 <HAL_RCC_OscConfig+0x430>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002e9e:	d106      	bne.n	8002eae <HAL_RCC_OscConfig+0x3b6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ea0:	f7fe ff54 	bl	8001d4c <HAL_GetTick>
 8002ea4:	1b00      	subs	r0, r0, r4
 8002ea6:	2802      	cmp	r0, #2
 8002ea8:	d9f5      	bls.n	8002e96 <HAL_RCC_OscConfig+0x39e>
            return HAL_TIMEOUT;
 8002eaa:	2003      	movs	r0, #3
 8002eac:	e035      	b.n	8002f1a <HAL_RCC_OscConfig+0x422>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8002eae:	2000      	movs	r0, #0
 8002eb0:	e033      	b.n	8002f1a <HAL_RCC_OscConfig+0x422>
 8002eb2:	2000      	movs	r0, #0
 8002eb4:	e031      	b.n	8002f1a <HAL_RCC_OscConfig+0x422>
      pll_config = RCC->PLLCFGR;
 8002eb6:	4a1c      	ldr	r2, [pc, #112]	; (8002f28 <HAL_RCC_OscConfig+0x430>)
 8002eb8:	6852      	ldr	r2, [r2, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d02f      	beq.n	8002f1e <HAL_RCC_OscConfig+0x426>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ebe:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002ec2:	69e1      	ldr	r1, [r4, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ec4:	428b      	cmp	r3, r1
 8002ec6:	d001      	beq.n	8002ecc <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 8002ec8:	2001      	movs	r0, #1
 8002eca:	e026      	b.n	8002f1a <HAL_RCC_OscConfig+0x422>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ecc:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 8002ed0:	6a21      	ldr	r1, [r4, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ed2:	428b      	cmp	r3, r1
 8002ed4:	d001      	beq.n	8002eda <HAL_RCC_OscConfig+0x3e2>
        return HAL_ERROR;
 8002ed6:	2001      	movs	r0, #1
 8002ed8:	e01f      	b.n	8002f1a <HAL_RCC_OscConfig+0x422>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002eda:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002edc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 8002ee6:	d001      	beq.n	8002eec <HAL_RCC_OscConfig+0x3f4>
        return HAL_ERROR;
 8002ee8:	2001      	movs	r0, #1
 8002eea:	e016      	b.n	8002f1a <HAL_RCC_OscConfig+0x422>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002eec:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 8002ef0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002ef2:	085b      	lsrs	r3, r3, #1
 8002ef4:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ef6:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 8002efa:	d001      	beq.n	8002f00 <HAL_RCC_OscConfig+0x408>
        return HAL_ERROR;
 8002efc:	2001      	movs	r0, #1
 8002efe:	e00c      	b.n	8002f1a <HAL_RCC_OscConfig+0x422>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f00:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8002f04:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f06:	ebb2 6f03 	cmp.w	r2, r3, lsl #24
 8002f0a:	d00a      	beq.n	8002f22 <HAL_RCC_OscConfig+0x42a>
        return HAL_ERROR;
 8002f0c:	2001      	movs	r0, #1
 8002f0e:	e004      	b.n	8002f1a <HAL_RCC_OscConfig+0x422>
    return HAL_ERROR;
 8002f10:	2001      	movs	r0, #1
}
 8002f12:	4770      	bx	lr
        return HAL_ERROR;
 8002f14:	2001      	movs	r0, #1
 8002f16:	e000      	b.n	8002f1a <HAL_RCC_OscConfig+0x422>
  return HAL_OK;
 8002f18:	2000      	movs	r0, #0
}
 8002f1a:	b002      	add	sp, #8
 8002f1c:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002f1e:	2001      	movs	r0, #1
 8002f20:	e7fb      	b.n	8002f1a <HAL_RCC_OscConfig+0x422>
  return HAL_OK;
 8002f22:	2000      	movs	r0, #0
 8002f24:	e7f9      	b.n	8002f1a <HAL_RCC_OscConfig+0x422>
 8002f26:	bf00      	nop
 8002f28:	40023800 	.word	0x40023800

08002f2c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f2c:	4b26      	ldr	r3, [pc, #152]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f003 030c 	and.w	r3, r3, #12
 8002f34:	2b04      	cmp	r3, #4
 8002f36:	d044      	beq.n	8002fc2 <HAL_RCC_GetSysClockFreq+0x96>
 8002f38:	2b08      	cmp	r3, #8
 8002f3a:	d001      	beq.n	8002f40 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f3c:	4823      	ldr	r0, [pc, #140]	; (8002fcc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002f3e:	4770      	bx	lr
{
 8002f40:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f44:	4b20      	ldr	r3, [pc, #128]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f46:	685a      	ldr	r2, [r3, #4]
 8002f48:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002f52:	d013      	beq.n	8002f7c <HAL_RCC_GetSysClockFreq+0x50>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f54:	4b1c      	ldr	r3, [pc, #112]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f56:	6859      	ldr	r1, [r3, #4]
 8002f58:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	481c      	ldr	r0, [pc, #112]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002f60:	fba1 0100 	umull	r0, r1, r1, r0
 8002f64:	f7fd feb8 	bl	8000cd8 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002f68:	4b17      	ldr	r3, [pc, #92]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002f70:	3301      	adds	r3, #1
 8002f72:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8002f74:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002f78:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f7c:	4b12      	ldr	r3, [pc, #72]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002f84:	461e      	mov	r6, r3
 8002f86:	2700      	movs	r7, #0
 8002f88:	015c      	lsls	r4, r3, #5
 8002f8a:	2500      	movs	r5, #0
 8002f8c:	1ae4      	subs	r4, r4, r3
 8002f8e:	eb65 0507 	sbc.w	r5, r5, r7
 8002f92:	01a9      	lsls	r1, r5, #6
 8002f94:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8002f98:	01a0      	lsls	r0, r4, #6
 8002f9a:	1b00      	subs	r0, r0, r4
 8002f9c:	eb61 0105 	sbc.w	r1, r1, r5
 8002fa0:	00cb      	lsls	r3, r1, #3
 8002fa2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002fa6:	00c4      	lsls	r4, r0, #3
 8002fa8:	19a0      	adds	r0, r4, r6
 8002faa:	eb43 0107 	adc.w	r1, r3, r7
 8002fae:	028b      	lsls	r3, r1, #10
 8002fb0:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8002fb4:	0284      	lsls	r4, r0, #10
 8002fb6:	4620      	mov	r0, r4
 8002fb8:	4619      	mov	r1, r3
 8002fba:	2300      	movs	r3, #0
 8002fbc:	f7fd fe8c 	bl	8000cd8 <__aeabi_uldivmod>
 8002fc0:	e7d2      	b.n	8002f68 <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = HSE_VALUE;
 8002fc2:	4803      	ldr	r0, [pc, #12]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	40023800 	.word	0x40023800
 8002fcc:	00f42400 	.word	0x00f42400
 8002fd0:	017d7840 	.word	0x017d7840

08002fd4 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8002fd4:	2800      	cmp	r0, #0
 8002fd6:	f000 80a3 	beq.w	8003120 <HAL_RCC_ClockConfig+0x14c>
{
 8002fda:	b570      	push	{r4, r5, r6, lr}
 8002fdc:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fde:	4b52      	ldr	r3, [pc, #328]	; (8003128 <HAL_RCC_ClockConfig+0x154>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 030f 	and.w	r3, r3, #15
 8002fe6:	428b      	cmp	r3, r1
 8002fe8:	d20c      	bcs.n	8003004 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fea:	4a4f      	ldr	r2, [pc, #316]	; (8003128 <HAL_RCC_ClockConfig+0x154>)
 8002fec:	6813      	ldr	r3, [r2, #0]
 8002fee:	f023 030f 	bic.w	r3, r3, #15
 8002ff2:	430b      	orrs	r3, r1
 8002ff4:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ff6:	6813      	ldr	r3, [r2, #0]
 8002ff8:	f003 030f 	and.w	r3, r3, #15
 8002ffc:	428b      	cmp	r3, r1
 8002ffe:	d001      	beq.n	8003004 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 8003000:	2001      	movs	r0, #1
}
 8003002:	bd70      	pop	{r4, r5, r6, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003004:	6823      	ldr	r3, [r4, #0]
 8003006:	f013 0f02 	tst.w	r3, #2
 800300a:	d017      	beq.n	800303c <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800300c:	f013 0f04 	tst.w	r3, #4
 8003010:	d004      	beq.n	800301c <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003012:	4a46      	ldr	r2, [pc, #280]	; (800312c <HAL_RCC_ClockConfig+0x158>)
 8003014:	6893      	ldr	r3, [r2, #8]
 8003016:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800301a:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800301c:	6823      	ldr	r3, [r4, #0]
 800301e:	f013 0f08 	tst.w	r3, #8
 8003022:	d004      	beq.n	800302e <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003024:	4a41      	ldr	r2, [pc, #260]	; (800312c <HAL_RCC_ClockConfig+0x158>)
 8003026:	6893      	ldr	r3, [r2, #8]
 8003028:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800302c:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800302e:	4a3f      	ldr	r2, [pc, #252]	; (800312c <HAL_RCC_ClockConfig+0x158>)
 8003030:	6893      	ldr	r3, [r2, #8]
 8003032:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003036:	68a0      	ldr	r0, [r4, #8]
 8003038:	4303      	orrs	r3, r0
 800303a:	6093      	str	r3, [r2, #8]
 800303c:	460d      	mov	r5, r1
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800303e:	6823      	ldr	r3, [r4, #0]
 8003040:	f013 0f01 	tst.w	r3, #1
 8003044:	d031      	beq.n	80030aa <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003046:	6863      	ldr	r3, [r4, #4]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d020      	beq.n	800308e <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800304c:	2b02      	cmp	r3, #2
 800304e:	d025      	beq.n	800309c <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003050:	4a36      	ldr	r2, [pc, #216]	; (800312c <HAL_RCC_ClockConfig+0x158>)
 8003052:	6812      	ldr	r2, [r2, #0]
 8003054:	f012 0f02 	tst.w	r2, #2
 8003058:	d064      	beq.n	8003124 <HAL_RCC_ClockConfig+0x150>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800305a:	4934      	ldr	r1, [pc, #208]	; (800312c <HAL_RCC_ClockConfig+0x158>)
 800305c:	688a      	ldr	r2, [r1, #8]
 800305e:	f022 0203 	bic.w	r2, r2, #3
 8003062:	4313      	orrs	r3, r2
 8003064:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8003066:	f7fe fe71 	bl	8001d4c <HAL_GetTick>
 800306a:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800306c:	4b2f      	ldr	r3, [pc, #188]	; (800312c <HAL_RCC_ClockConfig+0x158>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f003 030c 	and.w	r3, r3, #12
 8003074:	6862      	ldr	r2, [r4, #4]
 8003076:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800307a:	d016      	beq.n	80030aa <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800307c:	f7fe fe66 	bl	8001d4c <HAL_GetTick>
 8003080:	1b80      	subs	r0, r0, r6
 8003082:	f241 3388 	movw	r3, #5000	; 0x1388
 8003086:	4298      	cmp	r0, r3
 8003088:	d9f0      	bls.n	800306c <HAL_RCC_ClockConfig+0x98>
        return HAL_TIMEOUT;
 800308a:	2003      	movs	r0, #3
 800308c:	e7b9      	b.n	8003002 <HAL_RCC_ClockConfig+0x2e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800308e:	4a27      	ldr	r2, [pc, #156]	; (800312c <HAL_RCC_ClockConfig+0x158>)
 8003090:	6812      	ldr	r2, [r2, #0]
 8003092:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8003096:	d1e0      	bne.n	800305a <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8003098:	2001      	movs	r0, #1
 800309a:	e7b2      	b.n	8003002 <HAL_RCC_ClockConfig+0x2e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800309c:	4a23      	ldr	r2, [pc, #140]	; (800312c <HAL_RCC_ClockConfig+0x158>)
 800309e:	6812      	ldr	r2, [r2, #0]
 80030a0:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80030a4:	d1d9      	bne.n	800305a <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80030a6:	2001      	movs	r0, #1
 80030a8:	e7ab      	b.n	8003002 <HAL_RCC_ClockConfig+0x2e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030aa:	4b1f      	ldr	r3, [pc, #124]	; (8003128 <HAL_RCC_ClockConfig+0x154>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 030f 	and.w	r3, r3, #15
 80030b2:	42ab      	cmp	r3, r5
 80030b4:	d90c      	bls.n	80030d0 <HAL_RCC_ClockConfig+0xfc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030b6:	4a1c      	ldr	r2, [pc, #112]	; (8003128 <HAL_RCC_ClockConfig+0x154>)
 80030b8:	6813      	ldr	r3, [r2, #0]
 80030ba:	f023 030f 	bic.w	r3, r3, #15
 80030be:	432b      	orrs	r3, r5
 80030c0:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030c2:	6813      	ldr	r3, [r2, #0]
 80030c4:	f003 030f 	and.w	r3, r3, #15
 80030c8:	42ab      	cmp	r3, r5
 80030ca:	d001      	beq.n	80030d0 <HAL_RCC_ClockConfig+0xfc>
      return HAL_ERROR;
 80030cc:	2001      	movs	r0, #1
 80030ce:	e798      	b.n	8003002 <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030d0:	6823      	ldr	r3, [r4, #0]
 80030d2:	f013 0f04 	tst.w	r3, #4
 80030d6:	d006      	beq.n	80030e6 <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030d8:	4a14      	ldr	r2, [pc, #80]	; (800312c <HAL_RCC_ClockConfig+0x158>)
 80030da:	6893      	ldr	r3, [r2, #8]
 80030dc:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80030e0:	68e1      	ldr	r1, [r4, #12]
 80030e2:	430b      	orrs	r3, r1
 80030e4:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030e6:	6823      	ldr	r3, [r4, #0]
 80030e8:	f013 0f08 	tst.w	r3, #8
 80030ec:	d007      	beq.n	80030fe <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030ee:	4a0f      	ldr	r2, [pc, #60]	; (800312c <HAL_RCC_ClockConfig+0x158>)
 80030f0:	6893      	ldr	r3, [r2, #8]
 80030f2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80030f6:	6921      	ldr	r1, [r4, #16]
 80030f8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80030fc:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030fe:	f7ff ff15 	bl	8002f2c <HAL_RCC_GetSysClockFreq>
 8003102:	4b0a      	ldr	r3, [pc, #40]	; (800312c <HAL_RCC_ClockConfig+0x158>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800310a:	4a09      	ldr	r2, [pc, #36]	; (8003130 <HAL_RCC_ClockConfig+0x15c>)
 800310c:	5cd3      	ldrb	r3, [r2, r3]
 800310e:	40d8      	lsrs	r0, r3
 8003110:	4b08      	ldr	r3, [pc, #32]	; (8003134 <HAL_RCC_ClockConfig+0x160>)
 8003112:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8003114:	4b08      	ldr	r3, [pc, #32]	; (8003138 <HAL_RCC_ClockConfig+0x164>)
 8003116:	6818      	ldr	r0, [r3, #0]
 8003118:	f7fe fdda 	bl	8001cd0 <HAL_InitTick>
  return HAL_OK;
 800311c:	2000      	movs	r0, #0
 800311e:	e770      	b.n	8003002 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8003120:	2001      	movs	r0, #1
}
 8003122:	4770      	bx	lr
        return HAL_ERROR;
 8003124:	2001      	movs	r0, #1
 8003126:	e76c      	b.n	8003002 <HAL_RCC_ClockConfig+0x2e>
 8003128:	40023c00 	.word	0x40023c00
 800312c:	40023800 	.word	0x40023800
 8003130:	08007edc 	.word	0x08007edc
 8003134:	200001cc 	.word	0x200001cc
 8003138:	200001d4 	.word	0x200001d4

0800313c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800313c:	4b01      	ldr	r3, [pc, #4]	; (8003144 <HAL_RCC_GetHCLKFreq+0x8>)
 800313e:	6818      	ldr	r0, [r3, #0]
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	200001cc 	.word	0x200001cc

08003148 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003148:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800314a:	f7ff fff7 	bl	800313c <HAL_RCC_GetHCLKFreq>
 800314e:	4b04      	ldr	r3, [pc, #16]	; (8003160 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003156:	4a03      	ldr	r2, [pc, #12]	; (8003164 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003158:	5cd3      	ldrb	r3, [r2, r3]
}
 800315a:	40d8      	lsrs	r0, r3
 800315c:	bd08      	pop	{r3, pc}
 800315e:	bf00      	nop
 8003160:	40023800 	.word	0x40023800
 8003164:	08007eec 	.word	0x08007eec

08003168 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003168:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800316a:	f7ff ffe7 	bl	800313c <HAL_RCC_GetHCLKFreq>
 800316e:	4b04      	ldr	r3, [pc, #16]	; (8003180 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8003176:	4a03      	ldr	r2, [pc, #12]	; (8003184 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003178:	5cd3      	ldrb	r3, [r2, r3]
}
 800317a:	40d8      	lsrs	r0, r3
 800317c:	bd08      	pop	{r3, pc}
 800317e:	bf00      	nop
 8003180:	40023800 	.word	0x40023800
 8003184:	08007eec 	.word	0x08007eec

08003188 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003188:	b5f0      	push	{r4, r5, r6, r7, lr}
 800318a:	b083      	sub	sp, #12
 800318c:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800318e:	6803      	ldr	r3, [r0, #0]
 8003190:	f013 0f01 	tst.w	r3, #1
 8003194:	d00c      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003196:	4ba4      	ldr	r3, [pc, #656]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003198:	689a      	ldr	r2, [r3, #8]
 800319a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800319e:	609a      	str	r2, [r3, #8]
 80031a0:	689a      	ldr	r2, [r3, #8]
 80031a2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80031a4:	430a      	orrs	r2, r1
 80031a6:	609a      	str	r2, [r3, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80031a8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80031aa:	b1c3      	cbz	r3, 80031de <HAL_RCCEx_PeriphCLKConfig+0x56>
  uint32_t plli2sused = 0;
 80031ac:	2600      	movs	r6, #0
 80031ae:	e000      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x2a>
 80031b0:	2600      	movs	r6, #0
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80031b2:	6823      	ldr	r3, [r4, #0]
 80031b4:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80031b8:	d015      	beq.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80031ba:	4a9b      	ldr	r2, [pc, #620]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80031bc:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80031c0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80031c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80031c6:	430b      	orrs	r3, r1
 80031c8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80031cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80031ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031d2:	d006      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f000 8105 	beq.w	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x25c>
  uint32_t pllsaiused = 0;
 80031da:	2500      	movs	r5, #0
 80031dc:	e004      	b.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x60>
      plli2sused = 1;
 80031de:	2601      	movs	r6, #1
 80031e0:	e7e7      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1;
 80031e2:	2601      	movs	r6, #1
 80031e4:	e7f6      	b.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  uint32_t pllsaiused = 0;
 80031e6:	2500      	movs	r5, #0
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80031e8:	6823      	ldr	r3, [r4, #0]
 80031ea:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80031ee:	d00f      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80031f0:	4a8d      	ldr	r2, [pc, #564]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80031f2:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80031f6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80031fa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80031fc:	430b      	orrs	r3, r1
 80031fe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003202:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003204:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003208:	f000 80ee 	beq.w	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800320c:	b903      	cbnz	r3, 8003210 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      pllsaiused = 1;
 800320e:	2501      	movs	r5, #1
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003210:	6823      	ldr	r3, [r4, #0]
 8003212:	f013 0f20 	tst.w	r3, #32
 8003216:	f040 80e9 	bne.w	80033ec <HAL_RCCEx_PeriphCLKConfig+0x264>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800321a:	6823      	ldr	r3, [r4, #0]
 800321c:	f013 0f10 	tst.w	r3, #16
 8003220:	d00c      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0xb4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003222:	4b81      	ldr	r3, [pc, #516]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003224:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003228:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800322c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8003230:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003234:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003236:	430a      	orrs	r2, r1
 8003238:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800323c:	6823      	ldr	r3, [r4, #0]
 800323e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8003242:	d008      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003244:	4a78      	ldr	r2, [pc, #480]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003246:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800324a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800324e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003250:	430b      	orrs	r3, r1
 8003252:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003256:	6823      	ldr	r3, [r4, #0]
 8003258:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800325c:	d008      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800325e:	4a72      	ldr	r2, [pc, #456]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003260:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003264:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8003268:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800326a:	430b      	orrs	r3, r1
 800326c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003270:	6823      	ldr	r3, [r4, #0]
 8003272:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003276:	d008      	beq.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003278:	4a6b      	ldr	r2, [pc, #428]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800327a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800327e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003282:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8003284:	430b      	orrs	r3, r1
 8003286:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800328a:	6823      	ldr	r3, [r4, #0]
 800328c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003290:	d008      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003292:	4a65      	ldr	r2, [pc, #404]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003294:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003298:	f023 0303 	bic.w	r3, r3, #3
 800329c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800329e:	430b      	orrs	r3, r1
 80032a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032a4:	6823      	ldr	r3, [r4, #0]
 80032a6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80032aa:	d008      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032ac:	4a5e      	ldr	r2, [pc, #376]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80032ae:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80032b2:	f023 030c 	bic.w	r3, r3, #12
 80032b6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80032b8:	430b      	orrs	r3, r1
 80032ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80032be:	6823      	ldr	r3, [r4, #0]
 80032c0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80032c4:	d008      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80032c6:	4a58      	ldr	r2, [pc, #352]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80032c8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80032cc:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80032d0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80032d2:	430b      	orrs	r3, r1
 80032d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80032d8:	6823      	ldr	r3, [r4, #0]
 80032da:	f413 7f00 	tst.w	r3, #512	; 0x200
 80032de:	d008      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80032e0:	4a51      	ldr	r2, [pc, #324]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80032e2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80032e6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80032ea:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80032ec:	430b      	orrs	r3, r1
 80032ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80032f2:	6823      	ldr	r3, [r4, #0]
 80032f4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80032f8:	d008      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80032fa:	4a4b      	ldr	r2, [pc, #300]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80032fc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003300:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003304:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8003306:	430b      	orrs	r3, r1
 8003308:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800330c:	6823      	ldr	r3, [r4, #0]
 800330e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003312:	d008      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003314:	4a44      	ldr	r2, [pc, #272]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003316:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800331a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800331e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003320:	430b      	orrs	r3, r1
 8003322:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003326:	6823      	ldr	r3, [r4, #0]
 8003328:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800332c:	d008      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800332e:	4a3e      	ldr	r2, [pc, #248]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003330:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003334:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003338:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800333a:	430b      	orrs	r3, r1
 800333c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003340:	6823      	ldr	r3, [r4, #0]
 8003342:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8003346:	d008      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x1d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003348:	4a37      	ldr	r2, [pc, #220]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800334a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800334e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003352:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003354:	430b      	orrs	r3, r1
 8003356:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800335a:	6823      	ldr	r3, [r4, #0]
 800335c:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8003360:	d00d      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003362:	4a31      	ldr	r2, [pc, #196]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003364:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003368:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800336c:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800336e:	430b      	orrs	r3, r1
 8003370:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003374:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8003376:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800337a:	f000 80a1 	beq.w	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x338>
      pllsaiused = 1;
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800337e:	6823      	ldr	r3, [r4, #0]
 8003380:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8003384:	d008      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003386:	4a28      	ldr	r2, [pc, #160]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003388:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800338c:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8003390:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8003392:	430b      	orrs	r3, r1
 8003394:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003398:	6823      	ldr	r3, [r4, #0]
 800339a:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800339e:	d008      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80033a0:	4a21      	ldr	r2, [pc, #132]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80033a2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80033a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033aa:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80033ac:	430b      	orrs	r3, r1
 80033ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80033b2:	6823      	ldr	r3, [r4, #0]
 80033b4:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 80033b8:	d008      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80033ba:	4a1b      	ldr	r2, [pc, #108]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80033bc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80033c0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80033c4:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80033c6:	430b      	orrs	r3, r1
 80033c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80033cc:	2e00      	cmp	r6, #0
 80033ce:	d179      	bne.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80033d0:	6823      	ldr	r3, [r4, #0]
 80033d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033d6:	d075      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80033d8:	2d00      	cmp	r5, #0
 80033da:	f040 80e3 	bne.w	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80033de:	2000      	movs	r0, #0
}
 80033e0:	b003      	add	sp, #12
 80033e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pllsaiused = 1;
 80033e4:	2501      	movs	r5, #1
 80033e6:	e6ff      	b.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x60>
      plli2sused = 1;
 80033e8:	2601      	movs	r6, #1
 80033ea:	e70f      	b.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x84>
    __HAL_RCC_PWR_CLK_ENABLE();
 80033ec:	4b0e      	ldr	r3, [pc, #56]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80033ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033f0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80033f4:	641a      	str	r2, [r3, #64]	; 0x40
 80033f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033fc:	9301      	str	r3, [sp, #4]
 80033fe:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8003400:	4a0a      	ldr	r2, [pc, #40]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003402:	6813      	ldr	r3, [r2, #0]
 8003404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003408:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800340a:	f7fe fc9f 	bl	8001d4c <HAL_GetTick>
 800340e:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003410:	4b06      	ldr	r3, [pc, #24]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003418:	d10a      	bne.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800341a:	f7fe fc97 	bl	8001d4c <HAL_GetTick>
 800341e:	1bc0      	subs	r0, r0, r7
 8003420:	2864      	cmp	r0, #100	; 0x64
 8003422:	d9f5      	bls.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x288>
        return HAL_TIMEOUT;
 8003424:	2003      	movs	r0, #3
 8003426:	e7db      	b.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x258>
 8003428:	40023800 	.word	0x40023800
 800342c:	40007000 	.word	0x40007000
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003430:	4b8d      	ldr	r3, [pc, #564]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8003432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003434:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003438:	d015      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800343a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800343c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003440:	429a      	cmp	r2, r3
 8003442:	d010      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003444:	4b88      	ldr	r3, [pc, #544]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8003446:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003448:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800344c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800344e:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8003452:	6719      	str	r1, [r3, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003454:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003456:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800345a:	6719      	str	r1, [r3, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 800345c:	671a      	str	r2, [r3, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800345e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003460:	f013 0f01 	tst.w	r3, #1
 8003464:	d112      	bne.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x304>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003466:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003468:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800346c:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8003470:	d01d      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x326>
 8003472:	4a7d      	ldr	r2, [pc, #500]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8003474:	6893      	ldr	r3, [r2, #8]
 8003476:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800347a:	6093      	str	r3, [r2, #8]
 800347c:	497a      	ldr	r1, [pc, #488]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800347e:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8003480:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003482:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8003486:	4313      	orrs	r3, r2
 8003488:	670b      	str	r3, [r1, #112]	; 0x70
 800348a:	e6c6      	b.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x92>
        tickstart = HAL_GetTick();
 800348c:	f7fe fc5e 	bl	8001d4c <HAL_GetTick>
 8003490:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003492:	4b75      	ldr	r3, [pc, #468]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8003494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003496:	f013 0f02 	tst.w	r3, #2
 800349a:	d1e4      	bne.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x2de>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800349c:	f7fe fc56 	bl	8001d4c <HAL_GetTick>
 80034a0:	1bc0      	subs	r0, r0, r7
 80034a2:	f241 3388 	movw	r3, #5000	; 0x1388
 80034a6:	4298      	cmp	r0, r3
 80034a8:	d9f3      	bls.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x30a>
            return HAL_TIMEOUT;
 80034aa:	2003      	movs	r0, #3
 80034ac:	e798      	b.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x258>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034ae:	486e      	ldr	r0, [pc, #440]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80034b0:	6882      	ldr	r2, [r0, #8]
 80034b2:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80034b6:	496d      	ldr	r1, [pc, #436]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034b8:	4019      	ands	r1, r3
 80034ba:	430a      	orrs	r2, r1
 80034bc:	6082      	str	r2, [r0, #8]
 80034be:	e7dd      	b.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      pllsaiused = 1;
 80034c0:	2501      	movs	r5, #1
 80034c2:	e75c      	b.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    __HAL_RCC_PLLI2S_DISABLE();
 80034c4:	4a68      	ldr	r2, [pc, #416]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80034c6:	6813      	ldr	r3, [r2, #0]
 80034c8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80034cc:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80034ce:	f7fe fc3d 	bl	8001d4c <HAL_GetTick>
 80034d2:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80034d4:	4b64      	ldr	r3, [pc, #400]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80034dc:	d006      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x364>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80034de:	f7fe fc35 	bl	8001d4c <HAL_GetTick>
 80034e2:	1b80      	subs	r0, r0, r6
 80034e4:	2864      	cmp	r0, #100	; 0x64
 80034e6:	d9f5      	bls.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
        return HAL_TIMEOUT;
 80034e8:	2003      	movs	r0, #3
 80034ea:	e779      	b.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x258>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80034ec:	6823      	ldr	r3, [r4, #0]
 80034ee:	f013 0f01 	tst.w	r3, #1
 80034f2:	d00e      	beq.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x38a>
 80034f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80034f6:	b963      	cbnz	r3, 8003512 <HAL_RCCEx_PeriphCLKConfig+0x38a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80034f8:	4a5b      	ldr	r2, [pc, #364]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80034fa:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 80034fe:	6861      	ldr	r1, [r4, #4]
 8003500:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8003504:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8003508:	68a1      	ldr	r1, [r4, #8]
 800350a:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800350e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003512:	6823      	ldr	r3, [r4, #0]
 8003514:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8003518:	d003      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 800351a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800351c:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8003520:	d006      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8003522:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003526:	d019      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x3d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003528:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800352a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800352e:	d115      	bne.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x3d4>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003530:	4a4d      	ldr	r2, [pc, #308]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8003532:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8003536:	6860      	ldr	r0, [r4, #4]
 8003538:	68e3      	ldr	r3, [r4, #12]
 800353a:	061b      	lsls	r3, r3, #24
 800353c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003540:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8003544:	430b      	orrs	r3, r1
 8003546:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800354a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800354e:	f023 031f 	bic.w	r3, r3, #31
 8003552:	69e1      	ldr	r1, [r4, #28]
 8003554:	3901      	subs	r1, #1
 8003556:	430b      	orrs	r3, r1
 8003558:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800355c:	6823      	ldr	r3, [r4, #0]
 800355e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003562:	d00a      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003564:	6862      	ldr	r2, [r4, #4]
 8003566:	68e3      	ldr	r3, [r4, #12]
 8003568:	061b      	lsls	r3, r3, #24
 800356a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800356e:	68a2      	ldr	r2, [r4, #8]
 8003570:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8003574:	4a3c      	ldr	r2, [pc, #240]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8003576:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800357a:	4a3b      	ldr	r2, [pc, #236]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800357c:	6813      	ldr	r3, [r2, #0]
 800357e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003582:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003584:	f7fe fbe2 	bl	8001d4c <HAL_GetTick>
 8003588:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800358a:	4b37      	ldr	r3, [pc, #220]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003592:	f47f af21 	bne.w	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x250>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003596:	f7fe fbd9 	bl	8001d4c <HAL_GetTick>
 800359a:	1b80      	subs	r0, r0, r6
 800359c:	2864      	cmp	r0, #100	; 0x64
 800359e:	d9f4      	bls.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x402>
        return HAL_TIMEOUT;
 80035a0:	2003      	movs	r0, #3
 80035a2:	e71d      	b.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x258>
    __HAL_RCC_PLLSAI_DISABLE();
 80035a4:	4a30      	ldr	r2, [pc, #192]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80035a6:	6813      	ldr	r3, [r2, #0]
 80035a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035ac:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80035ae:	f7fe fbcd 	bl	8001d4c <HAL_GetTick>
 80035b2:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80035b4:	4b2c      	ldr	r3, [pc, #176]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80035bc:	d006      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x444>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80035be:	f7fe fbc5 	bl	8001d4c <HAL_GetTick>
 80035c2:	1b40      	subs	r0, r0, r5
 80035c4:	2864      	cmp	r0, #100	; 0x64
 80035c6:	d9f5      	bls.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
        return HAL_TIMEOUT;
 80035c8:	2003      	movs	r0, #3
 80035ca:	e709      	b.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x258>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80035cc:	6823      	ldr	r3, [r4, #0]
 80035ce:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80035d2:	d001      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x450>
 80035d4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80035d6:	b122      	cbz	r2, 80035e2 <HAL_RCCEx_PeriphCLKConfig+0x45a>
 80035d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80035dc:	d018      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x488>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80035de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80035e0:	b9b3      	cbnz	r3, 8003610 <HAL_RCCEx_PeriphCLKConfig+0x488>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80035e2:	4a21      	ldr	r2, [pc, #132]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80035e4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 80035e8:	6921      	ldr	r1, [r4, #16]
 80035ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035ee:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80035f2:	6961      	ldr	r1, [r4, #20]
 80035f4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80035f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80035fc:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8003600:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8003604:	6a21      	ldr	r1, [r4, #32]
 8003606:	3901      	subs	r1, #1
 8003608:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800360c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003610:	6823      	ldr	r3, [r4, #0]
 8003612:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8003616:	d003      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003618:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800361a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800361e:	d013      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
    __HAL_RCC_PLLSAI_ENABLE();
 8003620:	4a11      	ldr	r2, [pc, #68]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8003622:	6813      	ldr	r3, [r2, #0]
 8003624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003628:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800362a:	f7fe fb8f 	bl	8001d4c <HAL_GetTick>
 800362e:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003630:	4b0d      	ldr	r3, [pc, #52]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8003638:	d114      	bne.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800363a:	f7fe fb87 	bl	8001d4c <HAL_GetTick>
 800363e:	1b00      	subs	r0, r0, r4
 8003640:	2864      	cmp	r0, #100	; 0x64
 8003642:	d9f5      	bls.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        return HAL_TIMEOUT;
 8003644:	2003      	movs	r0, #3
 8003646:	e6cb      	b.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003648:	4907      	ldr	r1, [pc, #28]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800364a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 800364e:	6920      	ldr	r0, [r4, #16]
 8003650:	69a3      	ldr	r3, [r4, #24]
 8003652:	041b      	lsls	r3, r3, #16
 8003654:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003658:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800365c:	4313      	orrs	r3, r2
 800365e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003662:	e7dd      	b.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x498>
  return HAL_OK;
 8003664:	2000      	movs	r0, #0
 8003666:	e6bb      	b.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x258>
 8003668:	40023800 	.word	0x40023800
 800366c:	0ffffcff 	.word	0x0ffffcff

08003670 <HAL_SPI_Init>:
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003670:	2800      	cmp	r0, #0
 8003672:	d058      	beq.n	8003726 <HAL_SPI_Init+0xb6>
{
 8003674:	b510      	push	{r4, lr}
 8003676:	4604      	mov	r4, r0
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003678:	2300      	movs	r3, #0
 800367a:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800367c:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8003680:	2b00      	cmp	r3, #0
 8003682:	d045      	beq.n	8003710 <HAL_SPI_Init+0xa0>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003684:	2302      	movs	r3, #2
 8003686:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800368a:	6822      	ldr	r2, [r4, #0]
 800368c:	6813      	ldr	r3, [r2, #0]
 800368e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003692:	6013      	str	r3, [r2, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003694:	68e3      	ldr	r3, [r4, #12]
 8003696:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800369a:	d93e      	bls.n	800371a <HAL_SPI_Init+0xaa>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800369c:	2200      	movs	r2, #0
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800369e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80036a2:	bf18      	it	ne
 80036a4:	f5b3 6fe0 	cmpne.w	r3, #1792	; 0x700
 80036a8:	d001      	beq.n	80036ae <HAL_SPI_Init+0x3e>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036aa:	2100      	movs	r1, #0
 80036ac:	62a1      	str	r1, [r4, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80036ae:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80036b0:	b921      	cbnz	r1, 80036bc <HAL_SPI_Init+0x4c>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80036b2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80036b6:	d933      	bls.n	8003720 <HAL_SPI_Init+0xb0>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80036b8:	2302      	movs	r3, #2
 80036ba:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80036bc:	6863      	ldr	r3, [r4, #4]
 80036be:	68a1      	ldr	r1, [r4, #8]
 80036c0:	430b      	orrs	r3, r1
 80036c2:	6921      	ldr	r1, [r4, #16]
 80036c4:	430b      	orrs	r3, r1
 80036c6:	6961      	ldr	r1, [r4, #20]
 80036c8:	430b      	orrs	r3, r1
 80036ca:	69a1      	ldr	r1, [r4, #24]
 80036cc:	f401 7100 	and.w	r1, r1, #512	; 0x200
 80036d0:	430b      	orrs	r3, r1
 80036d2:	69e1      	ldr	r1, [r4, #28]
 80036d4:	430b      	orrs	r3, r1
 80036d6:	6a21      	ldr	r1, [r4, #32]
 80036d8:	430b      	orrs	r3, r1
 80036da:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80036dc:	6821      	ldr	r1, [r4, #0]
 80036de:	4303      	orrs	r3, r0
 80036e0:	600b      	str	r3, [r1, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80036e2:	8b63      	ldrh	r3, [r4, #26]
 80036e4:	f003 0304 	and.w	r3, r3, #4
 80036e8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80036ea:	430b      	orrs	r3, r1
 80036ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80036ee:	430b      	orrs	r3, r1
 80036f0:	68e1      	ldr	r1, [r4, #12]
 80036f2:	430b      	orrs	r3, r1
 80036f4:	6821      	ldr	r1, [r4, #0]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	604b      	str	r3, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80036fa:	6822      	ldr	r2, [r4, #0]
 80036fc:	69d3      	ldr	r3, [r2, #28]
 80036fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003702:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003704:	2000      	movs	r0, #0
 8003706:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003708:	2301      	movs	r3, #1
 800370a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
}
 800370e:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8003710:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8003714:	f7fe f9b4 	bl	8001a80 <HAL_SPI_MspInit>
 8003718:	e7b4      	b.n	8003684 <HAL_SPI_Init+0x14>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800371a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800371e:	e7be      	b.n	800369e <HAL_SPI_Init+0x2e>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003720:	2301      	movs	r3, #1
 8003722:	6323      	str	r3, [r4, #48]	; 0x30
 8003724:	e7ca      	b.n	80036bc <HAL_SPI_Init+0x4c>
    return HAL_ERROR;
 8003726:	2001      	movs	r0, #1
}
 8003728:	4770      	bx	lr
	...

0800372c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800372c:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800372e:	6a03      	ldr	r3, [r0, #32]
 8003730:	f023 0301 	bic.w	r3, r3, #1
 8003734:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003736:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003738:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800373a:	6985      	ldr	r5, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800373c:	4c12      	ldr	r4, [pc, #72]	; (8003788 <TIM_OC1_SetConfig+0x5c>)
 800373e:	402c      	ands	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003740:	680d      	ldr	r5, [r1, #0]
 8003742:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003744:	f023 0402 	bic.w	r4, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003748:	688b      	ldr	r3, [r1, #8]
 800374a:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800374c:	4c0f      	ldr	r4, [pc, #60]	; (800378c <TIM_OC1_SetConfig+0x60>)
 800374e:	4e10      	ldr	r6, [pc, #64]	; (8003790 <TIM_OC1_SetConfig+0x64>)
 8003750:	42b0      	cmp	r0, r6
 8003752:	bf18      	it	ne
 8003754:	42a0      	cmpne	r0, r4
 8003756:	bf0c      	ite	eq
 8003758:	2401      	moveq	r4, #1
 800375a:	2400      	movne	r4, #0
 800375c:	d105      	bne.n	800376a <TIM_OC1_SetConfig+0x3e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800375e:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003762:	68ce      	ldr	r6, [r1, #12]
 8003764:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003766:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800376a:	b12c      	cbz	r4, 8003778 <TIM_OC1_SetConfig+0x4c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800376c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003770:	694c      	ldr	r4, [r1, #20]
 8003772:	4314      	orrs	r4, r2
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003774:	698a      	ldr	r2, [r1, #24]
 8003776:	4322      	orrs	r2, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003778:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800377a:	6185      	str	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800377c:	684a      	ldr	r2, [r1, #4]
 800377e:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003780:	6203      	str	r3, [r0, #32]
}
 8003782:	bc70      	pop	{r4, r5, r6}
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	fffeff8c 	.word	0xfffeff8c
 800378c:	40010000 	.word	0x40010000
 8003790:	40010400 	.word	0x40010400

08003794 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003794:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003796:	6a03      	ldr	r3, [r0, #32]
 8003798:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800379c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800379e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037a0:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037a2:	69c5      	ldr	r5, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80037a4:	4c14      	ldr	r4, [pc, #80]	; (80037f8 <TIM_OC3_SetConfig+0x64>)
 80037a6:	402c      	ands	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037a8:	680e      	ldr	r6, [r1, #0]
 80037aa:	4326      	orrs	r6, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80037ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80037b0:	688c      	ldr	r4, [r1, #8]
 80037b2:	ea43 2304 	orr.w	r3, r3, r4, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80037b6:	4c11      	ldr	r4, [pc, #68]	; (80037fc <TIM_OC3_SetConfig+0x68>)
 80037b8:	4d11      	ldr	r5, [pc, #68]	; (8003800 <TIM_OC3_SetConfig+0x6c>)
 80037ba:	42a8      	cmp	r0, r5
 80037bc:	bf18      	it	ne
 80037be:	42a0      	cmpne	r0, r4
 80037c0:	bf0c      	ite	eq
 80037c2:	2401      	moveq	r4, #1
 80037c4:	2400      	movne	r4, #0
 80037c6:	d106      	bne.n	80037d6 <TIM_OC3_SetConfig+0x42>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80037c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80037cc:	68cd      	ldr	r5, [r1, #12]
 80037ce:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80037d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037d6:	b13c      	cbz	r4, 80037e8 <TIM_OC3_SetConfig+0x54>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80037d8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037dc:	694c      	ldr	r4, [r1, #20]
 80037de:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037e2:	698c      	ldr	r4, [r1, #24]
 80037e4:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037e8:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037ea:	61c6      	str	r6, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037ec:	684a      	ldr	r2, [r1, #4]
 80037ee:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037f0:	6203      	str	r3, [r0, #32]
}
 80037f2:	bc70      	pop	{r4, r5, r6}
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	fffeff8c 	.word	0xfffeff8c
 80037fc:	40010000 	.word	0x40010000
 8003800:	40010400 	.word	0x40010400

08003804 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003804:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003806:	6a03      	ldr	r3, [r0, #32]
 8003808:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800380c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800380e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003810:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003812:	69c5      	ldr	r5, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003814:	4a0d      	ldr	r2, [pc, #52]	; (800384c <TIM_OC4_SetConfig+0x48>)
 8003816:	402a      	ands	r2, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003818:	680d      	ldr	r5, [r1, #0]
 800381a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800381e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003822:	688d      	ldr	r5, [r1, #8]
 8003824:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003828:	4e09      	ldr	r6, [pc, #36]	; (8003850 <TIM_OC4_SetConfig+0x4c>)
 800382a:	4d0a      	ldr	r5, [pc, #40]	; (8003854 <TIM_OC4_SetConfig+0x50>)
 800382c:	42a8      	cmp	r0, r5
 800382e:	bf18      	it	ne
 8003830:	42b0      	cmpne	r0, r6
 8003832:	d104      	bne.n	800383e <TIM_OC4_SetConfig+0x3a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003834:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003838:	694d      	ldr	r5, [r1, #20]
 800383a:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800383e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003840:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003842:	684a      	ldr	r2, [r1, #4]
 8003844:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003846:	6203      	str	r3, [r0, #32]
}
 8003848:	bc70      	pop	{r4, r5, r6}
 800384a:	4770      	bx	lr
 800384c:	feff8cff 	.word	0xfeff8cff
 8003850:	40010000 	.word	0x40010000
 8003854:	40010400 	.word	0x40010400

08003858 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003858:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800385a:	6a03      	ldr	r3, [r0, #32]
 800385c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003860:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003862:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003864:	6842      	ldr	r2, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003866:	6d44      	ldr	r4, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003868:	4d0d      	ldr	r5, [pc, #52]	; (80038a0 <TIM_OC5_SetConfig+0x48>)
 800386a:	4025      	ands	r5, r4
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800386c:	680c      	ldr	r4, [r1, #0]
 800386e:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003870:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003874:	688d      	ldr	r5, [r1, #8]
 8003876:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800387a:	4e0a      	ldr	r6, [pc, #40]	; (80038a4 <TIM_OC5_SetConfig+0x4c>)
 800387c:	4d0a      	ldr	r5, [pc, #40]	; (80038a8 <TIM_OC5_SetConfig+0x50>)
 800387e:	42a8      	cmp	r0, r5
 8003880:	bf18      	it	ne
 8003882:	42b0      	cmpne	r0, r6
 8003884:	d104      	bne.n	8003890 <TIM_OC5_SetConfig+0x38>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003886:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800388a:	694d      	ldr	r5, [r1, #20]
 800388c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003890:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003892:	6544      	str	r4, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003894:	684a      	ldr	r2, [r1, #4]
 8003896:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003898:	6203      	str	r3, [r0, #32]
}
 800389a:	bc70      	pop	{r4, r5, r6}
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	fffeff8f 	.word	0xfffeff8f
 80038a4:	40010000 	.word	0x40010000
 80038a8:	40010400 	.word	0x40010400

080038ac <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80038ac:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80038ae:	6a03      	ldr	r3, [r0, #32]
 80038b0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80038b4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038b6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038b8:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80038ba:	6d45      	ldr	r5, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80038bc:	4a0d      	ldr	r2, [pc, #52]	; (80038f4 <TIM_OC6_SetConfig+0x48>)
 80038be:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038c0:	680d      	ldr	r5, [r1, #0]
 80038c2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80038c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80038ca:	688d      	ldr	r5, [r1, #8]
 80038cc:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038d0:	4e09      	ldr	r6, [pc, #36]	; (80038f8 <TIM_OC6_SetConfig+0x4c>)
 80038d2:	4d0a      	ldr	r5, [pc, #40]	; (80038fc <TIM_OC6_SetConfig+0x50>)
 80038d4:	42a8      	cmp	r0, r5
 80038d6:	bf18      	it	ne
 80038d8:	42b0      	cmpne	r0, r6
 80038da:	d104      	bne.n	80038e6 <TIM_OC6_SetConfig+0x3a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80038dc:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80038e0:	694d      	ldr	r5, [r1, #20]
 80038e2:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038e6:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80038e8:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80038ea:	684a      	ldr	r2, [r1, #4]
 80038ec:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038ee:	6203      	str	r3, [r0, #32]
}
 80038f0:	bc70      	pop	{r4, r5, r6}
 80038f2:	4770      	bx	lr
 80038f4:	feff8fff 	.word	0xfeff8fff
 80038f8:	40010000 	.word	0x40010000
 80038fc:	40010400 	.word	0x40010400

08003900 <TIM_Base_SetConfig>:
{
 8003900:	b470      	push	{r4, r5, r6}
  tmpcr1 = TIMx->CR1;
 8003902:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003904:	4c3a      	ldr	r4, [pc, #232]	; (80039f0 <TIM_Base_SetConfig+0xf0>)
 8003906:	42a0      	cmp	r0, r4
 8003908:	bf14      	ite	ne
 800390a:	2400      	movne	r4, #0
 800390c:	2401      	moveq	r4, #1
 800390e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003912:	bf14      	ite	ne
 8003914:	4622      	movne	r2, r4
 8003916:	f044 0201 	orreq.w	r2, r4, #1
 800391a:	b9aa      	cbnz	r2, 8003948 <TIM_Base_SetConfig+0x48>
 800391c:	4d35      	ldr	r5, [pc, #212]	; (80039f4 <TIM_Base_SetConfig+0xf4>)
 800391e:	42a8      	cmp	r0, r5
 8003920:	bf14      	ite	ne
 8003922:	2500      	movne	r5, #0
 8003924:	2501      	moveq	r5, #1
 8003926:	4e34      	ldr	r6, [pc, #208]	; (80039f8 <TIM_Base_SetConfig+0xf8>)
 8003928:	42b0      	cmp	r0, r6
 800392a:	d00d      	beq.n	8003948 <TIM_Base_SetConfig+0x48>
 800392c:	b965      	cbnz	r5, 8003948 <TIM_Base_SetConfig+0x48>
 800392e:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8003932:	f505 3582 	add.w	r5, r5, #66560	; 0x10400
 8003936:	42a8      	cmp	r0, r5
 8003938:	bf14      	ite	ne
 800393a:	2500      	movne	r5, #0
 800393c:	2501      	moveq	r5, #1
 800393e:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8003942:	42b0      	cmp	r0, r6
 8003944:	d000      	beq.n	8003948 <TIM_Base_SetConfig+0x48>
 8003946:	b11d      	cbz	r5, 8003950 <TIM_Base_SetConfig+0x50>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003948:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800394c:	684d      	ldr	r5, [r1, #4]
 800394e:	432b      	orrs	r3, r5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003950:	2a00      	cmp	r2, #0
 8003952:	d133      	bne.n	80039bc <TIM_Base_SetConfig+0xbc>
 8003954:	4a27      	ldr	r2, [pc, #156]	; (80039f4 <TIM_Base_SetConfig+0xf4>)
 8003956:	4290      	cmp	r0, r2
 8003958:	bf14      	ite	ne
 800395a:	2200      	movne	r2, #0
 800395c:	2201      	moveq	r2, #1
 800395e:	4d26      	ldr	r5, [pc, #152]	; (80039f8 <TIM_Base_SetConfig+0xf8>)
 8003960:	42a8      	cmp	r0, r5
 8003962:	d02b      	beq.n	80039bc <TIM_Base_SetConfig+0xbc>
 8003964:	bb52      	cbnz	r2, 80039bc <TIM_Base_SetConfig+0xbc>
 8003966:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800396a:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 800396e:	4290      	cmp	r0, r2
 8003970:	bf14      	ite	ne
 8003972:	2200      	movne	r2, #0
 8003974:	2201      	moveq	r2, #1
 8003976:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800397a:	42a8      	cmp	r0, r5
 800397c:	d01e      	beq.n	80039bc <TIM_Base_SetConfig+0xbc>
 800397e:	b9ea      	cbnz	r2, 80039bc <TIM_Base_SetConfig+0xbc>
 8003980:	4a1e      	ldr	r2, [pc, #120]	; (80039fc <TIM_Base_SetConfig+0xfc>)
 8003982:	4290      	cmp	r0, r2
 8003984:	bf14      	ite	ne
 8003986:	2200      	movne	r2, #0
 8003988:	2201      	moveq	r2, #1
 800398a:	f505 359a 	add.w	r5, r5, #78848	; 0x13400
 800398e:	42a8      	cmp	r0, r5
 8003990:	d014      	beq.n	80039bc <TIM_Base_SetConfig+0xbc>
 8003992:	b99a      	cbnz	r2, 80039bc <TIM_Base_SetConfig+0xbc>
 8003994:	4a1a      	ldr	r2, [pc, #104]	; (8003a00 <TIM_Base_SetConfig+0x100>)
 8003996:	4290      	cmp	r0, r2
 8003998:	bf14      	ite	ne
 800399a:	2200      	movne	r2, #0
 800399c:	2201      	moveq	r2, #1
 800399e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80039a2:	42a8      	cmp	r0, r5
 80039a4:	d00a      	beq.n	80039bc <TIM_Base_SetConfig+0xbc>
 80039a6:	b94a      	cbnz	r2, 80039bc <TIM_Base_SetConfig+0xbc>
 80039a8:	4a16      	ldr	r2, [pc, #88]	; (8003a04 <TIM_Base_SetConfig+0x104>)
 80039aa:	4290      	cmp	r0, r2
 80039ac:	bf14      	ite	ne
 80039ae:	2200      	movne	r2, #0
 80039b0:	2201      	moveq	r2, #1
 80039b2:	f5a5 3596 	sub.w	r5, r5, #76800	; 0x12c00
 80039b6:	42a8      	cmp	r0, r5
 80039b8:	d000      	beq.n	80039bc <TIM_Base_SetConfig+0xbc>
 80039ba:	b11a      	cbz	r2, 80039c4 <TIM_Base_SetConfig+0xc4>
    tmpcr1 &= ~TIM_CR1_CKD;
 80039bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039c0:	68ca      	ldr	r2, [r1, #12]
 80039c2:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039c8:	694a      	ldr	r2, [r1, #20]
 80039ca:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80039cc:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039ce:	688a      	ldr	r2, [r1, #8]
 80039d0:	62c2      	str	r2, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80039d2:	680a      	ldr	r2, [r1, #0]
 80039d4:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039d6:	4b0c      	ldr	r3, [pc, #48]	; (8003a08 <TIM_Base_SetConfig+0x108>)
 80039d8:	4298      	cmp	r0, r3
 80039da:	bf14      	ite	ne
 80039dc:	4623      	movne	r3, r4
 80039de:	f044 0301 	orreq.w	r3, r4, #1
 80039e2:	b10b      	cbz	r3, 80039e8 <TIM_Base_SetConfig+0xe8>
    TIMx->RCR = Structure->RepetitionCounter;
 80039e4:	690b      	ldr	r3, [r1, #16]
 80039e6:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80039e8:	2301      	movs	r3, #1
 80039ea:	6143      	str	r3, [r0, #20]
}
 80039ec:	bc70      	pop	{r4, r5, r6}
 80039ee:	4770      	bx	lr
 80039f0:	40010000 	.word	0x40010000
 80039f4:	40000800 	.word	0x40000800
 80039f8:	40000400 	.word	0x40000400
 80039fc:	40014400 	.word	0x40014400
 8003a00:	40001800 	.word	0x40001800
 8003a04:	40002000 	.word	0x40002000
 8003a08:	40010400 	.word	0x40010400

08003a0c <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8003a0c:	b1a8      	cbz	r0, 8003a3a <HAL_TIM_PWM_Init+0x2e>
{
 8003a0e:	b510      	push	{r4, lr}
 8003a10:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003a12:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003a16:	b15b      	cbz	r3, 8003a30 <HAL_TIM_PWM_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8003a18:	2302      	movs	r3, #2
 8003a1a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a1e:	1d21      	adds	r1, r4, #4
 8003a20:	6820      	ldr	r0, [r4, #0]
 8003a22:	f7ff ff6d 	bl	8003900 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8003a26:	2301      	movs	r3, #1
 8003a28:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003a2c:	2000      	movs	r0, #0
}
 8003a2e:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003a30:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8003a34:	f7fe f858 	bl	8001ae8 <HAL_TIM_PWM_MspInit>
 8003a38:	e7ee      	b.n	8003a18 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8003a3a:	2001      	movs	r0, #1
}
 8003a3c:	4770      	bx	lr
	...

08003a40 <TIM_OC2_SetConfig>:
{
 8003a40:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a42:	6a03      	ldr	r3, [r0, #32]
 8003a44:	f023 0310 	bic.w	r3, r3, #16
 8003a48:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003a4a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003a4c:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003a4e:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a50:	4c14      	ldr	r4, [pc, #80]	; (8003aa4 <TIM_OC2_SetConfig+0x64>)
 8003a52:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a54:	680d      	ldr	r5, [r1, #0]
 8003a56:	ea44 2505 	orr.w	r5, r4, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8003a5a:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a5e:	688c      	ldr	r4, [r1, #8]
 8003a60:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a64:	4c10      	ldr	r4, [pc, #64]	; (8003aa8 <TIM_OC2_SetConfig+0x68>)
 8003a66:	4e11      	ldr	r6, [pc, #68]	; (8003aac <TIM_OC2_SetConfig+0x6c>)
 8003a68:	42b0      	cmp	r0, r6
 8003a6a:	bf18      	it	ne
 8003a6c:	42a0      	cmpne	r0, r4
 8003a6e:	bf0c      	ite	eq
 8003a70:	2401      	moveq	r4, #1
 8003a72:	2400      	movne	r4, #0
 8003a74:	d106      	bne.n	8003a84 <TIM_OC2_SetConfig+0x44>
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a7a:	68ce      	ldr	r6, [r1, #12]
 8003a7c:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a84:	b13c      	cbz	r4, 8003a96 <TIM_OC2_SetConfig+0x56>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a86:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a8a:	694c      	ldr	r4, [r1, #20]
 8003a8c:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a90:	698c      	ldr	r4, [r1, #24]
 8003a92:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 8003a96:	6042      	str	r2, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003a98:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003a9a:	684a      	ldr	r2, [r1, #4]
 8003a9c:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8003a9e:	6203      	str	r3, [r0, #32]
}
 8003aa0:	bc70      	pop	{r4, r5, r6}
 8003aa2:	4770      	bx	lr
 8003aa4:	feff8cff 	.word	0xfeff8cff
 8003aa8:	40010000 	.word	0x40010000
 8003aac:	40010400 	.word	0x40010400

08003ab0 <HAL_TIM_PWM_ConfigChannel>:
{
 8003ab0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8003ab2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	f000 8092 	beq.w	8003be0 <HAL_TIM_PWM_ConfigChannel+0x130>
 8003abc:	460d      	mov	r5, r1
 8003abe:	4604      	mov	r4, r0
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003ac6:	2302      	movs	r3, #2
 8003ac8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 8003acc:	2a14      	cmp	r2, #20
 8003ace:	d81e      	bhi.n	8003b0e <HAL_TIM_PWM_ConfigChannel+0x5e>
 8003ad0:	e8df f002 	tbb	[pc, r2]
 8003ad4:	1d1d1d0b 	.word	0x1d1d1d0b
 8003ad8:	1d1d1d24 	.word	0x1d1d1d24
 8003adc:	1d1d1d38 	.word	0x1d1d1d38
 8003ae0:	1d1d1d4b 	.word	0x1d1d1d4b
 8003ae4:	1d1d1d5f 	.word	0x1d1d1d5f
 8003ae8:	72          	.byte	0x72
 8003ae9:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003aea:	6800      	ldr	r0, [r0, #0]
 8003aec:	f7ff fe1e 	bl	800372c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003af0:	6822      	ldr	r2, [r4, #0]
 8003af2:	6993      	ldr	r3, [r2, #24]
 8003af4:	f043 0308 	orr.w	r3, r3, #8
 8003af8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003afa:	6822      	ldr	r2, [r4, #0]
 8003afc:	6993      	ldr	r3, [r2, #24]
 8003afe:	f023 0304 	bic.w	r3, r3, #4
 8003b02:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b04:	6822      	ldr	r2, [r4, #0]
 8003b06:	6993      	ldr	r3, [r2, #24]
 8003b08:	6929      	ldr	r1, [r5, #16]
 8003b0a:	430b      	orrs	r3, r1
 8003b0c:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003b14:	2000      	movs	r0, #0
 8003b16:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003b1a:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b1c:	6800      	ldr	r0, [r0, #0]
 8003b1e:	f7ff ff8f 	bl	8003a40 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b22:	6822      	ldr	r2, [r4, #0]
 8003b24:	6993      	ldr	r3, [r2, #24]
 8003b26:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003b2a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b2c:	6822      	ldr	r2, [r4, #0]
 8003b2e:	6993      	ldr	r3, [r2, #24]
 8003b30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b34:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b36:	6822      	ldr	r2, [r4, #0]
 8003b38:	6993      	ldr	r3, [r2, #24]
 8003b3a:	6929      	ldr	r1, [r5, #16]
 8003b3c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003b40:	6193      	str	r3, [r2, #24]
      break;
 8003b42:	e7e4      	b.n	8003b0e <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b44:	6800      	ldr	r0, [r0, #0]
 8003b46:	f7ff fe25 	bl	8003794 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b4a:	6822      	ldr	r2, [r4, #0]
 8003b4c:	69d3      	ldr	r3, [r2, #28]
 8003b4e:	f043 0308 	orr.w	r3, r3, #8
 8003b52:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b54:	6822      	ldr	r2, [r4, #0]
 8003b56:	69d3      	ldr	r3, [r2, #28]
 8003b58:	f023 0304 	bic.w	r3, r3, #4
 8003b5c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b5e:	6822      	ldr	r2, [r4, #0]
 8003b60:	69d3      	ldr	r3, [r2, #28]
 8003b62:	6929      	ldr	r1, [r5, #16]
 8003b64:	430b      	orrs	r3, r1
 8003b66:	61d3      	str	r3, [r2, #28]
      break;
 8003b68:	e7d1      	b.n	8003b0e <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b6a:	6800      	ldr	r0, [r0, #0]
 8003b6c:	f7ff fe4a 	bl	8003804 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b70:	6822      	ldr	r2, [r4, #0]
 8003b72:	69d3      	ldr	r3, [r2, #28]
 8003b74:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003b78:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b7a:	6822      	ldr	r2, [r4, #0]
 8003b7c:	69d3      	ldr	r3, [r2, #28]
 8003b7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b82:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b84:	6822      	ldr	r2, [r4, #0]
 8003b86:	69d3      	ldr	r3, [r2, #28]
 8003b88:	6929      	ldr	r1, [r5, #16]
 8003b8a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003b8e:	61d3      	str	r3, [r2, #28]
      break;
 8003b90:	e7bd      	b.n	8003b0e <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003b92:	6800      	ldr	r0, [r0, #0]
 8003b94:	f7ff fe60 	bl	8003858 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003b98:	6822      	ldr	r2, [r4, #0]
 8003b9a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003b9c:	f043 0308 	orr.w	r3, r3, #8
 8003ba0:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003ba2:	6822      	ldr	r2, [r4, #0]
 8003ba4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003ba6:	f023 0304 	bic.w	r3, r3, #4
 8003baa:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003bac:	6822      	ldr	r2, [r4, #0]
 8003bae:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003bb0:	6929      	ldr	r1, [r5, #16]
 8003bb2:	430b      	orrs	r3, r1
 8003bb4:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 8003bb6:	e7aa      	b.n	8003b0e <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003bb8:	6800      	ldr	r0, [r0, #0]
 8003bba:	f7ff fe77 	bl	80038ac <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003bbe:	6822      	ldr	r2, [r4, #0]
 8003bc0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003bc2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003bc6:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003bc8:	6822      	ldr	r2, [r4, #0]
 8003bca:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003bcc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bd0:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003bd2:	6822      	ldr	r2, [r4, #0]
 8003bd4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003bd6:	6929      	ldr	r1, [r5, #16]
 8003bd8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003bdc:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 8003bde:	e796      	b.n	8003b0e <HAL_TIM_PWM_ConfigChannel+0x5e>
  __HAL_LOCK(htim);
 8003be0:	2002      	movs	r0, #2
 8003be2:	e79a      	b.n	8003b1a <HAL_TIM_PWM_ConfigChannel+0x6a>

08003be4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003be4:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003be6:	f001 011f 	and.w	r1, r1, #31
 8003bea:	2301      	movs	r3, #1
 8003bec:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003bf0:	6a03      	ldr	r3, [r0, #32]
 8003bf2:	ea23 0304 	bic.w	r3, r3, r4
 8003bf6:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003bf8:	6a03      	ldr	r3, [r0, #32]
 8003bfa:	408a      	lsls	r2, r1
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	6203      	str	r3, [r0, #32]
}
 8003c00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c04:	4770      	bx	lr
	...

08003c08 <HAL_TIM_PWM_Start>:
{
 8003c08:	b510      	push	{r4, lr}
 8003c0a:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	6800      	ldr	r0, [r0, #0]
 8003c10:	f7ff ffe8 	bl	8003be4 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c14:	6823      	ldr	r3, [r4, #0]
 8003c16:	490c      	ldr	r1, [pc, #48]	; (8003c48 <HAL_TIM_PWM_Start+0x40>)
 8003c18:	4a0c      	ldr	r2, [pc, #48]	; (8003c4c <HAL_TIM_PWM_Start+0x44>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	bf18      	it	ne
 8003c1e:	428b      	cmpne	r3, r1
 8003c20:	d103      	bne.n	8003c2a <HAL_TIM_PWM_Start+0x22>
    __HAL_TIM_MOE_ENABLE(htim);
 8003c22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c28:	645a      	str	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c2a:	6822      	ldr	r2, [r4, #0]
 8003c2c:	6891      	ldr	r1, [r2, #8]
 8003c2e:	4b08      	ldr	r3, [pc, #32]	; (8003c50 <HAL_TIM_PWM_Start+0x48>)
 8003c30:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c32:	2b06      	cmp	r3, #6
 8003c34:	bf18      	it	ne
 8003c36:	f5b3 3f80 	cmpne.w	r3, #65536	; 0x10000
 8003c3a:	d003      	beq.n	8003c44 <HAL_TIM_PWM_Start+0x3c>
    __HAL_TIM_ENABLE(htim);
 8003c3c:	6813      	ldr	r3, [r2, #0]
 8003c3e:	f043 0301 	orr.w	r3, r3, #1
 8003c42:	6013      	str	r3, [r2, #0]
}
 8003c44:	2000      	movs	r0, #0
 8003c46:	bd10      	pop	{r4, pc}
 8003c48:	40010000 	.word	0x40010000
 8003c4c:	40010400 	.word	0x40010400
 8003c50:	00010007 	.word	0x00010007

08003c54 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c54:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d045      	beq.n	8003ce8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
{
 8003c5c:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 8003c5e:	2301      	movs	r3, #1
 8003c60:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c64:	2302      	movs	r3, #2
 8003c66:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c6a:	6803      	ldr	r3, [r0, #0]
 8003c6c:	685a      	ldr	r2, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c6e:	689d      	ldr	r5, [r3, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c70:	4e1e      	ldr	r6, [pc, #120]	; (8003cec <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 8003c72:	4c1f      	ldr	r4, [pc, #124]	; (8003cf0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8003c74:	42a3      	cmp	r3, r4
 8003c76:	bf18      	it	ne
 8003c78:	42b3      	cmpne	r3, r6
 8003c7a:	d103      	bne.n	8003c84 <HAL_TIMEx_MasterConfigSynchronization+0x30>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003c7c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003c80:	684c      	ldr	r4, [r1, #4]
 8003c82:	4322      	orrs	r2, r4
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c84:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c88:	680c      	ldr	r4, [r1, #0]
 8003c8a:	4322      	orrs	r2, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c8e:	6803      	ldr	r3, [r0, #0]
 8003c90:	4a16      	ldr	r2, [pc, #88]	; (8003cec <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 8003c92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c96:	bf18      	it	ne
 8003c98:	4293      	cmpne	r3, r2
 8003c9a:	d017      	beq.n	8003ccc <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8003c9c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d013      	beq.n	8003ccc <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8003ca4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d00f      	beq.n	8003ccc <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8003cac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d00b      	beq.n	8003ccc <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8003cb4:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d007      	beq.n	8003ccc <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8003cbc:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d003      	beq.n	8003ccc <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8003cc4:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d104      	bne.n	8003cd6 <HAL_TIMEx_MasterConfigSynchronization+0x82>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ccc:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cd0:	688a      	ldr	r2, [r1, #8]
 8003cd2:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cd4:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cdc:	2300      	movs	r3, #0
 8003cde:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8003ce2:	4618      	mov	r0, r3
}
 8003ce4:	bc70      	pop	{r4, r5, r6}
 8003ce6:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003ce8:	2002      	movs	r0, #2
}
 8003cea:	4770      	bx	lr
 8003cec:	40010000 	.word	0x40010000
 8003cf0:	40010400 	.word	0x40010400

08003cf4 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cf4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d03c      	beq.n	8003d76 <HAL_TIMEx_ConfigBreakDeadTime+0x82>
{
 8003cfc:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8003cfe:	2301      	movs	r3, #1
 8003d00:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003d04:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003d06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d0a:	688a      	ldr	r2, [r1, #8]
 8003d0c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003d0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d12:	684a      	ldr	r2, [r1, #4]
 8003d14:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003d16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d1a:	680a      	ldr	r2, [r1, #0]
 8003d1c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003d1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d22:	690a      	ldr	r2, [r1, #16]
 8003d24:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003d26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d2a:	694a      	ldr	r2, [r1, #20]
 8003d2c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003d2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d32:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8003d34:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003d36:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8003d3a:	698a      	ldr	r2, [r1, #24]
 8003d3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003d40:	6802      	ldr	r2, [r0, #0]
 8003d42:	4d0e      	ldr	r5, [pc, #56]	; (8003d7c <HAL_TIMEx_ConfigBreakDeadTime+0x88>)
 8003d44:	4c0e      	ldr	r4, [pc, #56]	; (8003d80 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 8003d46:	42a2      	cmp	r2, r4
 8003d48:	bf18      	it	ne
 8003d4a:	42aa      	cmpne	r2, r5
 8003d4c:	d10c      	bne.n	8003d68 <HAL_TIMEx_ConfigBreakDeadTime+0x74>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003d4e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003d52:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8003d54:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003d58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d5c:	69cc      	ldr	r4, [r1, #28]
 8003d5e:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003d60:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003d64:	6a09      	ldr	r1, [r1, #32]
 8003d66:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003d68:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8003d70:	4618      	mov	r0, r3
}
 8003d72:	bc30      	pop	{r4, r5}
 8003d74:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003d76:	2002      	movs	r0, #2
}
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	40010000 	.word	0x40010000
 8003d80:	40010400 	.word	0x40010400

08003d84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d84:	b510      	push	{r4, lr}
 8003d86:	4604      	mov	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d88:	6883      	ldr	r3, [r0, #8]
 8003d8a:	6902      	ldr	r2, [r0, #16]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	6942      	ldr	r2, [r0, #20]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	69c2      	ldr	r2, [r0, #28]
 8003d94:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d96:	6801      	ldr	r1, [r0, #0]
 8003d98:	6808      	ldr	r0, [r1, #0]
 8003d9a:	4a99      	ldr	r2, [pc, #612]	; (8004000 <UART_SetConfig+0x27c>)
 8003d9c:	4002      	ands	r2, r0
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003da2:	6822      	ldr	r2, [r4, #0]
 8003da4:	6853      	ldr	r3, [r2, #4]
 8003da6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003daa:	68e1      	ldr	r1, [r4, #12]
 8003dac:	430b      	orrs	r3, r1
 8003dae:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003db0:	69a2      	ldr	r2, [r4, #24]

  tmpreg |= huart->Init.OneBitSampling;
 8003db2:	6a23      	ldr	r3, [r4, #32]
 8003db4:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003db6:	6821      	ldr	r1, [r4, #0]
 8003db8:	688b      	ldr	r3, [r1, #8]
 8003dba:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	608b      	str	r3, [r1, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003dc2:	6823      	ldr	r3, [r4, #0]
 8003dc4:	4a8f      	ldr	r2, [pc, #572]	; (8004004 <UART_SetConfig+0x280>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d018      	beq.n	8003dfc <UART_SetConfig+0x78>
 8003dca:	4a8f      	ldr	r2, [pc, #572]	; (8004008 <UART_SetConfig+0x284>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d028      	beq.n	8003e22 <UART_SetConfig+0x9e>
 8003dd0:	4a8e      	ldr	r2, [pc, #568]	; (800400c <UART_SetConfig+0x288>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d03d      	beq.n	8003e52 <UART_SetConfig+0xce>
 8003dd6:	4a8e      	ldr	r2, [pc, #568]	; (8004010 <UART_SetConfig+0x28c>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d050      	beq.n	8003e7e <UART_SetConfig+0xfa>
 8003ddc:	4a8d      	ldr	r2, [pc, #564]	; (8004014 <UART_SetConfig+0x290>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d062      	beq.n	8003ea8 <UART_SetConfig+0x124>
 8003de2:	4a8d      	ldr	r2, [pc, #564]	; (8004018 <UART_SetConfig+0x294>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d077      	beq.n	8003ed8 <UART_SetConfig+0x154>
 8003de8:	4a8c      	ldr	r2, [pc, #560]	; (800401c <UART_SetConfig+0x298>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	f000 808c 	beq.w	8003f08 <UART_SetConfig+0x184>
 8003df0:	4a8b      	ldr	r2, [pc, #556]	; (8004020 <UART_SetConfig+0x29c>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	f000 80a0 	beq.w	8003f38 <UART_SetConfig+0x1b4>
 8003df8:	2310      	movs	r3, #16
 8003dfa:	e0b6      	b.n	8003f6a <UART_SetConfig+0x1e6>
 8003dfc:	4b89      	ldr	r3, [pc, #548]	; (8004024 <UART_SetConfig+0x2a0>)
 8003dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e02:	f003 0303 	and.w	r3, r3, #3
 8003e06:	2b03      	cmp	r3, #3
 8003e08:	d809      	bhi.n	8003e1e <UART_SetConfig+0x9a>
 8003e0a:	e8df f003 	tbb	[pc, r3]
 8003e0e:	0402      	.short	0x0402
 8003e10:	06ad      	.short	0x06ad
 8003e12:	2301      	movs	r3, #1
 8003e14:	e0a9      	b.n	8003f6a <UART_SetConfig+0x1e6>
 8003e16:	2304      	movs	r3, #4
 8003e18:	e0a7      	b.n	8003f6a <UART_SetConfig+0x1e6>
 8003e1a:	2308      	movs	r3, #8
 8003e1c:	e0a5      	b.n	8003f6a <UART_SetConfig+0x1e6>
 8003e1e:	2310      	movs	r3, #16
 8003e20:	e0a3      	b.n	8003f6a <UART_SetConfig+0x1e6>
 8003e22:	4b80      	ldr	r3, [pc, #512]	; (8004024 <UART_SetConfig+0x2a0>)
 8003e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e28:	f003 030c 	and.w	r3, r3, #12
 8003e2c:	2b0c      	cmp	r3, #12
 8003e2e:	d80e      	bhi.n	8003e4e <UART_SetConfig+0xca>
 8003e30:	e8df f003 	tbb	[pc, r3]
 8003e34:	0d0d0d07 	.word	0x0d0d0d07
 8003e38:	0d0d0d09 	.word	0x0d0d0d09
 8003e3c:	0d0d0da9 	.word	0x0d0d0da9
 8003e40:	0b          	.byte	0x0b
 8003e41:	00          	.byte	0x00
 8003e42:	2300      	movs	r3, #0
 8003e44:	e091      	b.n	8003f6a <UART_SetConfig+0x1e6>
 8003e46:	2304      	movs	r3, #4
 8003e48:	e08f      	b.n	8003f6a <UART_SetConfig+0x1e6>
 8003e4a:	2308      	movs	r3, #8
 8003e4c:	e08d      	b.n	8003f6a <UART_SetConfig+0x1e6>
 8003e4e:	2310      	movs	r3, #16
 8003e50:	e08b      	b.n	8003f6a <UART_SetConfig+0x1e6>
 8003e52:	4b74      	ldr	r3, [pc, #464]	; (8004024 <UART_SetConfig+0x2a0>)
 8003e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e58:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003e5c:	2b10      	cmp	r3, #16
 8003e5e:	d00a      	beq.n	8003e76 <UART_SetConfig+0xf2>
 8003e60:	d906      	bls.n	8003e70 <UART_SetConfig+0xec>
 8003e62:	2b20      	cmp	r3, #32
 8003e64:	f000 8091 	beq.w	8003f8a <UART_SetConfig+0x206>
 8003e68:	2b30      	cmp	r3, #48	; 0x30
 8003e6a:	d106      	bne.n	8003e7a <UART_SetConfig+0xf6>
 8003e6c:	2308      	movs	r3, #8
 8003e6e:	e07c      	b.n	8003f6a <UART_SetConfig+0x1e6>
 8003e70:	b91b      	cbnz	r3, 8003e7a <UART_SetConfig+0xf6>
 8003e72:	2300      	movs	r3, #0
 8003e74:	e079      	b.n	8003f6a <UART_SetConfig+0x1e6>
 8003e76:	2304      	movs	r3, #4
 8003e78:	e077      	b.n	8003f6a <UART_SetConfig+0x1e6>
 8003e7a:	2310      	movs	r3, #16
 8003e7c:	e075      	b.n	8003f6a <UART_SetConfig+0x1e6>
 8003e7e:	4b69      	ldr	r3, [pc, #420]	; (8004024 <UART_SetConfig+0x2a0>)
 8003e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e84:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003e88:	2b40      	cmp	r3, #64	; 0x40
 8003e8a:	d009      	beq.n	8003ea0 <UART_SetConfig+0x11c>
 8003e8c:	d905      	bls.n	8003e9a <UART_SetConfig+0x116>
 8003e8e:	2b80      	cmp	r3, #128	; 0x80
 8003e90:	d07d      	beq.n	8003f8e <UART_SetConfig+0x20a>
 8003e92:	2bc0      	cmp	r3, #192	; 0xc0
 8003e94:	d106      	bne.n	8003ea4 <UART_SetConfig+0x120>
 8003e96:	2308      	movs	r3, #8
 8003e98:	e067      	b.n	8003f6a <UART_SetConfig+0x1e6>
 8003e9a:	b91b      	cbnz	r3, 8003ea4 <UART_SetConfig+0x120>
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	e064      	b.n	8003f6a <UART_SetConfig+0x1e6>
 8003ea0:	2304      	movs	r3, #4
 8003ea2:	e062      	b.n	8003f6a <UART_SetConfig+0x1e6>
 8003ea4:	2310      	movs	r3, #16
 8003ea6:	e060      	b.n	8003f6a <UART_SetConfig+0x1e6>
 8003ea8:	4b5e      	ldr	r3, [pc, #376]	; (8004024 <UART_SetConfig+0x2a0>)
 8003eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eb6:	d00b      	beq.n	8003ed0 <UART_SetConfig+0x14c>
 8003eb8:	d907      	bls.n	8003eca <UART_SetConfig+0x146>
 8003eba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ebe:	d068      	beq.n	8003f92 <UART_SetConfig+0x20e>
 8003ec0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ec4:	d106      	bne.n	8003ed4 <UART_SetConfig+0x150>
 8003ec6:	2308      	movs	r3, #8
 8003ec8:	e04f      	b.n	8003f6a <UART_SetConfig+0x1e6>
 8003eca:	b91b      	cbnz	r3, 8003ed4 <UART_SetConfig+0x150>
 8003ecc:	2300      	movs	r3, #0
 8003ece:	e04c      	b.n	8003f6a <UART_SetConfig+0x1e6>
 8003ed0:	2304      	movs	r3, #4
 8003ed2:	e04a      	b.n	8003f6a <UART_SetConfig+0x1e6>
 8003ed4:	2310      	movs	r3, #16
 8003ed6:	e048      	b.n	8003f6a <UART_SetConfig+0x1e6>
 8003ed8:	4b52      	ldr	r3, [pc, #328]	; (8004024 <UART_SetConfig+0x2a0>)
 8003eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ede:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003ee2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ee6:	d00b      	beq.n	8003f00 <UART_SetConfig+0x17c>
 8003ee8:	d907      	bls.n	8003efa <UART_SetConfig+0x176>
 8003eea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003eee:	d052      	beq.n	8003f96 <UART_SetConfig+0x212>
 8003ef0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ef4:	d106      	bne.n	8003f04 <UART_SetConfig+0x180>
 8003ef6:	2308      	movs	r3, #8
 8003ef8:	e037      	b.n	8003f6a <UART_SetConfig+0x1e6>
 8003efa:	b91b      	cbnz	r3, 8003f04 <UART_SetConfig+0x180>
 8003efc:	2301      	movs	r3, #1
 8003efe:	e034      	b.n	8003f6a <UART_SetConfig+0x1e6>
 8003f00:	2304      	movs	r3, #4
 8003f02:	e032      	b.n	8003f6a <UART_SetConfig+0x1e6>
 8003f04:	2310      	movs	r3, #16
 8003f06:	e030      	b.n	8003f6a <UART_SetConfig+0x1e6>
 8003f08:	4b46      	ldr	r3, [pc, #280]	; (8004024 <UART_SetConfig+0x2a0>)
 8003f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f0e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003f12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f16:	d00b      	beq.n	8003f30 <UART_SetConfig+0x1ac>
 8003f18:	d907      	bls.n	8003f2a <UART_SetConfig+0x1a6>
 8003f1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f1e:	d03c      	beq.n	8003f9a <UART_SetConfig+0x216>
 8003f20:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003f24:	d106      	bne.n	8003f34 <UART_SetConfig+0x1b0>
 8003f26:	2308      	movs	r3, #8
 8003f28:	e01f      	b.n	8003f6a <UART_SetConfig+0x1e6>
 8003f2a:	b91b      	cbnz	r3, 8003f34 <UART_SetConfig+0x1b0>
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	e01c      	b.n	8003f6a <UART_SetConfig+0x1e6>
 8003f30:	2304      	movs	r3, #4
 8003f32:	e01a      	b.n	8003f6a <UART_SetConfig+0x1e6>
 8003f34:	2310      	movs	r3, #16
 8003f36:	e018      	b.n	8003f6a <UART_SetConfig+0x1e6>
 8003f38:	4b3a      	ldr	r3, [pc, #232]	; (8004024 <UART_SetConfig+0x2a0>)
 8003f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f3e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003f42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f46:	d00b      	beq.n	8003f60 <UART_SetConfig+0x1dc>
 8003f48:	d907      	bls.n	8003f5a <UART_SetConfig+0x1d6>
 8003f4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f4e:	d026      	beq.n	8003f9e <UART_SetConfig+0x21a>
 8003f50:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003f54:	d106      	bne.n	8003f64 <UART_SetConfig+0x1e0>
 8003f56:	2308      	movs	r3, #8
 8003f58:	e007      	b.n	8003f6a <UART_SetConfig+0x1e6>
 8003f5a:	b91b      	cbnz	r3, 8003f64 <UART_SetConfig+0x1e0>
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	e004      	b.n	8003f6a <UART_SetConfig+0x1e6>
 8003f60:	2304      	movs	r3, #4
 8003f62:	e002      	b.n	8003f6a <UART_SetConfig+0x1e6>
 8003f64:	2310      	movs	r3, #16
 8003f66:	e000      	b.n	8003f6a <UART_SetConfig+0x1e6>
 8003f68:	2302      	movs	r3, #2

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f6a:	69e2      	ldr	r2, [r4, #28]
 8003f6c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003f70:	d017      	beq.n	8003fa2 <UART_SetConfig+0x21e>
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 8003f72:	2b08      	cmp	r3, #8
 8003f74:	f200 80b3 	bhi.w	80040de <UART_SetConfig+0x35a>
 8003f78:	e8df f003 	tbb	[pc, r3]
 8003f7c:	b1958b76 	.word	0xb1958b76
 8003f80:	b1b1b19e 	.word	0xb1b1b19e
 8003f84:	a8          	.byte	0xa8
 8003f85:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f86:	2302      	movs	r3, #2
 8003f88:	e7ef      	b.n	8003f6a <UART_SetConfig+0x1e6>
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	e7ed      	b.n	8003f6a <UART_SetConfig+0x1e6>
 8003f8e:	2302      	movs	r3, #2
 8003f90:	e7eb      	b.n	8003f6a <UART_SetConfig+0x1e6>
 8003f92:	2302      	movs	r3, #2
 8003f94:	e7e9      	b.n	8003f6a <UART_SetConfig+0x1e6>
 8003f96:	2302      	movs	r3, #2
 8003f98:	e7e7      	b.n	8003f6a <UART_SetConfig+0x1e6>
 8003f9a:	2302      	movs	r3, #2
 8003f9c:	e7e5      	b.n	8003f6a <UART_SetConfig+0x1e6>
 8003f9e:	2302      	movs	r3, #2
 8003fa0:	e7e3      	b.n	8003f6a <UART_SetConfig+0x1e6>
    switch (clocksource)
 8003fa2:	2b08      	cmp	r3, #8
 8003fa4:	d85d      	bhi.n	8004062 <UART_SetConfig+0x2de>
 8003fa6:	e8df f003 	tbb	[pc, r3]
 8003faa:	1f05      	.short	0x1f05
 8003fac:	5c485c3f 	.word	0x5c485c3f
 8003fb0:	5c5c      	.short	0x5c5c
 8003fb2:	53          	.byte	0x53
 8003fb3:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fb4:	f7ff f8c8 	bl	8003148 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003fb8:	6862      	ldr	r2, [r4, #4]
 8003fba:	0853      	lsrs	r3, r2, #1
 8003fbc:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8003fc0:	fbb3 f3f2 	udiv	r3, r3, r2
 8003fc4:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003fc6:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fc8:	f1a3 0110 	sub.w	r1, r3, #16
 8003fcc:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8003fd0:	4291      	cmp	r1, r2
 8003fd2:	f200 8087 	bhi.w	80040e4 <UART_SetConfig+0x360>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003fd6:	b29a      	uxth	r2, r3
 8003fd8:	f022 020f 	bic.w	r2, r2, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fdc:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8003fe0:	4313      	orrs	r3, r2
      huart->Instance->BRR = brrtemp;
 8003fe2:	6822      	ldr	r2, [r4, #0]
 8003fe4:	60d3      	str	r3, [r2, #12]
 8003fe6:	e050      	b.n	800408a <UART_SetConfig+0x306>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fe8:	f7ff f8be 	bl	8003168 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003fec:	6862      	ldr	r2, [r4, #4]
 8003fee:	0853      	lsrs	r3, r2, #1
 8003ff0:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8003ff4:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ff8:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ffa:	2000      	movs	r0, #0
        break;
 8003ffc:	e7e4      	b.n	8003fc8 <UART_SetConfig+0x244>
 8003ffe:	bf00      	nop
 8004000:	efff69f3 	.word	0xefff69f3
 8004004:	40011000 	.word	0x40011000
 8004008:	40004400 	.word	0x40004400
 800400c:	40004800 	.word	0x40004800
 8004010:	40004c00 	.word	0x40004c00
 8004014:	40005000 	.word	0x40005000
 8004018:	40011400 	.word	0x40011400
 800401c:	40007800 	.word	0x40007800
 8004020:	40007c00 	.word	0x40007c00
 8004024:	40023800 	.word	0x40023800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004028:	6862      	ldr	r2, [r4, #4]
 800402a:	4b30      	ldr	r3, [pc, #192]	; (80040ec <UART_SetConfig+0x368>)
 800402c:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8004030:	fbb3 f3f2 	udiv	r3, r3, r2
 8004034:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8004036:	2000      	movs	r0, #0
        break;
 8004038:	e7c6      	b.n	8003fc8 <UART_SetConfig+0x244>
        pclk = HAL_RCC_GetSysClockFreq();
 800403a:	f7fe ff77 	bl	8002f2c <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800403e:	6862      	ldr	r2, [r4, #4]
 8004040:	0853      	lsrs	r3, r2, #1
 8004042:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8004046:	fbb3 f3f2 	udiv	r3, r3, r2
 800404a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800404c:	2000      	movs	r0, #0
        break;
 800404e:	e7bb      	b.n	8003fc8 <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004050:	6862      	ldr	r2, [r4, #4]
 8004052:	0853      	lsrs	r3, r2, #1
 8004054:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8004058:	fbb3 f3f2 	udiv	r3, r3, r2
 800405c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800405e:	2000      	movs	r0, #0
        break;
 8004060:	e7b2      	b.n	8003fc8 <UART_SetConfig+0x244>
        ret = HAL_ERROR;
 8004062:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8004064:	2300      	movs	r3, #0
 8004066:	e7af      	b.n	8003fc8 <UART_SetConfig+0x244>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004068:	f7ff f86e 	bl	8003148 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800406c:	6862      	ldr	r2, [r4, #4]
 800406e:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8004072:	fbb3 f3f2 	udiv	r3, r3, r2
 8004076:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8004078:	2000      	movs	r0, #0
        ret = HAL_ERROR;
        break;
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800407a:	f1a3 0110 	sub.w	r1, r3, #16
 800407e:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8004082:	4291      	cmp	r1, r2
 8004084:	d830      	bhi.n	80040e8 <UART_SetConfig+0x364>
    {
      huart->Instance->BRR = usartdiv;
 8004086:	6822      	ldr	r2, [r4, #0]
 8004088:	60d3      	str	r3, [r2, #12]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800408a:	2300      	movs	r3, #0
 800408c:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 800408e:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8004090:	bd10      	pop	{r4, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8004092:	f7ff f869 	bl	8003168 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004096:	6862      	ldr	r2, [r4, #4]
 8004098:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800409c:	fbb3 f3f2 	udiv	r3, r3, r2
 80040a0:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80040a2:	2000      	movs	r0, #0
        break;
 80040a4:	e7e9      	b.n	800407a <UART_SetConfig+0x2f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80040a6:	6862      	ldr	r2, [r4, #4]
 80040a8:	4b11      	ldr	r3, [pc, #68]	; (80040f0 <UART_SetConfig+0x36c>)
 80040aa:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80040ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80040b2:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80040b4:	2000      	movs	r0, #0
        break;
 80040b6:	e7e0      	b.n	800407a <UART_SetConfig+0x2f6>
        pclk = HAL_RCC_GetSysClockFreq();
 80040b8:	f7fe ff38 	bl	8002f2c <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80040bc:	6862      	ldr	r2, [r4, #4]
 80040be:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80040c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80040c6:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80040c8:	2000      	movs	r0, #0
        break;
 80040ca:	e7d6      	b.n	800407a <UART_SetConfig+0x2f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80040cc:	6862      	ldr	r2, [r4, #4]
 80040ce:	0853      	lsrs	r3, r2, #1
 80040d0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80040d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80040d8:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80040da:	2000      	movs	r0, #0
        break;
 80040dc:	e7cd      	b.n	800407a <UART_SetConfig+0x2f6>
        ret = HAL_ERROR;
 80040de:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 80040e0:	2300      	movs	r3, #0
 80040e2:	e7ca      	b.n	800407a <UART_SetConfig+0x2f6>
      ret = HAL_ERROR;
 80040e4:	2001      	movs	r0, #1
 80040e6:	e7d0      	b.n	800408a <UART_SetConfig+0x306>
      ret = HAL_ERROR;
 80040e8:	2001      	movs	r0, #1
 80040ea:	e7ce      	b.n	800408a <UART_SetConfig+0x306>
 80040ec:	01e84800 	.word	0x01e84800
 80040f0:	00f42400 	.word	0x00f42400

080040f4 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040f4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80040f6:	f013 0f01 	tst.w	r3, #1
 80040fa:	d006      	beq.n	800410a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040fc:	6802      	ldr	r2, [r0, #0]
 80040fe:	6853      	ldr	r3, [r2, #4]
 8004100:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004104:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8004106:	430b      	orrs	r3, r1
 8004108:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800410a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800410c:	f013 0f02 	tst.w	r3, #2
 8004110:	d006      	beq.n	8004120 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004112:	6802      	ldr	r2, [r0, #0]
 8004114:	6853      	ldr	r3, [r2, #4]
 8004116:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800411a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800411c:	430b      	orrs	r3, r1
 800411e:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004120:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004122:	f013 0f04 	tst.w	r3, #4
 8004126:	d006      	beq.n	8004136 <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004128:	6802      	ldr	r2, [r0, #0]
 800412a:	6853      	ldr	r3, [r2, #4]
 800412c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004130:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8004132:	430b      	orrs	r3, r1
 8004134:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004136:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004138:	f013 0f08 	tst.w	r3, #8
 800413c:	d006      	beq.n	800414c <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800413e:	6802      	ldr	r2, [r0, #0]
 8004140:	6853      	ldr	r3, [r2, #4]
 8004142:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004146:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8004148:	430b      	orrs	r3, r1
 800414a:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800414c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800414e:	f013 0f10 	tst.w	r3, #16
 8004152:	d006      	beq.n	8004162 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004154:	6802      	ldr	r2, [r0, #0]
 8004156:	6893      	ldr	r3, [r2, #8]
 8004158:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800415c:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800415e:	430b      	orrs	r3, r1
 8004160:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004162:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004164:	f013 0f20 	tst.w	r3, #32
 8004168:	d006      	beq.n	8004178 <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800416a:	6802      	ldr	r2, [r0, #0]
 800416c:	6893      	ldr	r3, [r2, #8]
 800416e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004172:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8004174:	430b      	orrs	r3, r1
 8004176:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004178:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800417a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800417e:	d00a      	beq.n	8004196 <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004180:	6802      	ldr	r2, [r0, #0]
 8004182:	6853      	ldr	r3, [r2, #4]
 8004184:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004188:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800418a:	430b      	orrs	r3, r1
 800418c:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800418e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004190:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004194:	d00b      	beq.n	80041ae <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004196:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004198:	f013 0f80 	tst.w	r3, #128	; 0x80
 800419c:	d006      	beq.n	80041ac <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800419e:	6802      	ldr	r2, [r0, #0]
 80041a0:	6853      	ldr	r3, [r2, #4]
 80041a2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80041a6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80041a8:	430b      	orrs	r3, r1
 80041aa:	6053      	str	r3, [r2, #4]
  }
}
 80041ac:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041ae:	6802      	ldr	r2, [r0, #0]
 80041b0:	6853      	ldr	r3, [r2, #4]
 80041b2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80041b6:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80041b8:	430b      	orrs	r3, r1
 80041ba:	6053      	str	r3, [r2, #4]
 80041bc:	e7eb      	b.n	8004196 <UART_AdvFeatureConfig+0xa2>

080041be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041c2:	4604      	mov	r4, r0
 80041c4:	460f      	mov	r7, r1
 80041c6:	4616      	mov	r6, r2
 80041c8:	4698      	mov	r8, r3
 80041ca:	9d06      	ldr	r5, [sp, #24]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041cc:	6823      	ldr	r3, [r4, #0]
 80041ce:	69db      	ldr	r3, [r3, #28]
 80041d0:	ea37 0303 	bics.w	r3, r7, r3
 80041d4:	bf0c      	ite	eq
 80041d6:	2301      	moveq	r3, #1
 80041d8:	2300      	movne	r3, #0
 80041da:	42b3      	cmp	r3, r6
 80041dc:	d13a      	bne.n	8004254 <UART_WaitOnFlagUntilTimeout+0x96>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041de:	f1b5 3fff 	cmp.w	r5, #4294967295
 80041e2:	d0f3      	beq.n	80041cc <UART_WaitOnFlagUntilTimeout+0xe>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041e4:	f7fd fdb2 	bl	8001d4c <HAL_GetTick>
 80041e8:	eba0 0008 	sub.w	r0, r0, r8
 80041ec:	42a8      	cmp	r0, r5
 80041ee:	d81f      	bhi.n	8004230 <UART_WaitOnFlagUntilTimeout+0x72>
 80041f0:	b1f5      	cbz	r5, 8004230 <UART_WaitOnFlagUntilTimeout+0x72>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80041f2:	6823      	ldr	r3, [r4, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	f012 0f04 	tst.w	r2, #4
 80041fa:	d0e7      	beq.n	80041cc <UART_WaitOnFlagUntilTimeout+0xe>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041fc:	69da      	ldr	r2, [r3, #28]
 80041fe:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8004202:	d0e3      	beq.n	80041cc <UART_WaitOnFlagUntilTimeout+0xe>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004204:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004208:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800420a:	6822      	ldr	r2, [r4, #0]
 800420c:	6813      	ldr	r3, [r2, #0]
 800420e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004212:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004214:	6822      	ldr	r2, [r4, #0]
 8004216:	6893      	ldr	r3, [r2, #8]
 8004218:	f023 0301 	bic.w	r3, r3, #1
 800421c:	6093      	str	r3, [r2, #8]

          huart->gState = HAL_UART_STATE_READY;
 800421e:	2320      	movs	r3, #32
 8004220:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004222:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004224:	67e3      	str	r3, [r4, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004226:	2300      	movs	r3, #0
 8004228:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800422c:	2003      	movs	r0, #3
 800422e:	e012      	b.n	8004256 <UART_WaitOnFlagUntilTimeout+0x98>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004230:	6822      	ldr	r2, [r4, #0]
 8004232:	6813      	ldr	r3, [r2, #0]
 8004234:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004238:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800423a:	6822      	ldr	r2, [r4, #0]
 800423c:	6893      	ldr	r3, [r2, #8]
 800423e:	f023 0301 	bic.w	r3, r3, #1
 8004242:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 8004244:	2320      	movs	r3, #32
 8004246:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004248:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 800424a:	2300      	movs	r3, #0
 800424c:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        return HAL_TIMEOUT;
 8004250:	2003      	movs	r0, #3
 8004252:	e000      	b.n	8004256 <UART_WaitOnFlagUntilTimeout+0x98>
        }
      }
    }
  }
  return HAL_OK;
 8004254:	2000      	movs	r0, #0
}
 8004256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800425a <HAL_UART_Transmit>:
{
 800425a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8004262:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8004264:	2b20      	cmp	r3, #32
 8004266:	d159      	bne.n	800431c <HAL_UART_Transmit+0xc2>
 8004268:	4604      	mov	r4, r0
 800426a:	460d      	mov	r5, r1
 800426c:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 800426e:	fab2 f382 	clz	r3, r2
 8004272:	095b      	lsrs	r3, r3, #5
 8004274:	2900      	cmp	r1, #0
 8004276:	bf08      	it	eq
 8004278:	2301      	moveq	r3, #1
 800427a:	2b00      	cmp	r3, #0
 800427c:	d153      	bne.n	8004326 <HAL_UART_Transmit+0xcc>
    __HAL_LOCK(huart);
 800427e:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8004282:	2b01      	cmp	r3, #1
 8004284:	d051      	beq.n	800432a <HAL_UART_Transmit+0xd0>
 8004286:	2301      	movs	r3, #1
 8004288:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800428c:	2300      	movs	r3, #0
 800428e:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004290:	2321      	movs	r3, #33	; 0x21
 8004292:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 8004294:	f7fd fd5a 	bl	8001d4c <HAL_GetTick>
 8004298:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 800429a:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 800429e:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042a2:	68a3      	ldr	r3, [r4, #8]
 80042a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042a8:	d005      	beq.n	80042b6 <HAL_UART_Transmit+0x5c>
      pdata16bits = NULL;
 80042aa:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 80042ae:	2300      	movs	r3, #0
 80042b0:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    while (huart->TxXferCount > 0U)
 80042b4:	e013      	b.n	80042de <HAL_UART_Transmit+0x84>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042b6:	6923      	ldr	r3, [r4, #16]
 80042b8:	b113      	cbz	r3, 80042c0 <HAL_UART_Transmit+0x66>
      pdata16bits = NULL;
 80042ba:	f04f 0800 	mov.w	r8, #0
 80042be:	e7f6      	b.n	80042ae <HAL_UART_Transmit+0x54>
      pdata16bits = (uint16_t *) pData;
 80042c0:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 80042c2:	2500      	movs	r5, #0
 80042c4:	e7f3      	b.n	80042ae <HAL_UART_Transmit+0x54>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042c6:	f838 3b02 	ldrh.w	r3, [r8], #2
 80042ca:	6822      	ldr	r2, [r4, #0]
 80042cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042d0:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 80042d2:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80042d6:	3b01      	subs	r3, #1
 80042d8:	b29b      	uxth	r3, r3
 80042da:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80042de:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	b173      	cbz	r3, 8004304 <HAL_UART_Transmit+0xaa>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042e6:	9600      	str	r6, [sp, #0]
 80042e8:	463b      	mov	r3, r7
 80042ea:	2200      	movs	r2, #0
 80042ec:	2180      	movs	r1, #128	; 0x80
 80042ee:	4620      	mov	r0, r4
 80042f0:	f7ff ff65 	bl	80041be <UART_WaitOnFlagUntilTimeout>
 80042f4:	b9d8      	cbnz	r0, 800432e <HAL_UART_Transmit+0xd4>
      if (pdata8bits == NULL)
 80042f6:	2d00      	cmp	r5, #0
 80042f8:	d0e5      	beq.n	80042c6 <HAL_UART_Transmit+0x6c>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80042fa:	f815 2b01 	ldrb.w	r2, [r5], #1
 80042fe:	6823      	ldr	r3, [r4, #0]
 8004300:	629a      	str	r2, [r3, #40]	; 0x28
 8004302:	e7e6      	b.n	80042d2 <HAL_UART_Transmit+0x78>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004304:	9600      	str	r6, [sp, #0]
 8004306:	463b      	mov	r3, r7
 8004308:	2200      	movs	r2, #0
 800430a:	2140      	movs	r1, #64	; 0x40
 800430c:	4620      	mov	r0, r4
 800430e:	f7ff ff56 	bl	80041be <UART_WaitOnFlagUntilTimeout>
 8004312:	4603      	mov	r3, r0
 8004314:	b968      	cbnz	r0, 8004332 <HAL_UART_Transmit+0xd8>
    huart->gState = HAL_UART_STATE_READY;
 8004316:	2220      	movs	r2, #32
 8004318:	6762      	str	r2, [r4, #116]	; 0x74
    return HAL_OK;
 800431a:	e000      	b.n	800431e <HAL_UART_Transmit+0xc4>
    return HAL_BUSY;
 800431c:	2302      	movs	r3, #2
}
 800431e:	4618      	mov	r0, r3
 8004320:	b002      	add	sp, #8
 8004322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e7f9      	b.n	800431e <HAL_UART_Transmit+0xc4>
    __HAL_LOCK(huart);
 800432a:	2302      	movs	r3, #2
 800432c:	e7f7      	b.n	800431e <HAL_UART_Transmit+0xc4>
        return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e7f5      	b.n	800431e <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e7f3      	b.n	800431e <HAL_UART_Transmit+0xc4>

08004336 <UART_CheckIdleState>:
{
 8004336:	b510      	push	{r4, lr}
 8004338:	b082      	sub	sp, #8
 800433a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800433c:	2300      	movs	r3, #0
 800433e:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8004340:	f7fd fd04 	bl	8001d4c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004344:	6822      	ldr	r2, [r4, #0]
 8004346:	6812      	ldr	r2, [r2, #0]
 8004348:	f012 0f08 	tst.w	r2, #8
 800434c:	d107      	bne.n	800435e <UART_CheckIdleState+0x28>
  huart->gState = HAL_UART_STATE_READY;
 800434e:	2320      	movs	r3, #32
 8004350:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004352:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8004354:	2000      	movs	r0, #0
 8004356:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 800435a:	b002      	add	sp, #8
 800435c:	bd10      	pop	{r4, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800435e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004362:	9300      	str	r3, [sp, #0]
 8004364:	4603      	mov	r3, r0
 8004366:	2200      	movs	r2, #0
 8004368:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800436c:	4620      	mov	r0, r4
 800436e:	f7ff ff26 	bl	80041be <UART_WaitOnFlagUntilTimeout>
 8004372:	2800      	cmp	r0, #0
 8004374:	d0eb      	beq.n	800434e <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8004376:	2003      	movs	r0, #3
 8004378:	e7ef      	b.n	800435a <UART_CheckIdleState+0x24>

0800437a <HAL_UART_Init>:
  if (huart == NULL)
 800437a:	b368      	cbz	r0, 80043d8 <HAL_UART_Init+0x5e>
{
 800437c:	b510      	push	{r4, lr}
 800437e:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8004380:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8004382:	b303      	cbz	r3, 80043c6 <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8004384:	2324      	movs	r3, #36	; 0x24
 8004386:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8004388:	6822      	ldr	r2, [r4, #0]
 800438a:	6813      	ldr	r3, [r2, #0]
 800438c:	f023 0301 	bic.w	r3, r3, #1
 8004390:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004392:	4620      	mov	r0, r4
 8004394:	f7ff fcf6 	bl	8003d84 <UART_SetConfig>
 8004398:	2801      	cmp	r0, #1
 800439a:	d013      	beq.n	80043c4 <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800439c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800439e:	b9bb      	cbnz	r3, 80043d0 <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043a0:	6822      	ldr	r2, [r4, #0]
 80043a2:	6853      	ldr	r3, [r2, #4]
 80043a4:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80043a8:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043aa:	6822      	ldr	r2, [r4, #0]
 80043ac:	6893      	ldr	r3, [r2, #8]
 80043ae:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80043b2:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80043b4:	6822      	ldr	r2, [r4, #0]
 80043b6:	6813      	ldr	r3, [r2, #0]
 80043b8:	f043 0301 	orr.w	r3, r3, #1
 80043bc:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80043be:	4620      	mov	r0, r4
 80043c0:	f7ff ffb9 	bl	8004336 <UART_CheckIdleState>
}
 80043c4:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80043c6:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 80043ca:	f7fd fbcd 	bl	8001b68 <HAL_UART_MspInit>
 80043ce:	e7d9      	b.n	8004384 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 80043d0:	4620      	mov	r0, r4
 80043d2:	f7ff fe8f 	bl	80040f4 <UART_AdvFeatureConfig>
 80043d6:	e7e3      	b.n	80043a0 <HAL_UART_Init+0x26>
    return HAL_ERROR;
 80043d8:	2001      	movs	r0, #1
}
 80043da:	4770      	bx	lr

080043dc <__errno>:
 80043dc:	4b01      	ldr	r3, [pc, #4]	; (80043e4 <__errno+0x8>)
 80043de:	6818      	ldr	r0, [r3, #0]
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	200001d8 	.word	0x200001d8

080043e8 <__libc_init_array>:
 80043e8:	b570      	push	{r4, r5, r6, lr}
 80043ea:	4e0d      	ldr	r6, [pc, #52]	; (8004420 <__libc_init_array+0x38>)
 80043ec:	4c0d      	ldr	r4, [pc, #52]	; (8004424 <__libc_init_array+0x3c>)
 80043ee:	1ba4      	subs	r4, r4, r6
 80043f0:	10a4      	asrs	r4, r4, #2
 80043f2:	2500      	movs	r5, #0
 80043f4:	42a5      	cmp	r5, r4
 80043f6:	d109      	bne.n	800440c <__libc_init_array+0x24>
 80043f8:	4e0b      	ldr	r6, [pc, #44]	; (8004428 <__libc_init_array+0x40>)
 80043fa:	4c0c      	ldr	r4, [pc, #48]	; (800442c <__libc_init_array+0x44>)
 80043fc:	f003 fd56 	bl	8007eac <_init>
 8004400:	1ba4      	subs	r4, r4, r6
 8004402:	10a4      	asrs	r4, r4, #2
 8004404:	2500      	movs	r5, #0
 8004406:	42a5      	cmp	r5, r4
 8004408:	d105      	bne.n	8004416 <__libc_init_array+0x2e>
 800440a:	bd70      	pop	{r4, r5, r6, pc}
 800440c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004410:	4798      	blx	r3
 8004412:	3501      	adds	r5, #1
 8004414:	e7ee      	b.n	80043f4 <__libc_init_array+0xc>
 8004416:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800441a:	4798      	blx	r3
 800441c:	3501      	adds	r5, #1
 800441e:	e7f2      	b.n	8004406 <__libc_init_array+0x1e>
 8004420:	080081b0 	.word	0x080081b0
 8004424:	080081b0 	.word	0x080081b0
 8004428:	080081b0 	.word	0x080081b0
 800442c:	080081b4 	.word	0x080081b4

08004430 <memset>:
 8004430:	4402      	add	r2, r0
 8004432:	4603      	mov	r3, r0
 8004434:	4293      	cmp	r3, r2
 8004436:	d100      	bne.n	800443a <memset+0xa>
 8004438:	4770      	bx	lr
 800443a:	f803 1b01 	strb.w	r1, [r3], #1
 800443e:	e7f9      	b.n	8004434 <memset+0x4>

08004440 <__cvt>:
 8004440:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004444:	ec55 4b10 	vmov	r4, r5, d0
 8004448:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800444a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800444e:	2d00      	cmp	r5, #0
 8004450:	460e      	mov	r6, r1
 8004452:	4691      	mov	r9, r2
 8004454:	4619      	mov	r1, r3
 8004456:	bfb8      	it	lt
 8004458:	4622      	movlt	r2, r4
 800445a:	462b      	mov	r3, r5
 800445c:	f027 0720 	bic.w	r7, r7, #32
 8004460:	bfbb      	ittet	lt
 8004462:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004466:	461d      	movlt	r5, r3
 8004468:	2300      	movge	r3, #0
 800446a:	232d      	movlt	r3, #45	; 0x2d
 800446c:	bfb8      	it	lt
 800446e:	4614      	movlt	r4, r2
 8004470:	2f46      	cmp	r7, #70	; 0x46
 8004472:	700b      	strb	r3, [r1, #0]
 8004474:	d004      	beq.n	8004480 <__cvt+0x40>
 8004476:	2f45      	cmp	r7, #69	; 0x45
 8004478:	d100      	bne.n	800447c <__cvt+0x3c>
 800447a:	3601      	adds	r6, #1
 800447c:	2102      	movs	r1, #2
 800447e:	e000      	b.n	8004482 <__cvt+0x42>
 8004480:	2103      	movs	r1, #3
 8004482:	ab03      	add	r3, sp, #12
 8004484:	9301      	str	r3, [sp, #4]
 8004486:	ab02      	add	r3, sp, #8
 8004488:	9300      	str	r3, [sp, #0]
 800448a:	4632      	mov	r2, r6
 800448c:	4653      	mov	r3, sl
 800448e:	ec45 4b10 	vmov	d0, r4, r5
 8004492:	f001 fd75 	bl	8005f80 <_dtoa_r>
 8004496:	2f47      	cmp	r7, #71	; 0x47
 8004498:	4680      	mov	r8, r0
 800449a:	d102      	bne.n	80044a2 <__cvt+0x62>
 800449c:	f019 0f01 	tst.w	r9, #1
 80044a0:	d026      	beq.n	80044f0 <__cvt+0xb0>
 80044a2:	2f46      	cmp	r7, #70	; 0x46
 80044a4:	eb08 0906 	add.w	r9, r8, r6
 80044a8:	d111      	bne.n	80044ce <__cvt+0x8e>
 80044aa:	f898 3000 	ldrb.w	r3, [r8]
 80044ae:	2b30      	cmp	r3, #48	; 0x30
 80044b0:	d10a      	bne.n	80044c8 <__cvt+0x88>
 80044b2:	2200      	movs	r2, #0
 80044b4:	2300      	movs	r3, #0
 80044b6:	4620      	mov	r0, r4
 80044b8:	4629      	mov	r1, r5
 80044ba:	f7fc fb2d 	bl	8000b18 <__aeabi_dcmpeq>
 80044be:	b918      	cbnz	r0, 80044c8 <__cvt+0x88>
 80044c0:	f1c6 0601 	rsb	r6, r6, #1
 80044c4:	f8ca 6000 	str.w	r6, [sl]
 80044c8:	f8da 3000 	ldr.w	r3, [sl]
 80044cc:	4499      	add	r9, r3
 80044ce:	2200      	movs	r2, #0
 80044d0:	2300      	movs	r3, #0
 80044d2:	4620      	mov	r0, r4
 80044d4:	4629      	mov	r1, r5
 80044d6:	f7fc fb1f 	bl	8000b18 <__aeabi_dcmpeq>
 80044da:	b938      	cbnz	r0, 80044ec <__cvt+0xac>
 80044dc:	2230      	movs	r2, #48	; 0x30
 80044de:	9b03      	ldr	r3, [sp, #12]
 80044e0:	454b      	cmp	r3, r9
 80044e2:	d205      	bcs.n	80044f0 <__cvt+0xb0>
 80044e4:	1c59      	adds	r1, r3, #1
 80044e6:	9103      	str	r1, [sp, #12]
 80044e8:	701a      	strb	r2, [r3, #0]
 80044ea:	e7f8      	b.n	80044de <__cvt+0x9e>
 80044ec:	f8cd 900c 	str.w	r9, [sp, #12]
 80044f0:	9b03      	ldr	r3, [sp, #12]
 80044f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80044f4:	eba3 0308 	sub.w	r3, r3, r8
 80044f8:	4640      	mov	r0, r8
 80044fa:	6013      	str	r3, [r2, #0]
 80044fc:	b004      	add	sp, #16
 80044fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004502 <__exponent>:
 8004502:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004504:	2900      	cmp	r1, #0
 8004506:	4604      	mov	r4, r0
 8004508:	bfba      	itte	lt
 800450a:	4249      	neglt	r1, r1
 800450c:	232d      	movlt	r3, #45	; 0x2d
 800450e:	232b      	movge	r3, #43	; 0x2b
 8004510:	2909      	cmp	r1, #9
 8004512:	f804 2b02 	strb.w	r2, [r4], #2
 8004516:	7043      	strb	r3, [r0, #1]
 8004518:	dd20      	ble.n	800455c <__exponent+0x5a>
 800451a:	f10d 0307 	add.w	r3, sp, #7
 800451e:	461f      	mov	r7, r3
 8004520:	260a      	movs	r6, #10
 8004522:	fb91 f5f6 	sdiv	r5, r1, r6
 8004526:	fb06 1115 	mls	r1, r6, r5, r1
 800452a:	3130      	adds	r1, #48	; 0x30
 800452c:	2d09      	cmp	r5, #9
 800452e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004532:	f103 32ff 	add.w	r2, r3, #4294967295
 8004536:	4629      	mov	r1, r5
 8004538:	dc09      	bgt.n	800454e <__exponent+0x4c>
 800453a:	3130      	adds	r1, #48	; 0x30
 800453c:	3b02      	subs	r3, #2
 800453e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004542:	42bb      	cmp	r3, r7
 8004544:	4622      	mov	r2, r4
 8004546:	d304      	bcc.n	8004552 <__exponent+0x50>
 8004548:	1a10      	subs	r0, r2, r0
 800454a:	b003      	add	sp, #12
 800454c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800454e:	4613      	mov	r3, r2
 8004550:	e7e7      	b.n	8004522 <__exponent+0x20>
 8004552:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004556:	f804 2b01 	strb.w	r2, [r4], #1
 800455a:	e7f2      	b.n	8004542 <__exponent+0x40>
 800455c:	2330      	movs	r3, #48	; 0x30
 800455e:	4419      	add	r1, r3
 8004560:	7083      	strb	r3, [r0, #2]
 8004562:	1d02      	adds	r2, r0, #4
 8004564:	70c1      	strb	r1, [r0, #3]
 8004566:	e7ef      	b.n	8004548 <__exponent+0x46>

08004568 <_printf_float>:
 8004568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800456c:	b08d      	sub	sp, #52	; 0x34
 800456e:	460c      	mov	r4, r1
 8004570:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8004574:	4616      	mov	r6, r2
 8004576:	461f      	mov	r7, r3
 8004578:	4605      	mov	r5, r0
 800457a:	f002 fde5 	bl	8007148 <_localeconv_r>
 800457e:	6803      	ldr	r3, [r0, #0]
 8004580:	9304      	str	r3, [sp, #16]
 8004582:	4618      	mov	r0, r3
 8004584:	f7fb fe4c 	bl	8000220 <strlen>
 8004588:	2300      	movs	r3, #0
 800458a:	930a      	str	r3, [sp, #40]	; 0x28
 800458c:	f8d8 3000 	ldr.w	r3, [r8]
 8004590:	9005      	str	r0, [sp, #20]
 8004592:	3307      	adds	r3, #7
 8004594:	f023 0307 	bic.w	r3, r3, #7
 8004598:	f103 0208 	add.w	r2, r3, #8
 800459c:	f894 a018 	ldrb.w	sl, [r4, #24]
 80045a0:	f8d4 b000 	ldr.w	fp, [r4]
 80045a4:	f8c8 2000 	str.w	r2, [r8]
 80045a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ac:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80045b0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80045b4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80045b8:	9307      	str	r3, [sp, #28]
 80045ba:	f8cd 8018 	str.w	r8, [sp, #24]
 80045be:	f04f 32ff 	mov.w	r2, #4294967295
 80045c2:	4ba7      	ldr	r3, [pc, #668]	; (8004860 <_printf_float+0x2f8>)
 80045c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80045c8:	f7fc fad8 	bl	8000b7c <__aeabi_dcmpun>
 80045cc:	bb70      	cbnz	r0, 800462c <_printf_float+0xc4>
 80045ce:	f04f 32ff 	mov.w	r2, #4294967295
 80045d2:	4ba3      	ldr	r3, [pc, #652]	; (8004860 <_printf_float+0x2f8>)
 80045d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80045d8:	f7fc fab2 	bl	8000b40 <__aeabi_dcmple>
 80045dc:	bb30      	cbnz	r0, 800462c <_printf_float+0xc4>
 80045de:	2200      	movs	r2, #0
 80045e0:	2300      	movs	r3, #0
 80045e2:	4640      	mov	r0, r8
 80045e4:	4649      	mov	r1, r9
 80045e6:	f7fc faa1 	bl	8000b2c <__aeabi_dcmplt>
 80045ea:	b110      	cbz	r0, 80045f2 <_printf_float+0x8a>
 80045ec:	232d      	movs	r3, #45	; 0x2d
 80045ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045f2:	4a9c      	ldr	r2, [pc, #624]	; (8004864 <_printf_float+0x2fc>)
 80045f4:	4b9c      	ldr	r3, [pc, #624]	; (8004868 <_printf_float+0x300>)
 80045f6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80045fa:	bf8c      	ite	hi
 80045fc:	4690      	movhi	r8, r2
 80045fe:	4698      	movls	r8, r3
 8004600:	2303      	movs	r3, #3
 8004602:	f02b 0204 	bic.w	r2, fp, #4
 8004606:	6123      	str	r3, [r4, #16]
 8004608:	6022      	str	r2, [r4, #0]
 800460a:	f04f 0900 	mov.w	r9, #0
 800460e:	9700      	str	r7, [sp, #0]
 8004610:	4633      	mov	r3, r6
 8004612:	aa0b      	add	r2, sp, #44	; 0x2c
 8004614:	4621      	mov	r1, r4
 8004616:	4628      	mov	r0, r5
 8004618:	f000 f9e6 	bl	80049e8 <_printf_common>
 800461c:	3001      	adds	r0, #1
 800461e:	f040 808d 	bne.w	800473c <_printf_float+0x1d4>
 8004622:	f04f 30ff 	mov.w	r0, #4294967295
 8004626:	b00d      	add	sp, #52	; 0x34
 8004628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800462c:	4642      	mov	r2, r8
 800462e:	464b      	mov	r3, r9
 8004630:	4640      	mov	r0, r8
 8004632:	4649      	mov	r1, r9
 8004634:	f7fc faa2 	bl	8000b7c <__aeabi_dcmpun>
 8004638:	b110      	cbz	r0, 8004640 <_printf_float+0xd8>
 800463a:	4a8c      	ldr	r2, [pc, #560]	; (800486c <_printf_float+0x304>)
 800463c:	4b8c      	ldr	r3, [pc, #560]	; (8004870 <_printf_float+0x308>)
 800463e:	e7da      	b.n	80045f6 <_printf_float+0x8e>
 8004640:	6861      	ldr	r1, [r4, #4]
 8004642:	1c4b      	adds	r3, r1, #1
 8004644:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8004648:	a80a      	add	r0, sp, #40	; 0x28
 800464a:	d13e      	bne.n	80046ca <_printf_float+0x162>
 800464c:	2306      	movs	r3, #6
 800464e:	6063      	str	r3, [r4, #4]
 8004650:	2300      	movs	r3, #0
 8004652:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004656:	ab09      	add	r3, sp, #36	; 0x24
 8004658:	9300      	str	r3, [sp, #0]
 800465a:	ec49 8b10 	vmov	d0, r8, r9
 800465e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004662:	6022      	str	r2, [r4, #0]
 8004664:	f8cd a004 	str.w	sl, [sp, #4]
 8004668:	6861      	ldr	r1, [r4, #4]
 800466a:	4628      	mov	r0, r5
 800466c:	f7ff fee8 	bl	8004440 <__cvt>
 8004670:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8004674:	2b47      	cmp	r3, #71	; 0x47
 8004676:	4680      	mov	r8, r0
 8004678:	d109      	bne.n	800468e <_printf_float+0x126>
 800467a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800467c:	1cd8      	adds	r0, r3, #3
 800467e:	db02      	blt.n	8004686 <_printf_float+0x11e>
 8004680:	6862      	ldr	r2, [r4, #4]
 8004682:	4293      	cmp	r3, r2
 8004684:	dd47      	ble.n	8004716 <_printf_float+0x1ae>
 8004686:	f1aa 0a02 	sub.w	sl, sl, #2
 800468a:	fa5f fa8a 	uxtb.w	sl, sl
 800468e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004692:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004694:	d824      	bhi.n	80046e0 <_printf_float+0x178>
 8004696:	3901      	subs	r1, #1
 8004698:	4652      	mov	r2, sl
 800469a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800469e:	9109      	str	r1, [sp, #36]	; 0x24
 80046a0:	f7ff ff2f 	bl	8004502 <__exponent>
 80046a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80046a6:	1813      	adds	r3, r2, r0
 80046a8:	2a01      	cmp	r2, #1
 80046aa:	4681      	mov	r9, r0
 80046ac:	6123      	str	r3, [r4, #16]
 80046ae:	dc02      	bgt.n	80046b6 <_printf_float+0x14e>
 80046b0:	6822      	ldr	r2, [r4, #0]
 80046b2:	07d1      	lsls	r1, r2, #31
 80046b4:	d501      	bpl.n	80046ba <_printf_float+0x152>
 80046b6:	3301      	adds	r3, #1
 80046b8:	6123      	str	r3, [r4, #16]
 80046ba:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d0a5      	beq.n	800460e <_printf_float+0xa6>
 80046c2:	232d      	movs	r3, #45	; 0x2d
 80046c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046c8:	e7a1      	b.n	800460e <_printf_float+0xa6>
 80046ca:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80046ce:	f000 8177 	beq.w	80049c0 <_printf_float+0x458>
 80046d2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80046d6:	d1bb      	bne.n	8004650 <_printf_float+0xe8>
 80046d8:	2900      	cmp	r1, #0
 80046da:	d1b9      	bne.n	8004650 <_printf_float+0xe8>
 80046dc:	2301      	movs	r3, #1
 80046de:	e7b6      	b.n	800464e <_printf_float+0xe6>
 80046e0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80046e4:	d119      	bne.n	800471a <_printf_float+0x1b2>
 80046e6:	2900      	cmp	r1, #0
 80046e8:	6863      	ldr	r3, [r4, #4]
 80046ea:	dd0c      	ble.n	8004706 <_printf_float+0x19e>
 80046ec:	6121      	str	r1, [r4, #16]
 80046ee:	b913      	cbnz	r3, 80046f6 <_printf_float+0x18e>
 80046f0:	6822      	ldr	r2, [r4, #0]
 80046f2:	07d2      	lsls	r2, r2, #31
 80046f4:	d502      	bpl.n	80046fc <_printf_float+0x194>
 80046f6:	3301      	adds	r3, #1
 80046f8:	440b      	add	r3, r1
 80046fa:	6123      	str	r3, [r4, #16]
 80046fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046fe:	65a3      	str	r3, [r4, #88]	; 0x58
 8004700:	f04f 0900 	mov.w	r9, #0
 8004704:	e7d9      	b.n	80046ba <_printf_float+0x152>
 8004706:	b913      	cbnz	r3, 800470e <_printf_float+0x1a6>
 8004708:	6822      	ldr	r2, [r4, #0]
 800470a:	07d0      	lsls	r0, r2, #31
 800470c:	d501      	bpl.n	8004712 <_printf_float+0x1aa>
 800470e:	3302      	adds	r3, #2
 8004710:	e7f3      	b.n	80046fa <_printf_float+0x192>
 8004712:	2301      	movs	r3, #1
 8004714:	e7f1      	b.n	80046fa <_printf_float+0x192>
 8004716:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800471a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800471e:	4293      	cmp	r3, r2
 8004720:	db05      	blt.n	800472e <_printf_float+0x1c6>
 8004722:	6822      	ldr	r2, [r4, #0]
 8004724:	6123      	str	r3, [r4, #16]
 8004726:	07d1      	lsls	r1, r2, #31
 8004728:	d5e8      	bpl.n	80046fc <_printf_float+0x194>
 800472a:	3301      	adds	r3, #1
 800472c:	e7e5      	b.n	80046fa <_printf_float+0x192>
 800472e:	2b00      	cmp	r3, #0
 8004730:	bfd4      	ite	le
 8004732:	f1c3 0302 	rsble	r3, r3, #2
 8004736:	2301      	movgt	r3, #1
 8004738:	4413      	add	r3, r2
 800473a:	e7de      	b.n	80046fa <_printf_float+0x192>
 800473c:	6823      	ldr	r3, [r4, #0]
 800473e:	055a      	lsls	r2, r3, #21
 8004740:	d407      	bmi.n	8004752 <_printf_float+0x1ea>
 8004742:	6923      	ldr	r3, [r4, #16]
 8004744:	4642      	mov	r2, r8
 8004746:	4631      	mov	r1, r6
 8004748:	4628      	mov	r0, r5
 800474a:	47b8      	blx	r7
 800474c:	3001      	adds	r0, #1
 800474e:	d12b      	bne.n	80047a8 <_printf_float+0x240>
 8004750:	e767      	b.n	8004622 <_printf_float+0xba>
 8004752:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004756:	f240 80dc 	bls.w	8004912 <_printf_float+0x3aa>
 800475a:	2200      	movs	r2, #0
 800475c:	2300      	movs	r3, #0
 800475e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004762:	f7fc f9d9 	bl	8000b18 <__aeabi_dcmpeq>
 8004766:	2800      	cmp	r0, #0
 8004768:	d033      	beq.n	80047d2 <_printf_float+0x26a>
 800476a:	2301      	movs	r3, #1
 800476c:	4a41      	ldr	r2, [pc, #260]	; (8004874 <_printf_float+0x30c>)
 800476e:	4631      	mov	r1, r6
 8004770:	4628      	mov	r0, r5
 8004772:	47b8      	blx	r7
 8004774:	3001      	adds	r0, #1
 8004776:	f43f af54 	beq.w	8004622 <_printf_float+0xba>
 800477a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800477e:	429a      	cmp	r2, r3
 8004780:	db02      	blt.n	8004788 <_printf_float+0x220>
 8004782:	6823      	ldr	r3, [r4, #0]
 8004784:	07d8      	lsls	r0, r3, #31
 8004786:	d50f      	bpl.n	80047a8 <_printf_float+0x240>
 8004788:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800478c:	4631      	mov	r1, r6
 800478e:	4628      	mov	r0, r5
 8004790:	47b8      	blx	r7
 8004792:	3001      	adds	r0, #1
 8004794:	f43f af45 	beq.w	8004622 <_printf_float+0xba>
 8004798:	f04f 0800 	mov.w	r8, #0
 800479c:	f104 091a 	add.w	r9, r4, #26
 80047a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047a2:	3b01      	subs	r3, #1
 80047a4:	4543      	cmp	r3, r8
 80047a6:	dc09      	bgt.n	80047bc <_printf_float+0x254>
 80047a8:	6823      	ldr	r3, [r4, #0]
 80047aa:	079b      	lsls	r3, r3, #30
 80047ac:	f100 8103 	bmi.w	80049b6 <_printf_float+0x44e>
 80047b0:	68e0      	ldr	r0, [r4, #12]
 80047b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80047b4:	4298      	cmp	r0, r3
 80047b6:	bfb8      	it	lt
 80047b8:	4618      	movlt	r0, r3
 80047ba:	e734      	b.n	8004626 <_printf_float+0xbe>
 80047bc:	2301      	movs	r3, #1
 80047be:	464a      	mov	r2, r9
 80047c0:	4631      	mov	r1, r6
 80047c2:	4628      	mov	r0, r5
 80047c4:	47b8      	blx	r7
 80047c6:	3001      	adds	r0, #1
 80047c8:	f43f af2b 	beq.w	8004622 <_printf_float+0xba>
 80047cc:	f108 0801 	add.w	r8, r8, #1
 80047d0:	e7e6      	b.n	80047a0 <_printf_float+0x238>
 80047d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	dc2b      	bgt.n	8004830 <_printf_float+0x2c8>
 80047d8:	2301      	movs	r3, #1
 80047da:	4a26      	ldr	r2, [pc, #152]	; (8004874 <_printf_float+0x30c>)
 80047dc:	4631      	mov	r1, r6
 80047de:	4628      	mov	r0, r5
 80047e0:	47b8      	blx	r7
 80047e2:	3001      	adds	r0, #1
 80047e4:	f43f af1d 	beq.w	8004622 <_printf_float+0xba>
 80047e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047ea:	b923      	cbnz	r3, 80047f6 <_printf_float+0x28e>
 80047ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047ee:	b913      	cbnz	r3, 80047f6 <_printf_float+0x28e>
 80047f0:	6823      	ldr	r3, [r4, #0]
 80047f2:	07d9      	lsls	r1, r3, #31
 80047f4:	d5d8      	bpl.n	80047a8 <_printf_float+0x240>
 80047f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80047fa:	4631      	mov	r1, r6
 80047fc:	4628      	mov	r0, r5
 80047fe:	47b8      	blx	r7
 8004800:	3001      	adds	r0, #1
 8004802:	f43f af0e 	beq.w	8004622 <_printf_float+0xba>
 8004806:	f04f 0900 	mov.w	r9, #0
 800480a:	f104 0a1a 	add.w	sl, r4, #26
 800480e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004810:	425b      	negs	r3, r3
 8004812:	454b      	cmp	r3, r9
 8004814:	dc01      	bgt.n	800481a <_printf_float+0x2b2>
 8004816:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004818:	e794      	b.n	8004744 <_printf_float+0x1dc>
 800481a:	2301      	movs	r3, #1
 800481c:	4652      	mov	r2, sl
 800481e:	4631      	mov	r1, r6
 8004820:	4628      	mov	r0, r5
 8004822:	47b8      	blx	r7
 8004824:	3001      	adds	r0, #1
 8004826:	f43f aefc 	beq.w	8004622 <_printf_float+0xba>
 800482a:	f109 0901 	add.w	r9, r9, #1
 800482e:	e7ee      	b.n	800480e <_printf_float+0x2a6>
 8004830:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004832:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004834:	429a      	cmp	r2, r3
 8004836:	bfa8      	it	ge
 8004838:	461a      	movge	r2, r3
 800483a:	2a00      	cmp	r2, #0
 800483c:	4691      	mov	r9, r2
 800483e:	dd07      	ble.n	8004850 <_printf_float+0x2e8>
 8004840:	4613      	mov	r3, r2
 8004842:	4631      	mov	r1, r6
 8004844:	4642      	mov	r2, r8
 8004846:	4628      	mov	r0, r5
 8004848:	47b8      	blx	r7
 800484a:	3001      	adds	r0, #1
 800484c:	f43f aee9 	beq.w	8004622 <_printf_float+0xba>
 8004850:	f104 031a 	add.w	r3, r4, #26
 8004854:	f04f 0b00 	mov.w	fp, #0
 8004858:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800485c:	9306      	str	r3, [sp, #24]
 800485e:	e015      	b.n	800488c <_printf_float+0x324>
 8004860:	7fefffff 	.word	0x7fefffff
 8004864:	08007ef8 	.word	0x08007ef8
 8004868:	08007ef4 	.word	0x08007ef4
 800486c:	08007f00 	.word	0x08007f00
 8004870:	08007efc 	.word	0x08007efc
 8004874:	08007f04 	.word	0x08007f04
 8004878:	2301      	movs	r3, #1
 800487a:	9a06      	ldr	r2, [sp, #24]
 800487c:	4631      	mov	r1, r6
 800487e:	4628      	mov	r0, r5
 8004880:	47b8      	blx	r7
 8004882:	3001      	adds	r0, #1
 8004884:	f43f aecd 	beq.w	8004622 <_printf_float+0xba>
 8004888:	f10b 0b01 	add.w	fp, fp, #1
 800488c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004890:	ebaa 0309 	sub.w	r3, sl, r9
 8004894:	455b      	cmp	r3, fp
 8004896:	dcef      	bgt.n	8004878 <_printf_float+0x310>
 8004898:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800489c:	429a      	cmp	r2, r3
 800489e:	44d0      	add	r8, sl
 80048a0:	db15      	blt.n	80048ce <_printf_float+0x366>
 80048a2:	6823      	ldr	r3, [r4, #0]
 80048a4:	07da      	lsls	r2, r3, #31
 80048a6:	d412      	bmi.n	80048ce <_printf_float+0x366>
 80048a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80048ac:	eba3 020a 	sub.w	r2, r3, sl
 80048b0:	eba3 0a01 	sub.w	sl, r3, r1
 80048b4:	4592      	cmp	sl, r2
 80048b6:	bfa8      	it	ge
 80048b8:	4692      	movge	sl, r2
 80048ba:	f1ba 0f00 	cmp.w	sl, #0
 80048be:	dc0e      	bgt.n	80048de <_printf_float+0x376>
 80048c0:	f04f 0800 	mov.w	r8, #0
 80048c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80048c8:	f104 091a 	add.w	r9, r4, #26
 80048cc:	e019      	b.n	8004902 <_printf_float+0x39a>
 80048ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80048d2:	4631      	mov	r1, r6
 80048d4:	4628      	mov	r0, r5
 80048d6:	47b8      	blx	r7
 80048d8:	3001      	adds	r0, #1
 80048da:	d1e5      	bne.n	80048a8 <_printf_float+0x340>
 80048dc:	e6a1      	b.n	8004622 <_printf_float+0xba>
 80048de:	4653      	mov	r3, sl
 80048e0:	4642      	mov	r2, r8
 80048e2:	4631      	mov	r1, r6
 80048e4:	4628      	mov	r0, r5
 80048e6:	47b8      	blx	r7
 80048e8:	3001      	adds	r0, #1
 80048ea:	d1e9      	bne.n	80048c0 <_printf_float+0x358>
 80048ec:	e699      	b.n	8004622 <_printf_float+0xba>
 80048ee:	2301      	movs	r3, #1
 80048f0:	464a      	mov	r2, r9
 80048f2:	4631      	mov	r1, r6
 80048f4:	4628      	mov	r0, r5
 80048f6:	47b8      	blx	r7
 80048f8:	3001      	adds	r0, #1
 80048fa:	f43f ae92 	beq.w	8004622 <_printf_float+0xba>
 80048fe:	f108 0801 	add.w	r8, r8, #1
 8004902:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004906:	1a9b      	subs	r3, r3, r2
 8004908:	eba3 030a 	sub.w	r3, r3, sl
 800490c:	4543      	cmp	r3, r8
 800490e:	dcee      	bgt.n	80048ee <_printf_float+0x386>
 8004910:	e74a      	b.n	80047a8 <_printf_float+0x240>
 8004912:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004914:	2a01      	cmp	r2, #1
 8004916:	dc01      	bgt.n	800491c <_printf_float+0x3b4>
 8004918:	07db      	lsls	r3, r3, #31
 800491a:	d53a      	bpl.n	8004992 <_printf_float+0x42a>
 800491c:	2301      	movs	r3, #1
 800491e:	4642      	mov	r2, r8
 8004920:	4631      	mov	r1, r6
 8004922:	4628      	mov	r0, r5
 8004924:	47b8      	blx	r7
 8004926:	3001      	adds	r0, #1
 8004928:	f43f ae7b 	beq.w	8004622 <_printf_float+0xba>
 800492c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004930:	4631      	mov	r1, r6
 8004932:	4628      	mov	r0, r5
 8004934:	47b8      	blx	r7
 8004936:	3001      	adds	r0, #1
 8004938:	f108 0801 	add.w	r8, r8, #1
 800493c:	f43f ae71 	beq.w	8004622 <_printf_float+0xba>
 8004940:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004942:	2200      	movs	r2, #0
 8004944:	f103 3aff 	add.w	sl, r3, #4294967295
 8004948:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800494c:	2300      	movs	r3, #0
 800494e:	f7fc f8e3 	bl	8000b18 <__aeabi_dcmpeq>
 8004952:	b9c8      	cbnz	r0, 8004988 <_printf_float+0x420>
 8004954:	4653      	mov	r3, sl
 8004956:	4642      	mov	r2, r8
 8004958:	4631      	mov	r1, r6
 800495a:	4628      	mov	r0, r5
 800495c:	47b8      	blx	r7
 800495e:	3001      	adds	r0, #1
 8004960:	d10e      	bne.n	8004980 <_printf_float+0x418>
 8004962:	e65e      	b.n	8004622 <_printf_float+0xba>
 8004964:	2301      	movs	r3, #1
 8004966:	4652      	mov	r2, sl
 8004968:	4631      	mov	r1, r6
 800496a:	4628      	mov	r0, r5
 800496c:	47b8      	blx	r7
 800496e:	3001      	adds	r0, #1
 8004970:	f43f ae57 	beq.w	8004622 <_printf_float+0xba>
 8004974:	f108 0801 	add.w	r8, r8, #1
 8004978:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800497a:	3b01      	subs	r3, #1
 800497c:	4543      	cmp	r3, r8
 800497e:	dcf1      	bgt.n	8004964 <_printf_float+0x3fc>
 8004980:	464b      	mov	r3, r9
 8004982:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004986:	e6de      	b.n	8004746 <_printf_float+0x1de>
 8004988:	f04f 0800 	mov.w	r8, #0
 800498c:	f104 0a1a 	add.w	sl, r4, #26
 8004990:	e7f2      	b.n	8004978 <_printf_float+0x410>
 8004992:	2301      	movs	r3, #1
 8004994:	e7df      	b.n	8004956 <_printf_float+0x3ee>
 8004996:	2301      	movs	r3, #1
 8004998:	464a      	mov	r2, r9
 800499a:	4631      	mov	r1, r6
 800499c:	4628      	mov	r0, r5
 800499e:	47b8      	blx	r7
 80049a0:	3001      	adds	r0, #1
 80049a2:	f43f ae3e 	beq.w	8004622 <_printf_float+0xba>
 80049a6:	f108 0801 	add.w	r8, r8, #1
 80049aa:	68e3      	ldr	r3, [r4, #12]
 80049ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80049ae:	1a9b      	subs	r3, r3, r2
 80049b0:	4543      	cmp	r3, r8
 80049b2:	dcf0      	bgt.n	8004996 <_printf_float+0x42e>
 80049b4:	e6fc      	b.n	80047b0 <_printf_float+0x248>
 80049b6:	f04f 0800 	mov.w	r8, #0
 80049ba:	f104 0919 	add.w	r9, r4, #25
 80049be:	e7f4      	b.n	80049aa <_printf_float+0x442>
 80049c0:	2900      	cmp	r1, #0
 80049c2:	f43f ae8b 	beq.w	80046dc <_printf_float+0x174>
 80049c6:	2300      	movs	r3, #0
 80049c8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80049cc:	ab09      	add	r3, sp, #36	; 0x24
 80049ce:	9300      	str	r3, [sp, #0]
 80049d0:	ec49 8b10 	vmov	d0, r8, r9
 80049d4:	6022      	str	r2, [r4, #0]
 80049d6:	f8cd a004 	str.w	sl, [sp, #4]
 80049da:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80049de:	4628      	mov	r0, r5
 80049e0:	f7ff fd2e 	bl	8004440 <__cvt>
 80049e4:	4680      	mov	r8, r0
 80049e6:	e648      	b.n	800467a <_printf_float+0x112>

080049e8 <_printf_common>:
 80049e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049ec:	4691      	mov	r9, r2
 80049ee:	461f      	mov	r7, r3
 80049f0:	688a      	ldr	r2, [r1, #8]
 80049f2:	690b      	ldr	r3, [r1, #16]
 80049f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80049f8:	4293      	cmp	r3, r2
 80049fa:	bfb8      	it	lt
 80049fc:	4613      	movlt	r3, r2
 80049fe:	f8c9 3000 	str.w	r3, [r9]
 8004a02:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a06:	4606      	mov	r6, r0
 8004a08:	460c      	mov	r4, r1
 8004a0a:	b112      	cbz	r2, 8004a12 <_printf_common+0x2a>
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	f8c9 3000 	str.w	r3, [r9]
 8004a12:	6823      	ldr	r3, [r4, #0]
 8004a14:	0699      	lsls	r1, r3, #26
 8004a16:	bf42      	ittt	mi
 8004a18:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004a1c:	3302      	addmi	r3, #2
 8004a1e:	f8c9 3000 	strmi.w	r3, [r9]
 8004a22:	6825      	ldr	r5, [r4, #0]
 8004a24:	f015 0506 	ands.w	r5, r5, #6
 8004a28:	d107      	bne.n	8004a3a <_printf_common+0x52>
 8004a2a:	f104 0a19 	add.w	sl, r4, #25
 8004a2e:	68e3      	ldr	r3, [r4, #12]
 8004a30:	f8d9 2000 	ldr.w	r2, [r9]
 8004a34:	1a9b      	subs	r3, r3, r2
 8004a36:	42ab      	cmp	r3, r5
 8004a38:	dc28      	bgt.n	8004a8c <_printf_common+0xa4>
 8004a3a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004a3e:	6822      	ldr	r2, [r4, #0]
 8004a40:	3300      	adds	r3, #0
 8004a42:	bf18      	it	ne
 8004a44:	2301      	movne	r3, #1
 8004a46:	0692      	lsls	r2, r2, #26
 8004a48:	d42d      	bmi.n	8004aa6 <_printf_common+0xbe>
 8004a4a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a4e:	4639      	mov	r1, r7
 8004a50:	4630      	mov	r0, r6
 8004a52:	47c0      	blx	r8
 8004a54:	3001      	adds	r0, #1
 8004a56:	d020      	beq.n	8004a9a <_printf_common+0xb2>
 8004a58:	6823      	ldr	r3, [r4, #0]
 8004a5a:	68e5      	ldr	r5, [r4, #12]
 8004a5c:	f8d9 2000 	ldr.w	r2, [r9]
 8004a60:	f003 0306 	and.w	r3, r3, #6
 8004a64:	2b04      	cmp	r3, #4
 8004a66:	bf08      	it	eq
 8004a68:	1aad      	subeq	r5, r5, r2
 8004a6a:	68a3      	ldr	r3, [r4, #8]
 8004a6c:	6922      	ldr	r2, [r4, #16]
 8004a6e:	bf0c      	ite	eq
 8004a70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a74:	2500      	movne	r5, #0
 8004a76:	4293      	cmp	r3, r2
 8004a78:	bfc4      	itt	gt
 8004a7a:	1a9b      	subgt	r3, r3, r2
 8004a7c:	18ed      	addgt	r5, r5, r3
 8004a7e:	f04f 0900 	mov.w	r9, #0
 8004a82:	341a      	adds	r4, #26
 8004a84:	454d      	cmp	r5, r9
 8004a86:	d11a      	bne.n	8004abe <_printf_common+0xd6>
 8004a88:	2000      	movs	r0, #0
 8004a8a:	e008      	b.n	8004a9e <_printf_common+0xb6>
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	4652      	mov	r2, sl
 8004a90:	4639      	mov	r1, r7
 8004a92:	4630      	mov	r0, r6
 8004a94:	47c0      	blx	r8
 8004a96:	3001      	adds	r0, #1
 8004a98:	d103      	bne.n	8004aa2 <_printf_common+0xba>
 8004a9a:	f04f 30ff 	mov.w	r0, #4294967295
 8004a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004aa2:	3501      	adds	r5, #1
 8004aa4:	e7c3      	b.n	8004a2e <_printf_common+0x46>
 8004aa6:	18e1      	adds	r1, r4, r3
 8004aa8:	1c5a      	adds	r2, r3, #1
 8004aaa:	2030      	movs	r0, #48	; 0x30
 8004aac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ab0:	4422      	add	r2, r4
 8004ab2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ab6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004aba:	3302      	adds	r3, #2
 8004abc:	e7c5      	b.n	8004a4a <_printf_common+0x62>
 8004abe:	2301      	movs	r3, #1
 8004ac0:	4622      	mov	r2, r4
 8004ac2:	4639      	mov	r1, r7
 8004ac4:	4630      	mov	r0, r6
 8004ac6:	47c0      	blx	r8
 8004ac8:	3001      	adds	r0, #1
 8004aca:	d0e6      	beq.n	8004a9a <_printf_common+0xb2>
 8004acc:	f109 0901 	add.w	r9, r9, #1
 8004ad0:	e7d8      	b.n	8004a84 <_printf_common+0x9c>
	...

08004ad4 <_printf_i>:
 8004ad4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004ad8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004adc:	460c      	mov	r4, r1
 8004ade:	7e09      	ldrb	r1, [r1, #24]
 8004ae0:	b085      	sub	sp, #20
 8004ae2:	296e      	cmp	r1, #110	; 0x6e
 8004ae4:	4617      	mov	r7, r2
 8004ae6:	4606      	mov	r6, r0
 8004ae8:	4698      	mov	r8, r3
 8004aea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004aec:	f000 80b3 	beq.w	8004c56 <_printf_i+0x182>
 8004af0:	d822      	bhi.n	8004b38 <_printf_i+0x64>
 8004af2:	2963      	cmp	r1, #99	; 0x63
 8004af4:	d036      	beq.n	8004b64 <_printf_i+0x90>
 8004af6:	d80a      	bhi.n	8004b0e <_printf_i+0x3a>
 8004af8:	2900      	cmp	r1, #0
 8004afa:	f000 80b9 	beq.w	8004c70 <_printf_i+0x19c>
 8004afe:	2958      	cmp	r1, #88	; 0x58
 8004b00:	f000 8083 	beq.w	8004c0a <_printf_i+0x136>
 8004b04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b08:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004b0c:	e032      	b.n	8004b74 <_printf_i+0xa0>
 8004b0e:	2964      	cmp	r1, #100	; 0x64
 8004b10:	d001      	beq.n	8004b16 <_printf_i+0x42>
 8004b12:	2969      	cmp	r1, #105	; 0x69
 8004b14:	d1f6      	bne.n	8004b04 <_printf_i+0x30>
 8004b16:	6820      	ldr	r0, [r4, #0]
 8004b18:	6813      	ldr	r3, [r2, #0]
 8004b1a:	0605      	lsls	r5, r0, #24
 8004b1c:	f103 0104 	add.w	r1, r3, #4
 8004b20:	d52a      	bpl.n	8004b78 <_printf_i+0xa4>
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	6011      	str	r1, [r2, #0]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	da03      	bge.n	8004b32 <_printf_i+0x5e>
 8004b2a:	222d      	movs	r2, #45	; 0x2d
 8004b2c:	425b      	negs	r3, r3
 8004b2e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004b32:	486f      	ldr	r0, [pc, #444]	; (8004cf0 <_printf_i+0x21c>)
 8004b34:	220a      	movs	r2, #10
 8004b36:	e039      	b.n	8004bac <_printf_i+0xd8>
 8004b38:	2973      	cmp	r1, #115	; 0x73
 8004b3a:	f000 809d 	beq.w	8004c78 <_printf_i+0x1a4>
 8004b3e:	d808      	bhi.n	8004b52 <_printf_i+0x7e>
 8004b40:	296f      	cmp	r1, #111	; 0x6f
 8004b42:	d020      	beq.n	8004b86 <_printf_i+0xb2>
 8004b44:	2970      	cmp	r1, #112	; 0x70
 8004b46:	d1dd      	bne.n	8004b04 <_printf_i+0x30>
 8004b48:	6823      	ldr	r3, [r4, #0]
 8004b4a:	f043 0320 	orr.w	r3, r3, #32
 8004b4e:	6023      	str	r3, [r4, #0]
 8004b50:	e003      	b.n	8004b5a <_printf_i+0x86>
 8004b52:	2975      	cmp	r1, #117	; 0x75
 8004b54:	d017      	beq.n	8004b86 <_printf_i+0xb2>
 8004b56:	2978      	cmp	r1, #120	; 0x78
 8004b58:	d1d4      	bne.n	8004b04 <_printf_i+0x30>
 8004b5a:	2378      	movs	r3, #120	; 0x78
 8004b5c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b60:	4864      	ldr	r0, [pc, #400]	; (8004cf4 <_printf_i+0x220>)
 8004b62:	e055      	b.n	8004c10 <_printf_i+0x13c>
 8004b64:	6813      	ldr	r3, [r2, #0]
 8004b66:	1d19      	adds	r1, r3, #4
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	6011      	str	r1, [r2, #0]
 8004b6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b74:	2301      	movs	r3, #1
 8004b76:	e08c      	b.n	8004c92 <_printf_i+0x1be>
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	6011      	str	r1, [r2, #0]
 8004b7c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004b80:	bf18      	it	ne
 8004b82:	b21b      	sxthne	r3, r3
 8004b84:	e7cf      	b.n	8004b26 <_printf_i+0x52>
 8004b86:	6813      	ldr	r3, [r2, #0]
 8004b88:	6825      	ldr	r5, [r4, #0]
 8004b8a:	1d18      	adds	r0, r3, #4
 8004b8c:	6010      	str	r0, [r2, #0]
 8004b8e:	0628      	lsls	r0, r5, #24
 8004b90:	d501      	bpl.n	8004b96 <_printf_i+0xc2>
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	e002      	b.n	8004b9c <_printf_i+0xc8>
 8004b96:	0668      	lsls	r0, r5, #25
 8004b98:	d5fb      	bpl.n	8004b92 <_printf_i+0xbe>
 8004b9a:	881b      	ldrh	r3, [r3, #0]
 8004b9c:	4854      	ldr	r0, [pc, #336]	; (8004cf0 <_printf_i+0x21c>)
 8004b9e:	296f      	cmp	r1, #111	; 0x6f
 8004ba0:	bf14      	ite	ne
 8004ba2:	220a      	movne	r2, #10
 8004ba4:	2208      	moveq	r2, #8
 8004ba6:	2100      	movs	r1, #0
 8004ba8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004bac:	6865      	ldr	r5, [r4, #4]
 8004bae:	60a5      	str	r5, [r4, #8]
 8004bb0:	2d00      	cmp	r5, #0
 8004bb2:	f2c0 8095 	blt.w	8004ce0 <_printf_i+0x20c>
 8004bb6:	6821      	ldr	r1, [r4, #0]
 8004bb8:	f021 0104 	bic.w	r1, r1, #4
 8004bbc:	6021      	str	r1, [r4, #0]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d13d      	bne.n	8004c3e <_printf_i+0x16a>
 8004bc2:	2d00      	cmp	r5, #0
 8004bc4:	f040 808e 	bne.w	8004ce4 <_printf_i+0x210>
 8004bc8:	4665      	mov	r5, ip
 8004bca:	2a08      	cmp	r2, #8
 8004bcc:	d10b      	bne.n	8004be6 <_printf_i+0x112>
 8004bce:	6823      	ldr	r3, [r4, #0]
 8004bd0:	07db      	lsls	r3, r3, #31
 8004bd2:	d508      	bpl.n	8004be6 <_printf_i+0x112>
 8004bd4:	6923      	ldr	r3, [r4, #16]
 8004bd6:	6862      	ldr	r2, [r4, #4]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	bfde      	ittt	le
 8004bdc:	2330      	movle	r3, #48	; 0x30
 8004bde:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004be2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004be6:	ebac 0305 	sub.w	r3, ip, r5
 8004bea:	6123      	str	r3, [r4, #16]
 8004bec:	f8cd 8000 	str.w	r8, [sp]
 8004bf0:	463b      	mov	r3, r7
 8004bf2:	aa03      	add	r2, sp, #12
 8004bf4:	4621      	mov	r1, r4
 8004bf6:	4630      	mov	r0, r6
 8004bf8:	f7ff fef6 	bl	80049e8 <_printf_common>
 8004bfc:	3001      	adds	r0, #1
 8004bfe:	d14d      	bne.n	8004c9c <_printf_i+0x1c8>
 8004c00:	f04f 30ff 	mov.w	r0, #4294967295
 8004c04:	b005      	add	sp, #20
 8004c06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004c0a:	4839      	ldr	r0, [pc, #228]	; (8004cf0 <_printf_i+0x21c>)
 8004c0c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004c10:	6813      	ldr	r3, [r2, #0]
 8004c12:	6821      	ldr	r1, [r4, #0]
 8004c14:	1d1d      	adds	r5, r3, #4
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	6015      	str	r5, [r2, #0]
 8004c1a:	060a      	lsls	r2, r1, #24
 8004c1c:	d50b      	bpl.n	8004c36 <_printf_i+0x162>
 8004c1e:	07ca      	lsls	r2, r1, #31
 8004c20:	bf44      	itt	mi
 8004c22:	f041 0120 	orrmi.w	r1, r1, #32
 8004c26:	6021      	strmi	r1, [r4, #0]
 8004c28:	b91b      	cbnz	r3, 8004c32 <_printf_i+0x15e>
 8004c2a:	6822      	ldr	r2, [r4, #0]
 8004c2c:	f022 0220 	bic.w	r2, r2, #32
 8004c30:	6022      	str	r2, [r4, #0]
 8004c32:	2210      	movs	r2, #16
 8004c34:	e7b7      	b.n	8004ba6 <_printf_i+0xd2>
 8004c36:	064d      	lsls	r5, r1, #25
 8004c38:	bf48      	it	mi
 8004c3a:	b29b      	uxthmi	r3, r3
 8004c3c:	e7ef      	b.n	8004c1e <_printf_i+0x14a>
 8004c3e:	4665      	mov	r5, ip
 8004c40:	fbb3 f1f2 	udiv	r1, r3, r2
 8004c44:	fb02 3311 	mls	r3, r2, r1, r3
 8004c48:	5cc3      	ldrb	r3, [r0, r3]
 8004c4a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004c4e:	460b      	mov	r3, r1
 8004c50:	2900      	cmp	r1, #0
 8004c52:	d1f5      	bne.n	8004c40 <_printf_i+0x16c>
 8004c54:	e7b9      	b.n	8004bca <_printf_i+0xf6>
 8004c56:	6813      	ldr	r3, [r2, #0]
 8004c58:	6825      	ldr	r5, [r4, #0]
 8004c5a:	6961      	ldr	r1, [r4, #20]
 8004c5c:	1d18      	adds	r0, r3, #4
 8004c5e:	6010      	str	r0, [r2, #0]
 8004c60:	0628      	lsls	r0, r5, #24
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	d501      	bpl.n	8004c6a <_printf_i+0x196>
 8004c66:	6019      	str	r1, [r3, #0]
 8004c68:	e002      	b.n	8004c70 <_printf_i+0x19c>
 8004c6a:	066a      	lsls	r2, r5, #25
 8004c6c:	d5fb      	bpl.n	8004c66 <_printf_i+0x192>
 8004c6e:	8019      	strh	r1, [r3, #0]
 8004c70:	2300      	movs	r3, #0
 8004c72:	6123      	str	r3, [r4, #16]
 8004c74:	4665      	mov	r5, ip
 8004c76:	e7b9      	b.n	8004bec <_printf_i+0x118>
 8004c78:	6813      	ldr	r3, [r2, #0]
 8004c7a:	1d19      	adds	r1, r3, #4
 8004c7c:	6011      	str	r1, [r2, #0]
 8004c7e:	681d      	ldr	r5, [r3, #0]
 8004c80:	6862      	ldr	r2, [r4, #4]
 8004c82:	2100      	movs	r1, #0
 8004c84:	4628      	mov	r0, r5
 8004c86:	f7fb fad3 	bl	8000230 <memchr>
 8004c8a:	b108      	cbz	r0, 8004c90 <_printf_i+0x1bc>
 8004c8c:	1b40      	subs	r0, r0, r5
 8004c8e:	6060      	str	r0, [r4, #4]
 8004c90:	6863      	ldr	r3, [r4, #4]
 8004c92:	6123      	str	r3, [r4, #16]
 8004c94:	2300      	movs	r3, #0
 8004c96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c9a:	e7a7      	b.n	8004bec <_printf_i+0x118>
 8004c9c:	6923      	ldr	r3, [r4, #16]
 8004c9e:	462a      	mov	r2, r5
 8004ca0:	4639      	mov	r1, r7
 8004ca2:	4630      	mov	r0, r6
 8004ca4:	47c0      	blx	r8
 8004ca6:	3001      	adds	r0, #1
 8004ca8:	d0aa      	beq.n	8004c00 <_printf_i+0x12c>
 8004caa:	6823      	ldr	r3, [r4, #0]
 8004cac:	079b      	lsls	r3, r3, #30
 8004cae:	d413      	bmi.n	8004cd8 <_printf_i+0x204>
 8004cb0:	68e0      	ldr	r0, [r4, #12]
 8004cb2:	9b03      	ldr	r3, [sp, #12]
 8004cb4:	4298      	cmp	r0, r3
 8004cb6:	bfb8      	it	lt
 8004cb8:	4618      	movlt	r0, r3
 8004cba:	e7a3      	b.n	8004c04 <_printf_i+0x130>
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	464a      	mov	r2, r9
 8004cc0:	4639      	mov	r1, r7
 8004cc2:	4630      	mov	r0, r6
 8004cc4:	47c0      	blx	r8
 8004cc6:	3001      	adds	r0, #1
 8004cc8:	d09a      	beq.n	8004c00 <_printf_i+0x12c>
 8004cca:	3501      	adds	r5, #1
 8004ccc:	68e3      	ldr	r3, [r4, #12]
 8004cce:	9a03      	ldr	r2, [sp, #12]
 8004cd0:	1a9b      	subs	r3, r3, r2
 8004cd2:	42ab      	cmp	r3, r5
 8004cd4:	dcf2      	bgt.n	8004cbc <_printf_i+0x1e8>
 8004cd6:	e7eb      	b.n	8004cb0 <_printf_i+0x1dc>
 8004cd8:	2500      	movs	r5, #0
 8004cda:	f104 0919 	add.w	r9, r4, #25
 8004cde:	e7f5      	b.n	8004ccc <_printf_i+0x1f8>
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d1ac      	bne.n	8004c3e <_printf_i+0x16a>
 8004ce4:	7803      	ldrb	r3, [r0, #0]
 8004ce6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004cea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004cee:	e76c      	b.n	8004bca <_printf_i+0xf6>
 8004cf0:	08007f06 	.word	0x08007f06
 8004cf4:	08007f17 	.word	0x08007f17

08004cf8 <_scanf_float>:
 8004cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cfc:	469a      	mov	sl, r3
 8004cfe:	688b      	ldr	r3, [r1, #8]
 8004d00:	4616      	mov	r6, r2
 8004d02:	1e5a      	subs	r2, r3, #1
 8004d04:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004d08:	b087      	sub	sp, #28
 8004d0a:	bf83      	ittte	hi
 8004d0c:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8004d10:	189b      	addhi	r3, r3, r2
 8004d12:	9301      	strhi	r3, [sp, #4]
 8004d14:	2300      	movls	r3, #0
 8004d16:	bf86      	itte	hi
 8004d18:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004d1c:	608b      	strhi	r3, [r1, #8]
 8004d1e:	9301      	strls	r3, [sp, #4]
 8004d20:	680b      	ldr	r3, [r1, #0]
 8004d22:	4688      	mov	r8, r1
 8004d24:	f04f 0b00 	mov.w	fp, #0
 8004d28:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004d2c:	f848 3b1c 	str.w	r3, [r8], #28
 8004d30:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8004d34:	4607      	mov	r7, r0
 8004d36:	460c      	mov	r4, r1
 8004d38:	4645      	mov	r5, r8
 8004d3a:	465a      	mov	r2, fp
 8004d3c:	46d9      	mov	r9, fp
 8004d3e:	f8cd b008 	str.w	fp, [sp, #8]
 8004d42:	68a1      	ldr	r1, [r4, #8]
 8004d44:	b181      	cbz	r1, 8004d68 <_scanf_float+0x70>
 8004d46:	6833      	ldr	r3, [r6, #0]
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	2b49      	cmp	r3, #73	; 0x49
 8004d4c:	d071      	beq.n	8004e32 <_scanf_float+0x13a>
 8004d4e:	d84d      	bhi.n	8004dec <_scanf_float+0xf4>
 8004d50:	2b39      	cmp	r3, #57	; 0x39
 8004d52:	d840      	bhi.n	8004dd6 <_scanf_float+0xde>
 8004d54:	2b31      	cmp	r3, #49	; 0x31
 8004d56:	f080 8088 	bcs.w	8004e6a <_scanf_float+0x172>
 8004d5a:	2b2d      	cmp	r3, #45	; 0x2d
 8004d5c:	f000 8090 	beq.w	8004e80 <_scanf_float+0x188>
 8004d60:	d815      	bhi.n	8004d8e <_scanf_float+0x96>
 8004d62:	2b2b      	cmp	r3, #43	; 0x2b
 8004d64:	f000 808c 	beq.w	8004e80 <_scanf_float+0x188>
 8004d68:	f1b9 0f00 	cmp.w	r9, #0
 8004d6c:	d003      	beq.n	8004d76 <_scanf_float+0x7e>
 8004d6e:	6823      	ldr	r3, [r4, #0]
 8004d70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d74:	6023      	str	r3, [r4, #0]
 8004d76:	3a01      	subs	r2, #1
 8004d78:	2a01      	cmp	r2, #1
 8004d7a:	f200 80ea 	bhi.w	8004f52 <_scanf_float+0x25a>
 8004d7e:	4545      	cmp	r5, r8
 8004d80:	f200 80dc 	bhi.w	8004f3c <_scanf_float+0x244>
 8004d84:	2601      	movs	r6, #1
 8004d86:	4630      	mov	r0, r6
 8004d88:	b007      	add	sp, #28
 8004d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d8e:	2b2e      	cmp	r3, #46	; 0x2e
 8004d90:	f000 809f 	beq.w	8004ed2 <_scanf_float+0x1da>
 8004d94:	2b30      	cmp	r3, #48	; 0x30
 8004d96:	d1e7      	bne.n	8004d68 <_scanf_float+0x70>
 8004d98:	6820      	ldr	r0, [r4, #0]
 8004d9a:	f410 7f80 	tst.w	r0, #256	; 0x100
 8004d9e:	d064      	beq.n	8004e6a <_scanf_float+0x172>
 8004da0:	9b01      	ldr	r3, [sp, #4]
 8004da2:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8004da6:	6020      	str	r0, [r4, #0]
 8004da8:	f109 0901 	add.w	r9, r9, #1
 8004dac:	b11b      	cbz	r3, 8004db6 <_scanf_float+0xbe>
 8004dae:	3b01      	subs	r3, #1
 8004db0:	3101      	adds	r1, #1
 8004db2:	9301      	str	r3, [sp, #4]
 8004db4:	60a1      	str	r1, [r4, #8]
 8004db6:	68a3      	ldr	r3, [r4, #8]
 8004db8:	3b01      	subs	r3, #1
 8004dba:	60a3      	str	r3, [r4, #8]
 8004dbc:	6923      	ldr	r3, [r4, #16]
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	6123      	str	r3, [r4, #16]
 8004dc2:	6873      	ldr	r3, [r6, #4]
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	6073      	str	r3, [r6, #4]
 8004dca:	f340 80ac 	ble.w	8004f26 <_scanf_float+0x22e>
 8004dce:	6833      	ldr	r3, [r6, #0]
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	6033      	str	r3, [r6, #0]
 8004dd4:	e7b5      	b.n	8004d42 <_scanf_float+0x4a>
 8004dd6:	2b45      	cmp	r3, #69	; 0x45
 8004dd8:	f000 8085 	beq.w	8004ee6 <_scanf_float+0x1ee>
 8004ddc:	2b46      	cmp	r3, #70	; 0x46
 8004dde:	d06a      	beq.n	8004eb6 <_scanf_float+0x1be>
 8004de0:	2b41      	cmp	r3, #65	; 0x41
 8004de2:	d1c1      	bne.n	8004d68 <_scanf_float+0x70>
 8004de4:	2a01      	cmp	r2, #1
 8004de6:	d1bf      	bne.n	8004d68 <_scanf_float+0x70>
 8004de8:	2202      	movs	r2, #2
 8004dea:	e046      	b.n	8004e7a <_scanf_float+0x182>
 8004dec:	2b65      	cmp	r3, #101	; 0x65
 8004dee:	d07a      	beq.n	8004ee6 <_scanf_float+0x1ee>
 8004df0:	d818      	bhi.n	8004e24 <_scanf_float+0x12c>
 8004df2:	2b54      	cmp	r3, #84	; 0x54
 8004df4:	d066      	beq.n	8004ec4 <_scanf_float+0x1cc>
 8004df6:	d811      	bhi.n	8004e1c <_scanf_float+0x124>
 8004df8:	2b4e      	cmp	r3, #78	; 0x4e
 8004dfa:	d1b5      	bne.n	8004d68 <_scanf_float+0x70>
 8004dfc:	2a00      	cmp	r2, #0
 8004dfe:	d146      	bne.n	8004e8e <_scanf_float+0x196>
 8004e00:	f1b9 0f00 	cmp.w	r9, #0
 8004e04:	d145      	bne.n	8004e92 <_scanf_float+0x19a>
 8004e06:	6821      	ldr	r1, [r4, #0]
 8004e08:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8004e0c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8004e10:	d13f      	bne.n	8004e92 <_scanf_float+0x19a>
 8004e12:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004e16:	6021      	str	r1, [r4, #0]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	e02e      	b.n	8004e7a <_scanf_float+0x182>
 8004e1c:	2b59      	cmp	r3, #89	; 0x59
 8004e1e:	d01e      	beq.n	8004e5e <_scanf_float+0x166>
 8004e20:	2b61      	cmp	r3, #97	; 0x61
 8004e22:	e7de      	b.n	8004de2 <_scanf_float+0xea>
 8004e24:	2b6e      	cmp	r3, #110	; 0x6e
 8004e26:	d0e9      	beq.n	8004dfc <_scanf_float+0x104>
 8004e28:	d815      	bhi.n	8004e56 <_scanf_float+0x15e>
 8004e2a:	2b66      	cmp	r3, #102	; 0x66
 8004e2c:	d043      	beq.n	8004eb6 <_scanf_float+0x1be>
 8004e2e:	2b69      	cmp	r3, #105	; 0x69
 8004e30:	d19a      	bne.n	8004d68 <_scanf_float+0x70>
 8004e32:	f1bb 0f00 	cmp.w	fp, #0
 8004e36:	d138      	bne.n	8004eaa <_scanf_float+0x1b2>
 8004e38:	f1b9 0f00 	cmp.w	r9, #0
 8004e3c:	d197      	bne.n	8004d6e <_scanf_float+0x76>
 8004e3e:	6821      	ldr	r1, [r4, #0]
 8004e40:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8004e44:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8004e48:	d195      	bne.n	8004d76 <_scanf_float+0x7e>
 8004e4a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004e4e:	6021      	str	r1, [r4, #0]
 8004e50:	f04f 0b01 	mov.w	fp, #1
 8004e54:	e011      	b.n	8004e7a <_scanf_float+0x182>
 8004e56:	2b74      	cmp	r3, #116	; 0x74
 8004e58:	d034      	beq.n	8004ec4 <_scanf_float+0x1cc>
 8004e5a:	2b79      	cmp	r3, #121	; 0x79
 8004e5c:	d184      	bne.n	8004d68 <_scanf_float+0x70>
 8004e5e:	f1bb 0f07 	cmp.w	fp, #7
 8004e62:	d181      	bne.n	8004d68 <_scanf_float+0x70>
 8004e64:	f04f 0b08 	mov.w	fp, #8
 8004e68:	e007      	b.n	8004e7a <_scanf_float+0x182>
 8004e6a:	eb12 0f0b 	cmn.w	r2, fp
 8004e6e:	f47f af7b 	bne.w	8004d68 <_scanf_float+0x70>
 8004e72:	6821      	ldr	r1, [r4, #0]
 8004e74:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8004e78:	6021      	str	r1, [r4, #0]
 8004e7a:	702b      	strb	r3, [r5, #0]
 8004e7c:	3501      	adds	r5, #1
 8004e7e:	e79a      	b.n	8004db6 <_scanf_float+0xbe>
 8004e80:	6821      	ldr	r1, [r4, #0]
 8004e82:	0608      	lsls	r0, r1, #24
 8004e84:	f57f af70 	bpl.w	8004d68 <_scanf_float+0x70>
 8004e88:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004e8c:	e7f4      	b.n	8004e78 <_scanf_float+0x180>
 8004e8e:	2a02      	cmp	r2, #2
 8004e90:	d047      	beq.n	8004f22 <_scanf_float+0x22a>
 8004e92:	f1bb 0f01 	cmp.w	fp, #1
 8004e96:	d003      	beq.n	8004ea0 <_scanf_float+0x1a8>
 8004e98:	f1bb 0f04 	cmp.w	fp, #4
 8004e9c:	f47f af64 	bne.w	8004d68 <_scanf_float+0x70>
 8004ea0:	f10b 0b01 	add.w	fp, fp, #1
 8004ea4:	fa5f fb8b 	uxtb.w	fp, fp
 8004ea8:	e7e7      	b.n	8004e7a <_scanf_float+0x182>
 8004eaa:	f1bb 0f03 	cmp.w	fp, #3
 8004eae:	d0f7      	beq.n	8004ea0 <_scanf_float+0x1a8>
 8004eb0:	f1bb 0f05 	cmp.w	fp, #5
 8004eb4:	e7f2      	b.n	8004e9c <_scanf_float+0x1a4>
 8004eb6:	f1bb 0f02 	cmp.w	fp, #2
 8004eba:	f47f af55 	bne.w	8004d68 <_scanf_float+0x70>
 8004ebe:	f04f 0b03 	mov.w	fp, #3
 8004ec2:	e7da      	b.n	8004e7a <_scanf_float+0x182>
 8004ec4:	f1bb 0f06 	cmp.w	fp, #6
 8004ec8:	f47f af4e 	bne.w	8004d68 <_scanf_float+0x70>
 8004ecc:	f04f 0b07 	mov.w	fp, #7
 8004ed0:	e7d3      	b.n	8004e7a <_scanf_float+0x182>
 8004ed2:	6821      	ldr	r1, [r4, #0]
 8004ed4:	0588      	lsls	r0, r1, #22
 8004ed6:	f57f af47 	bpl.w	8004d68 <_scanf_float+0x70>
 8004eda:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8004ede:	6021      	str	r1, [r4, #0]
 8004ee0:	f8cd 9008 	str.w	r9, [sp, #8]
 8004ee4:	e7c9      	b.n	8004e7a <_scanf_float+0x182>
 8004ee6:	6821      	ldr	r1, [r4, #0]
 8004ee8:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8004eec:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8004ef0:	d006      	beq.n	8004f00 <_scanf_float+0x208>
 8004ef2:	0548      	lsls	r0, r1, #21
 8004ef4:	f57f af38 	bpl.w	8004d68 <_scanf_float+0x70>
 8004ef8:	f1b9 0f00 	cmp.w	r9, #0
 8004efc:	f43f af3b 	beq.w	8004d76 <_scanf_float+0x7e>
 8004f00:	0588      	lsls	r0, r1, #22
 8004f02:	bf58      	it	pl
 8004f04:	9802      	ldrpl	r0, [sp, #8]
 8004f06:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004f0a:	bf58      	it	pl
 8004f0c:	eba9 0000 	subpl.w	r0, r9, r0
 8004f10:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8004f14:	bf58      	it	pl
 8004f16:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8004f1a:	6021      	str	r1, [r4, #0]
 8004f1c:	f04f 0900 	mov.w	r9, #0
 8004f20:	e7ab      	b.n	8004e7a <_scanf_float+0x182>
 8004f22:	2203      	movs	r2, #3
 8004f24:	e7a9      	b.n	8004e7a <_scanf_float+0x182>
 8004f26:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004f2a:	9205      	str	r2, [sp, #20]
 8004f2c:	4631      	mov	r1, r6
 8004f2e:	4638      	mov	r0, r7
 8004f30:	4798      	blx	r3
 8004f32:	9a05      	ldr	r2, [sp, #20]
 8004f34:	2800      	cmp	r0, #0
 8004f36:	f43f af04 	beq.w	8004d42 <_scanf_float+0x4a>
 8004f3a:	e715      	b.n	8004d68 <_scanf_float+0x70>
 8004f3c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004f40:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004f44:	4632      	mov	r2, r6
 8004f46:	4638      	mov	r0, r7
 8004f48:	4798      	blx	r3
 8004f4a:	6923      	ldr	r3, [r4, #16]
 8004f4c:	3b01      	subs	r3, #1
 8004f4e:	6123      	str	r3, [r4, #16]
 8004f50:	e715      	b.n	8004d7e <_scanf_float+0x86>
 8004f52:	f10b 33ff 	add.w	r3, fp, #4294967295
 8004f56:	2b06      	cmp	r3, #6
 8004f58:	d80a      	bhi.n	8004f70 <_scanf_float+0x278>
 8004f5a:	f1bb 0f02 	cmp.w	fp, #2
 8004f5e:	d968      	bls.n	8005032 <_scanf_float+0x33a>
 8004f60:	f1ab 0b03 	sub.w	fp, fp, #3
 8004f64:	fa5f fb8b 	uxtb.w	fp, fp
 8004f68:	eba5 0b0b 	sub.w	fp, r5, fp
 8004f6c:	455d      	cmp	r5, fp
 8004f6e:	d14b      	bne.n	8005008 <_scanf_float+0x310>
 8004f70:	6823      	ldr	r3, [r4, #0]
 8004f72:	05da      	lsls	r2, r3, #23
 8004f74:	d51f      	bpl.n	8004fb6 <_scanf_float+0x2be>
 8004f76:	055b      	lsls	r3, r3, #21
 8004f78:	d468      	bmi.n	800504c <_scanf_float+0x354>
 8004f7a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8004f7e:	6923      	ldr	r3, [r4, #16]
 8004f80:	2965      	cmp	r1, #101	; 0x65
 8004f82:	f103 33ff 	add.w	r3, r3, #4294967295
 8004f86:	f105 3bff 	add.w	fp, r5, #4294967295
 8004f8a:	6123      	str	r3, [r4, #16]
 8004f8c:	d00d      	beq.n	8004faa <_scanf_float+0x2b2>
 8004f8e:	2945      	cmp	r1, #69	; 0x45
 8004f90:	d00b      	beq.n	8004faa <_scanf_float+0x2b2>
 8004f92:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004f96:	4632      	mov	r2, r6
 8004f98:	4638      	mov	r0, r7
 8004f9a:	4798      	blx	r3
 8004f9c:	6923      	ldr	r3, [r4, #16]
 8004f9e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8004fa2:	3b01      	subs	r3, #1
 8004fa4:	f1a5 0b02 	sub.w	fp, r5, #2
 8004fa8:	6123      	str	r3, [r4, #16]
 8004faa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004fae:	4632      	mov	r2, r6
 8004fb0:	4638      	mov	r0, r7
 8004fb2:	4798      	blx	r3
 8004fb4:	465d      	mov	r5, fp
 8004fb6:	6826      	ldr	r6, [r4, #0]
 8004fb8:	f016 0610 	ands.w	r6, r6, #16
 8004fbc:	d17a      	bne.n	80050b4 <_scanf_float+0x3bc>
 8004fbe:	702e      	strb	r6, [r5, #0]
 8004fc0:	6823      	ldr	r3, [r4, #0]
 8004fc2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004fc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fca:	d142      	bne.n	8005052 <_scanf_float+0x35a>
 8004fcc:	9b02      	ldr	r3, [sp, #8]
 8004fce:	eba9 0303 	sub.w	r3, r9, r3
 8004fd2:	425a      	negs	r2, r3
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d149      	bne.n	800506c <_scanf_float+0x374>
 8004fd8:	2200      	movs	r2, #0
 8004fda:	4641      	mov	r1, r8
 8004fdc:	4638      	mov	r0, r7
 8004fde:	f000 fea3 	bl	8005d28 <_strtod_r>
 8004fe2:	6825      	ldr	r5, [r4, #0]
 8004fe4:	f8da 3000 	ldr.w	r3, [sl]
 8004fe8:	f015 0f02 	tst.w	r5, #2
 8004fec:	f103 0204 	add.w	r2, r3, #4
 8004ff0:	ec59 8b10 	vmov	r8, r9, d0
 8004ff4:	f8ca 2000 	str.w	r2, [sl]
 8004ff8:	d043      	beq.n	8005082 <_scanf_float+0x38a>
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	e9c3 8900 	strd	r8, r9, [r3]
 8005000:	68e3      	ldr	r3, [r4, #12]
 8005002:	3301      	adds	r3, #1
 8005004:	60e3      	str	r3, [r4, #12]
 8005006:	e6be      	b.n	8004d86 <_scanf_float+0x8e>
 8005008:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800500c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005010:	4632      	mov	r2, r6
 8005012:	4638      	mov	r0, r7
 8005014:	4798      	blx	r3
 8005016:	6923      	ldr	r3, [r4, #16]
 8005018:	3b01      	subs	r3, #1
 800501a:	6123      	str	r3, [r4, #16]
 800501c:	e7a6      	b.n	8004f6c <_scanf_float+0x274>
 800501e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005022:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005026:	4632      	mov	r2, r6
 8005028:	4638      	mov	r0, r7
 800502a:	4798      	blx	r3
 800502c:	6923      	ldr	r3, [r4, #16]
 800502e:	3b01      	subs	r3, #1
 8005030:	6123      	str	r3, [r4, #16]
 8005032:	4545      	cmp	r5, r8
 8005034:	d8f3      	bhi.n	800501e <_scanf_float+0x326>
 8005036:	e6a5      	b.n	8004d84 <_scanf_float+0x8c>
 8005038:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800503c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005040:	4632      	mov	r2, r6
 8005042:	4638      	mov	r0, r7
 8005044:	4798      	blx	r3
 8005046:	6923      	ldr	r3, [r4, #16]
 8005048:	3b01      	subs	r3, #1
 800504a:	6123      	str	r3, [r4, #16]
 800504c:	4545      	cmp	r5, r8
 800504e:	d8f3      	bhi.n	8005038 <_scanf_float+0x340>
 8005050:	e698      	b.n	8004d84 <_scanf_float+0x8c>
 8005052:	9b03      	ldr	r3, [sp, #12]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d0bf      	beq.n	8004fd8 <_scanf_float+0x2e0>
 8005058:	9904      	ldr	r1, [sp, #16]
 800505a:	230a      	movs	r3, #10
 800505c:	4632      	mov	r2, r6
 800505e:	3101      	adds	r1, #1
 8005060:	4638      	mov	r0, r7
 8005062:	f000 feed 	bl	8005e40 <_strtol_r>
 8005066:	9b03      	ldr	r3, [sp, #12]
 8005068:	9d04      	ldr	r5, [sp, #16]
 800506a:	1ac2      	subs	r2, r0, r3
 800506c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005070:	429d      	cmp	r5, r3
 8005072:	bf28      	it	cs
 8005074:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8005078:	490f      	ldr	r1, [pc, #60]	; (80050b8 <_scanf_float+0x3c0>)
 800507a:	4628      	mov	r0, r5
 800507c:	f000 f824 	bl	80050c8 <siprintf>
 8005080:	e7aa      	b.n	8004fd8 <_scanf_float+0x2e0>
 8005082:	f015 0504 	ands.w	r5, r5, #4
 8005086:	d1b8      	bne.n	8004ffa <_scanf_float+0x302>
 8005088:	681f      	ldr	r7, [r3, #0]
 800508a:	ee10 2a10 	vmov	r2, s0
 800508e:	464b      	mov	r3, r9
 8005090:	ee10 0a10 	vmov	r0, s0
 8005094:	4649      	mov	r1, r9
 8005096:	f7fb fd71 	bl	8000b7c <__aeabi_dcmpun>
 800509a:	b128      	cbz	r0, 80050a8 <_scanf_float+0x3b0>
 800509c:	4628      	mov	r0, r5
 800509e:	f000 f80d 	bl	80050bc <nanf>
 80050a2:	ed87 0a00 	vstr	s0, [r7]
 80050a6:	e7ab      	b.n	8005000 <_scanf_float+0x308>
 80050a8:	4640      	mov	r0, r8
 80050aa:	4649      	mov	r1, r9
 80050ac:	f7fb fdc4 	bl	8000c38 <__aeabi_d2f>
 80050b0:	6038      	str	r0, [r7, #0]
 80050b2:	e7a5      	b.n	8005000 <_scanf_float+0x308>
 80050b4:	2600      	movs	r6, #0
 80050b6:	e666      	b.n	8004d86 <_scanf_float+0x8e>
 80050b8:	08007f28 	.word	0x08007f28

080050bc <nanf>:
 80050bc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80050c4 <nanf+0x8>
 80050c0:	4770      	bx	lr
 80050c2:	bf00      	nop
 80050c4:	7fc00000 	.word	0x7fc00000

080050c8 <siprintf>:
 80050c8:	b40e      	push	{r1, r2, r3}
 80050ca:	b500      	push	{lr}
 80050cc:	b09c      	sub	sp, #112	; 0x70
 80050ce:	ab1d      	add	r3, sp, #116	; 0x74
 80050d0:	9002      	str	r0, [sp, #8]
 80050d2:	9006      	str	r0, [sp, #24]
 80050d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80050d8:	4809      	ldr	r0, [pc, #36]	; (8005100 <siprintf+0x38>)
 80050da:	9107      	str	r1, [sp, #28]
 80050dc:	9104      	str	r1, [sp, #16]
 80050de:	4909      	ldr	r1, [pc, #36]	; (8005104 <siprintf+0x3c>)
 80050e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80050e4:	9105      	str	r1, [sp, #20]
 80050e6:	6800      	ldr	r0, [r0, #0]
 80050e8:	9301      	str	r3, [sp, #4]
 80050ea:	a902      	add	r1, sp, #8
 80050ec:	f002 fd6e 	bl	8007bcc <_svfiprintf_r>
 80050f0:	9b02      	ldr	r3, [sp, #8]
 80050f2:	2200      	movs	r2, #0
 80050f4:	701a      	strb	r2, [r3, #0]
 80050f6:	b01c      	add	sp, #112	; 0x70
 80050f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80050fc:	b003      	add	sp, #12
 80050fe:	4770      	bx	lr
 8005100:	200001d8 	.word	0x200001d8
 8005104:	ffff0208 	.word	0xffff0208

08005108 <sulp>:
 8005108:	b570      	push	{r4, r5, r6, lr}
 800510a:	4604      	mov	r4, r0
 800510c:	460d      	mov	r5, r1
 800510e:	ec45 4b10 	vmov	d0, r4, r5
 8005112:	4616      	mov	r6, r2
 8005114:	f002 fb16 	bl	8007744 <__ulp>
 8005118:	ec51 0b10 	vmov	r0, r1, d0
 800511c:	b17e      	cbz	r6, 800513e <sulp+0x36>
 800511e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005122:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005126:	2b00      	cmp	r3, #0
 8005128:	dd09      	ble.n	800513e <sulp+0x36>
 800512a:	051b      	lsls	r3, r3, #20
 800512c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005130:	2400      	movs	r4, #0
 8005132:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005136:	4622      	mov	r2, r4
 8005138:	462b      	mov	r3, r5
 800513a:	f7fb fa85 	bl	8000648 <__aeabi_dmul>
 800513e:	bd70      	pop	{r4, r5, r6, pc}

08005140 <_strtod_l>:
 8005140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005144:	461f      	mov	r7, r3
 8005146:	b0a1      	sub	sp, #132	; 0x84
 8005148:	2300      	movs	r3, #0
 800514a:	4681      	mov	r9, r0
 800514c:	4638      	mov	r0, r7
 800514e:	460e      	mov	r6, r1
 8005150:	9217      	str	r2, [sp, #92]	; 0x5c
 8005152:	931c      	str	r3, [sp, #112]	; 0x70
 8005154:	f001 fff5 	bl	8007142 <__localeconv_l>
 8005158:	4680      	mov	r8, r0
 800515a:	6800      	ldr	r0, [r0, #0]
 800515c:	f7fb f860 	bl	8000220 <strlen>
 8005160:	f04f 0a00 	mov.w	sl, #0
 8005164:	4604      	mov	r4, r0
 8005166:	f04f 0b00 	mov.w	fp, #0
 800516a:	961b      	str	r6, [sp, #108]	; 0x6c
 800516c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800516e:	781a      	ldrb	r2, [r3, #0]
 8005170:	2a0d      	cmp	r2, #13
 8005172:	d832      	bhi.n	80051da <_strtod_l+0x9a>
 8005174:	2a09      	cmp	r2, #9
 8005176:	d236      	bcs.n	80051e6 <_strtod_l+0xa6>
 8005178:	2a00      	cmp	r2, #0
 800517a:	d03e      	beq.n	80051fa <_strtod_l+0xba>
 800517c:	2300      	movs	r3, #0
 800517e:	930d      	str	r3, [sp, #52]	; 0x34
 8005180:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8005182:	782b      	ldrb	r3, [r5, #0]
 8005184:	2b30      	cmp	r3, #48	; 0x30
 8005186:	f040 80ac 	bne.w	80052e2 <_strtod_l+0x1a2>
 800518a:	786b      	ldrb	r3, [r5, #1]
 800518c:	2b58      	cmp	r3, #88	; 0x58
 800518e:	d001      	beq.n	8005194 <_strtod_l+0x54>
 8005190:	2b78      	cmp	r3, #120	; 0x78
 8005192:	d167      	bne.n	8005264 <_strtod_l+0x124>
 8005194:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005196:	9301      	str	r3, [sp, #4]
 8005198:	ab1c      	add	r3, sp, #112	; 0x70
 800519a:	9300      	str	r3, [sp, #0]
 800519c:	9702      	str	r7, [sp, #8]
 800519e:	ab1d      	add	r3, sp, #116	; 0x74
 80051a0:	4a88      	ldr	r2, [pc, #544]	; (80053c4 <_strtod_l+0x284>)
 80051a2:	a91b      	add	r1, sp, #108	; 0x6c
 80051a4:	4648      	mov	r0, r9
 80051a6:	f001 fcf2 	bl	8006b8e <__gethex>
 80051aa:	f010 0407 	ands.w	r4, r0, #7
 80051ae:	4606      	mov	r6, r0
 80051b0:	d005      	beq.n	80051be <_strtod_l+0x7e>
 80051b2:	2c06      	cmp	r4, #6
 80051b4:	d12b      	bne.n	800520e <_strtod_l+0xce>
 80051b6:	3501      	adds	r5, #1
 80051b8:	2300      	movs	r3, #0
 80051ba:	951b      	str	r5, [sp, #108]	; 0x6c
 80051bc:	930d      	str	r3, [sp, #52]	; 0x34
 80051be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	f040 859a 	bne.w	8005cfa <_strtod_l+0xbba>
 80051c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80051c8:	b1e3      	cbz	r3, 8005204 <_strtod_l+0xc4>
 80051ca:	4652      	mov	r2, sl
 80051cc:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80051d0:	ec43 2b10 	vmov	d0, r2, r3
 80051d4:	b021      	add	sp, #132	; 0x84
 80051d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051da:	2a2b      	cmp	r2, #43	; 0x2b
 80051dc:	d015      	beq.n	800520a <_strtod_l+0xca>
 80051de:	2a2d      	cmp	r2, #45	; 0x2d
 80051e0:	d004      	beq.n	80051ec <_strtod_l+0xac>
 80051e2:	2a20      	cmp	r2, #32
 80051e4:	d1ca      	bne.n	800517c <_strtod_l+0x3c>
 80051e6:	3301      	adds	r3, #1
 80051e8:	931b      	str	r3, [sp, #108]	; 0x6c
 80051ea:	e7bf      	b.n	800516c <_strtod_l+0x2c>
 80051ec:	2201      	movs	r2, #1
 80051ee:	920d      	str	r2, [sp, #52]	; 0x34
 80051f0:	1c5a      	adds	r2, r3, #1
 80051f2:	921b      	str	r2, [sp, #108]	; 0x6c
 80051f4:	785b      	ldrb	r3, [r3, #1]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1c2      	bne.n	8005180 <_strtod_l+0x40>
 80051fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80051fc:	961b      	str	r6, [sp, #108]	; 0x6c
 80051fe:	2b00      	cmp	r3, #0
 8005200:	f040 8579 	bne.w	8005cf6 <_strtod_l+0xbb6>
 8005204:	4652      	mov	r2, sl
 8005206:	465b      	mov	r3, fp
 8005208:	e7e2      	b.n	80051d0 <_strtod_l+0x90>
 800520a:	2200      	movs	r2, #0
 800520c:	e7ef      	b.n	80051ee <_strtod_l+0xae>
 800520e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005210:	b13a      	cbz	r2, 8005222 <_strtod_l+0xe2>
 8005212:	2135      	movs	r1, #53	; 0x35
 8005214:	a81e      	add	r0, sp, #120	; 0x78
 8005216:	f002 fb8d 	bl	8007934 <__copybits>
 800521a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800521c:	4648      	mov	r0, r9
 800521e:	f001 fffa 	bl	8007216 <_Bfree>
 8005222:	3c01      	subs	r4, #1
 8005224:	2c04      	cmp	r4, #4
 8005226:	d806      	bhi.n	8005236 <_strtod_l+0xf6>
 8005228:	e8df f004 	tbb	[pc, r4]
 800522c:	1714030a 	.word	0x1714030a
 8005230:	0a          	.byte	0x0a
 8005231:	00          	.byte	0x00
 8005232:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8005236:	0730      	lsls	r0, r6, #28
 8005238:	d5c1      	bpl.n	80051be <_strtod_l+0x7e>
 800523a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800523e:	e7be      	b.n	80051be <_strtod_l+0x7e>
 8005240:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8005244:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005246:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800524a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800524e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005252:	e7f0      	b.n	8005236 <_strtod_l+0xf6>
 8005254:	f8df b170 	ldr.w	fp, [pc, #368]	; 80053c8 <_strtod_l+0x288>
 8005258:	e7ed      	b.n	8005236 <_strtod_l+0xf6>
 800525a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800525e:	f04f 3aff 	mov.w	sl, #4294967295
 8005262:	e7e8      	b.n	8005236 <_strtod_l+0xf6>
 8005264:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005266:	1c5a      	adds	r2, r3, #1
 8005268:	921b      	str	r2, [sp, #108]	; 0x6c
 800526a:	785b      	ldrb	r3, [r3, #1]
 800526c:	2b30      	cmp	r3, #48	; 0x30
 800526e:	d0f9      	beq.n	8005264 <_strtod_l+0x124>
 8005270:	2b00      	cmp	r3, #0
 8005272:	d0a4      	beq.n	80051be <_strtod_l+0x7e>
 8005274:	2301      	movs	r3, #1
 8005276:	2500      	movs	r5, #0
 8005278:	9306      	str	r3, [sp, #24]
 800527a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800527c:	9308      	str	r3, [sp, #32]
 800527e:	9507      	str	r5, [sp, #28]
 8005280:	9505      	str	r5, [sp, #20]
 8005282:	220a      	movs	r2, #10
 8005284:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8005286:	7807      	ldrb	r7, [r0, #0]
 8005288:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800528c:	b2d9      	uxtb	r1, r3
 800528e:	2909      	cmp	r1, #9
 8005290:	d929      	bls.n	80052e6 <_strtod_l+0x1a6>
 8005292:	4622      	mov	r2, r4
 8005294:	f8d8 1000 	ldr.w	r1, [r8]
 8005298:	f002 fda0 	bl	8007ddc <strncmp>
 800529c:	2800      	cmp	r0, #0
 800529e:	d031      	beq.n	8005304 <_strtod_l+0x1c4>
 80052a0:	2000      	movs	r0, #0
 80052a2:	9c05      	ldr	r4, [sp, #20]
 80052a4:	9004      	str	r0, [sp, #16]
 80052a6:	463b      	mov	r3, r7
 80052a8:	4602      	mov	r2, r0
 80052aa:	2b65      	cmp	r3, #101	; 0x65
 80052ac:	d001      	beq.n	80052b2 <_strtod_l+0x172>
 80052ae:	2b45      	cmp	r3, #69	; 0x45
 80052b0:	d114      	bne.n	80052dc <_strtod_l+0x19c>
 80052b2:	b924      	cbnz	r4, 80052be <_strtod_l+0x17e>
 80052b4:	b910      	cbnz	r0, 80052bc <_strtod_l+0x17c>
 80052b6:	9b06      	ldr	r3, [sp, #24]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d09e      	beq.n	80051fa <_strtod_l+0xba>
 80052bc:	2400      	movs	r4, #0
 80052be:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80052c0:	1c73      	adds	r3, r6, #1
 80052c2:	931b      	str	r3, [sp, #108]	; 0x6c
 80052c4:	7873      	ldrb	r3, [r6, #1]
 80052c6:	2b2b      	cmp	r3, #43	; 0x2b
 80052c8:	d078      	beq.n	80053bc <_strtod_l+0x27c>
 80052ca:	2b2d      	cmp	r3, #45	; 0x2d
 80052cc:	d070      	beq.n	80053b0 <_strtod_l+0x270>
 80052ce:	f04f 0c00 	mov.w	ip, #0
 80052d2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80052d6:	2f09      	cmp	r7, #9
 80052d8:	d97c      	bls.n	80053d4 <_strtod_l+0x294>
 80052da:	961b      	str	r6, [sp, #108]	; 0x6c
 80052dc:	f04f 0e00 	mov.w	lr, #0
 80052e0:	e09a      	b.n	8005418 <_strtod_l+0x2d8>
 80052e2:	2300      	movs	r3, #0
 80052e4:	e7c7      	b.n	8005276 <_strtod_l+0x136>
 80052e6:	9905      	ldr	r1, [sp, #20]
 80052e8:	2908      	cmp	r1, #8
 80052ea:	bfdd      	ittte	le
 80052ec:	9907      	ldrle	r1, [sp, #28]
 80052ee:	fb02 3301 	mlale	r3, r2, r1, r3
 80052f2:	9307      	strle	r3, [sp, #28]
 80052f4:	fb02 3505 	mlagt	r5, r2, r5, r3
 80052f8:	9b05      	ldr	r3, [sp, #20]
 80052fa:	3001      	adds	r0, #1
 80052fc:	3301      	adds	r3, #1
 80052fe:	9305      	str	r3, [sp, #20]
 8005300:	901b      	str	r0, [sp, #108]	; 0x6c
 8005302:	e7bf      	b.n	8005284 <_strtod_l+0x144>
 8005304:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005306:	191a      	adds	r2, r3, r4
 8005308:	921b      	str	r2, [sp, #108]	; 0x6c
 800530a:	9a05      	ldr	r2, [sp, #20]
 800530c:	5d1b      	ldrb	r3, [r3, r4]
 800530e:	2a00      	cmp	r2, #0
 8005310:	d037      	beq.n	8005382 <_strtod_l+0x242>
 8005312:	9c05      	ldr	r4, [sp, #20]
 8005314:	4602      	mov	r2, r0
 8005316:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800531a:	2909      	cmp	r1, #9
 800531c:	d913      	bls.n	8005346 <_strtod_l+0x206>
 800531e:	2101      	movs	r1, #1
 8005320:	9104      	str	r1, [sp, #16]
 8005322:	e7c2      	b.n	80052aa <_strtod_l+0x16a>
 8005324:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005326:	1c5a      	adds	r2, r3, #1
 8005328:	921b      	str	r2, [sp, #108]	; 0x6c
 800532a:	785b      	ldrb	r3, [r3, #1]
 800532c:	3001      	adds	r0, #1
 800532e:	2b30      	cmp	r3, #48	; 0x30
 8005330:	d0f8      	beq.n	8005324 <_strtod_l+0x1e4>
 8005332:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8005336:	2a08      	cmp	r2, #8
 8005338:	f200 84e4 	bhi.w	8005d04 <_strtod_l+0xbc4>
 800533c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800533e:	9208      	str	r2, [sp, #32]
 8005340:	4602      	mov	r2, r0
 8005342:	2000      	movs	r0, #0
 8005344:	4604      	mov	r4, r0
 8005346:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800534a:	f100 0101 	add.w	r1, r0, #1
 800534e:	d012      	beq.n	8005376 <_strtod_l+0x236>
 8005350:	440a      	add	r2, r1
 8005352:	eb00 0c04 	add.w	ip, r0, r4
 8005356:	4621      	mov	r1, r4
 8005358:	270a      	movs	r7, #10
 800535a:	458c      	cmp	ip, r1
 800535c:	d113      	bne.n	8005386 <_strtod_l+0x246>
 800535e:	1821      	adds	r1, r4, r0
 8005360:	2908      	cmp	r1, #8
 8005362:	f104 0401 	add.w	r4, r4, #1
 8005366:	4404      	add	r4, r0
 8005368:	dc19      	bgt.n	800539e <_strtod_l+0x25e>
 800536a:	9b07      	ldr	r3, [sp, #28]
 800536c:	210a      	movs	r1, #10
 800536e:	fb01 e303 	mla	r3, r1, r3, lr
 8005372:	9307      	str	r3, [sp, #28]
 8005374:	2100      	movs	r1, #0
 8005376:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005378:	1c58      	adds	r0, r3, #1
 800537a:	901b      	str	r0, [sp, #108]	; 0x6c
 800537c:	785b      	ldrb	r3, [r3, #1]
 800537e:	4608      	mov	r0, r1
 8005380:	e7c9      	b.n	8005316 <_strtod_l+0x1d6>
 8005382:	9805      	ldr	r0, [sp, #20]
 8005384:	e7d3      	b.n	800532e <_strtod_l+0x1ee>
 8005386:	2908      	cmp	r1, #8
 8005388:	f101 0101 	add.w	r1, r1, #1
 800538c:	dc03      	bgt.n	8005396 <_strtod_l+0x256>
 800538e:	9b07      	ldr	r3, [sp, #28]
 8005390:	437b      	muls	r3, r7
 8005392:	9307      	str	r3, [sp, #28]
 8005394:	e7e1      	b.n	800535a <_strtod_l+0x21a>
 8005396:	2910      	cmp	r1, #16
 8005398:	bfd8      	it	le
 800539a:	437d      	mulle	r5, r7
 800539c:	e7dd      	b.n	800535a <_strtod_l+0x21a>
 800539e:	2c10      	cmp	r4, #16
 80053a0:	bfdc      	itt	le
 80053a2:	210a      	movle	r1, #10
 80053a4:	fb01 e505 	mlale	r5, r1, r5, lr
 80053a8:	e7e4      	b.n	8005374 <_strtod_l+0x234>
 80053aa:	2301      	movs	r3, #1
 80053ac:	9304      	str	r3, [sp, #16]
 80053ae:	e781      	b.n	80052b4 <_strtod_l+0x174>
 80053b0:	f04f 0c01 	mov.w	ip, #1
 80053b4:	1cb3      	adds	r3, r6, #2
 80053b6:	931b      	str	r3, [sp, #108]	; 0x6c
 80053b8:	78b3      	ldrb	r3, [r6, #2]
 80053ba:	e78a      	b.n	80052d2 <_strtod_l+0x192>
 80053bc:	f04f 0c00 	mov.w	ip, #0
 80053c0:	e7f8      	b.n	80053b4 <_strtod_l+0x274>
 80053c2:	bf00      	nop
 80053c4:	08007f30 	.word	0x08007f30
 80053c8:	7ff00000 	.word	0x7ff00000
 80053cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80053ce:	1c5f      	adds	r7, r3, #1
 80053d0:	971b      	str	r7, [sp, #108]	; 0x6c
 80053d2:	785b      	ldrb	r3, [r3, #1]
 80053d4:	2b30      	cmp	r3, #48	; 0x30
 80053d6:	d0f9      	beq.n	80053cc <_strtod_l+0x28c>
 80053d8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80053dc:	2f08      	cmp	r7, #8
 80053de:	f63f af7d 	bhi.w	80052dc <_strtod_l+0x19c>
 80053e2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80053e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80053e8:	930a      	str	r3, [sp, #40]	; 0x28
 80053ea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80053ec:	1c5f      	adds	r7, r3, #1
 80053ee:	971b      	str	r7, [sp, #108]	; 0x6c
 80053f0:	785b      	ldrb	r3, [r3, #1]
 80053f2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80053f6:	f1b8 0f09 	cmp.w	r8, #9
 80053fa:	d937      	bls.n	800546c <_strtod_l+0x32c>
 80053fc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80053fe:	1a7f      	subs	r7, r7, r1
 8005400:	2f08      	cmp	r7, #8
 8005402:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8005406:	dc37      	bgt.n	8005478 <_strtod_l+0x338>
 8005408:	45be      	cmp	lr, r7
 800540a:	bfa8      	it	ge
 800540c:	46be      	movge	lr, r7
 800540e:	f1bc 0f00 	cmp.w	ip, #0
 8005412:	d001      	beq.n	8005418 <_strtod_l+0x2d8>
 8005414:	f1ce 0e00 	rsb	lr, lr, #0
 8005418:	2c00      	cmp	r4, #0
 800541a:	d151      	bne.n	80054c0 <_strtod_l+0x380>
 800541c:	2800      	cmp	r0, #0
 800541e:	f47f aece 	bne.w	80051be <_strtod_l+0x7e>
 8005422:	9a06      	ldr	r2, [sp, #24]
 8005424:	2a00      	cmp	r2, #0
 8005426:	f47f aeca 	bne.w	80051be <_strtod_l+0x7e>
 800542a:	9a04      	ldr	r2, [sp, #16]
 800542c:	2a00      	cmp	r2, #0
 800542e:	f47f aee4 	bne.w	80051fa <_strtod_l+0xba>
 8005432:	2b4e      	cmp	r3, #78	; 0x4e
 8005434:	d027      	beq.n	8005486 <_strtod_l+0x346>
 8005436:	dc21      	bgt.n	800547c <_strtod_l+0x33c>
 8005438:	2b49      	cmp	r3, #73	; 0x49
 800543a:	f47f aede 	bne.w	80051fa <_strtod_l+0xba>
 800543e:	49a0      	ldr	r1, [pc, #640]	; (80056c0 <_strtod_l+0x580>)
 8005440:	a81b      	add	r0, sp, #108	; 0x6c
 8005442:	f001 fdd7 	bl	8006ff4 <__match>
 8005446:	2800      	cmp	r0, #0
 8005448:	f43f aed7 	beq.w	80051fa <_strtod_l+0xba>
 800544c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800544e:	499d      	ldr	r1, [pc, #628]	; (80056c4 <_strtod_l+0x584>)
 8005450:	3b01      	subs	r3, #1
 8005452:	a81b      	add	r0, sp, #108	; 0x6c
 8005454:	931b      	str	r3, [sp, #108]	; 0x6c
 8005456:	f001 fdcd 	bl	8006ff4 <__match>
 800545a:	b910      	cbnz	r0, 8005462 <_strtod_l+0x322>
 800545c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800545e:	3301      	adds	r3, #1
 8005460:	931b      	str	r3, [sp, #108]	; 0x6c
 8005462:	f8df b274 	ldr.w	fp, [pc, #628]	; 80056d8 <_strtod_l+0x598>
 8005466:	f04f 0a00 	mov.w	sl, #0
 800546a:	e6a8      	b.n	80051be <_strtod_l+0x7e>
 800546c:	210a      	movs	r1, #10
 800546e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8005472:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005476:	e7b8      	b.n	80053ea <_strtod_l+0x2aa>
 8005478:	46be      	mov	lr, r7
 800547a:	e7c8      	b.n	800540e <_strtod_l+0x2ce>
 800547c:	2b69      	cmp	r3, #105	; 0x69
 800547e:	d0de      	beq.n	800543e <_strtod_l+0x2fe>
 8005480:	2b6e      	cmp	r3, #110	; 0x6e
 8005482:	f47f aeba 	bne.w	80051fa <_strtod_l+0xba>
 8005486:	4990      	ldr	r1, [pc, #576]	; (80056c8 <_strtod_l+0x588>)
 8005488:	a81b      	add	r0, sp, #108	; 0x6c
 800548a:	f001 fdb3 	bl	8006ff4 <__match>
 800548e:	2800      	cmp	r0, #0
 8005490:	f43f aeb3 	beq.w	80051fa <_strtod_l+0xba>
 8005494:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	2b28      	cmp	r3, #40	; 0x28
 800549a:	d10e      	bne.n	80054ba <_strtod_l+0x37a>
 800549c:	aa1e      	add	r2, sp, #120	; 0x78
 800549e:	498b      	ldr	r1, [pc, #556]	; (80056cc <_strtod_l+0x58c>)
 80054a0:	a81b      	add	r0, sp, #108	; 0x6c
 80054a2:	f001 fdbb 	bl	800701c <__hexnan>
 80054a6:	2805      	cmp	r0, #5
 80054a8:	d107      	bne.n	80054ba <_strtod_l+0x37a>
 80054aa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80054ac:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80054b0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80054b4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80054b8:	e681      	b.n	80051be <_strtod_l+0x7e>
 80054ba:	f8df b224 	ldr.w	fp, [pc, #548]	; 80056e0 <_strtod_l+0x5a0>
 80054be:	e7d2      	b.n	8005466 <_strtod_l+0x326>
 80054c0:	ebae 0302 	sub.w	r3, lr, r2
 80054c4:	9306      	str	r3, [sp, #24]
 80054c6:	9b05      	ldr	r3, [sp, #20]
 80054c8:	9807      	ldr	r0, [sp, #28]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	bf08      	it	eq
 80054ce:	4623      	moveq	r3, r4
 80054d0:	2c10      	cmp	r4, #16
 80054d2:	9305      	str	r3, [sp, #20]
 80054d4:	46a0      	mov	r8, r4
 80054d6:	bfa8      	it	ge
 80054d8:	f04f 0810 	movge.w	r8, #16
 80054dc:	f7fb f83a 	bl	8000554 <__aeabi_ui2d>
 80054e0:	2c09      	cmp	r4, #9
 80054e2:	4682      	mov	sl, r0
 80054e4:	468b      	mov	fp, r1
 80054e6:	dc13      	bgt.n	8005510 <_strtod_l+0x3d0>
 80054e8:	9b06      	ldr	r3, [sp, #24]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	f43f ae67 	beq.w	80051be <_strtod_l+0x7e>
 80054f0:	9b06      	ldr	r3, [sp, #24]
 80054f2:	dd7a      	ble.n	80055ea <_strtod_l+0x4aa>
 80054f4:	2b16      	cmp	r3, #22
 80054f6:	dc61      	bgt.n	80055bc <_strtod_l+0x47c>
 80054f8:	4a75      	ldr	r2, [pc, #468]	; (80056d0 <_strtod_l+0x590>)
 80054fa:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80054fe:	e9de 0100 	ldrd	r0, r1, [lr]
 8005502:	4652      	mov	r2, sl
 8005504:	465b      	mov	r3, fp
 8005506:	f7fb f89f 	bl	8000648 <__aeabi_dmul>
 800550a:	4682      	mov	sl, r0
 800550c:	468b      	mov	fp, r1
 800550e:	e656      	b.n	80051be <_strtod_l+0x7e>
 8005510:	4b6f      	ldr	r3, [pc, #444]	; (80056d0 <_strtod_l+0x590>)
 8005512:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005516:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800551a:	f7fb f895 	bl	8000648 <__aeabi_dmul>
 800551e:	4606      	mov	r6, r0
 8005520:	4628      	mov	r0, r5
 8005522:	460f      	mov	r7, r1
 8005524:	f7fb f816 	bl	8000554 <__aeabi_ui2d>
 8005528:	4602      	mov	r2, r0
 800552a:	460b      	mov	r3, r1
 800552c:	4630      	mov	r0, r6
 800552e:	4639      	mov	r1, r7
 8005530:	f7fa fed4 	bl	80002dc <__adddf3>
 8005534:	2c0f      	cmp	r4, #15
 8005536:	4682      	mov	sl, r0
 8005538:	468b      	mov	fp, r1
 800553a:	ddd5      	ble.n	80054e8 <_strtod_l+0x3a8>
 800553c:	9b06      	ldr	r3, [sp, #24]
 800553e:	eba4 0808 	sub.w	r8, r4, r8
 8005542:	4498      	add	r8, r3
 8005544:	f1b8 0f00 	cmp.w	r8, #0
 8005548:	f340 8096 	ble.w	8005678 <_strtod_l+0x538>
 800554c:	f018 030f 	ands.w	r3, r8, #15
 8005550:	d00a      	beq.n	8005568 <_strtod_l+0x428>
 8005552:	495f      	ldr	r1, [pc, #380]	; (80056d0 <_strtod_l+0x590>)
 8005554:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005558:	4652      	mov	r2, sl
 800555a:	465b      	mov	r3, fp
 800555c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005560:	f7fb f872 	bl	8000648 <__aeabi_dmul>
 8005564:	4682      	mov	sl, r0
 8005566:	468b      	mov	fp, r1
 8005568:	f038 080f 	bics.w	r8, r8, #15
 800556c:	d073      	beq.n	8005656 <_strtod_l+0x516>
 800556e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005572:	dd47      	ble.n	8005604 <_strtod_l+0x4c4>
 8005574:	2400      	movs	r4, #0
 8005576:	46a0      	mov	r8, r4
 8005578:	9407      	str	r4, [sp, #28]
 800557a:	9405      	str	r4, [sp, #20]
 800557c:	2322      	movs	r3, #34	; 0x22
 800557e:	f8df b158 	ldr.w	fp, [pc, #344]	; 80056d8 <_strtod_l+0x598>
 8005582:	f8c9 3000 	str.w	r3, [r9]
 8005586:	f04f 0a00 	mov.w	sl, #0
 800558a:	9b07      	ldr	r3, [sp, #28]
 800558c:	2b00      	cmp	r3, #0
 800558e:	f43f ae16 	beq.w	80051be <_strtod_l+0x7e>
 8005592:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005594:	4648      	mov	r0, r9
 8005596:	f001 fe3e 	bl	8007216 <_Bfree>
 800559a:	9905      	ldr	r1, [sp, #20]
 800559c:	4648      	mov	r0, r9
 800559e:	f001 fe3a 	bl	8007216 <_Bfree>
 80055a2:	4641      	mov	r1, r8
 80055a4:	4648      	mov	r0, r9
 80055a6:	f001 fe36 	bl	8007216 <_Bfree>
 80055aa:	9907      	ldr	r1, [sp, #28]
 80055ac:	4648      	mov	r0, r9
 80055ae:	f001 fe32 	bl	8007216 <_Bfree>
 80055b2:	4621      	mov	r1, r4
 80055b4:	4648      	mov	r0, r9
 80055b6:	f001 fe2e 	bl	8007216 <_Bfree>
 80055ba:	e600      	b.n	80051be <_strtod_l+0x7e>
 80055bc:	9a06      	ldr	r2, [sp, #24]
 80055be:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80055c2:	4293      	cmp	r3, r2
 80055c4:	dbba      	blt.n	800553c <_strtod_l+0x3fc>
 80055c6:	4d42      	ldr	r5, [pc, #264]	; (80056d0 <_strtod_l+0x590>)
 80055c8:	f1c4 040f 	rsb	r4, r4, #15
 80055cc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80055d0:	4652      	mov	r2, sl
 80055d2:	465b      	mov	r3, fp
 80055d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80055d8:	f7fb f836 	bl	8000648 <__aeabi_dmul>
 80055dc:	9b06      	ldr	r3, [sp, #24]
 80055de:	1b1c      	subs	r4, r3, r4
 80055e0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80055e4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80055e8:	e78d      	b.n	8005506 <_strtod_l+0x3c6>
 80055ea:	f113 0f16 	cmn.w	r3, #22
 80055ee:	dba5      	blt.n	800553c <_strtod_l+0x3fc>
 80055f0:	4a37      	ldr	r2, [pc, #220]	; (80056d0 <_strtod_l+0x590>)
 80055f2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80055f6:	e9d2 2300 	ldrd	r2, r3, [r2]
 80055fa:	4650      	mov	r0, sl
 80055fc:	4659      	mov	r1, fp
 80055fe:	f7fb f94d 	bl	800089c <__aeabi_ddiv>
 8005602:	e782      	b.n	800550a <_strtod_l+0x3ca>
 8005604:	2300      	movs	r3, #0
 8005606:	4e33      	ldr	r6, [pc, #204]	; (80056d4 <_strtod_l+0x594>)
 8005608:	ea4f 1828 	mov.w	r8, r8, asr #4
 800560c:	4650      	mov	r0, sl
 800560e:	4659      	mov	r1, fp
 8005610:	461d      	mov	r5, r3
 8005612:	f1b8 0f01 	cmp.w	r8, #1
 8005616:	dc21      	bgt.n	800565c <_strtod_l+0x51c>
 8005618:	b10b      	cbz	r3, 800561e <_strtod_l+0x4de>
 800561a:	4682      	mov	sl, r0
 800561c:	468b      	mov	fp, r1
 800561e:	4b2d      	ldr	r3, [pc, #180]	; (80056d4 <_strtod_l+0x594>)
 8005620:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005624:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005628:	4652      	mov	r2, sl
 800562a:	465b      	mov	r3, fp
 800562c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8005630:	f7fb f80a 	bl	8000648 <__aeabi_dmul>
 8005634:	4b28      	ldr	r3, [pc, #160]	; (80056d8 <_strtod_l+0x598>)
 8005636:	460a      	mov	r2, r1
 8005638:	400b      	ands	r3, r1
 800563a:	4928      	ldr	r1, [pc, #160]	; (80056dc <_strtod_l+0x59c>)
 800563c:	428b      	cmp	r3, r1
 800563e:	4682      	mov	sl, r0
 8005640:	d898      	bhi.n	8005574 <_strtod_l+0x434>
 8005642:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005646:	428b      	cmp	r3, r1
 8005648:	bf86      	itte	hi
 800564a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80056e4 <_strtod_l+0x5a4>
 800564e:	f04f 3aff 	movhi.w	sl, #4294967295
 8005652:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8005656:	2300      	movs	r3, #0
 8005658:	9304      	str	r3, [sp, #16]
 800565a:	e077      	b.n	800574c <_strtod_l+0x60c>
 800565c:	f018 0f01 	tst.w	r8, #1
 8005660:	d006      	beq.n	8005670 <_strtod_l+0x530>
 8005662:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8005666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800566a:	f7fa ffed 	bl	8000648 <__aeabi_dmul>
 800566e:	2301      	movs	r3, #1
 8005670:	3501      	adds	r5, #1
 8005672:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005676:	e7cc      	b.n	8005612 <_strtod_l+0x4d2>
 8005678:	d0ed      	beq.n	8005656 <_strtod_l+0x516>
 800567a:	f1c8 0800 	rsb	r8, r8, #0
 800567e:	f018 020f 	ands.w	r2, r8, #15
 8005682:	d00a      	beq.n	800569a <_strtod_l+0x55a>
 8005684:	4b12      	ldr	r3, [pc, #72]	; (80056d0 <_strtod_l+0x590>)
 8005686:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800568a:	4650      	mov	r0, sl
 800568c:	4659      	mov	r1, fp
 800568e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005692:	f7fb f903 	bl	800089c <__aeabi_ddiv>
 8005696:	4682      	mov	sl, r0
 8005698:	468b      	mov	fp, r1
 800569a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800569e:	d0da      	beq.n	8005656 <_strtod_l+0x516>
 80056a0:	f1b8 0f1f 	cmp.w	r8, #31
 80056a4:	dd20      	ble.n	80056e8 <_strtod_l+0x5a8>
 80056a6:	2400      	movs	r4, #0
 80056a8:	46a0      	mov	r8, r4
 80056aa:	9407      	str	r4, [sp, #28]
 80056ac:	9405      	str	r4, [sp, #20]
 80056ae:	2322      	movs	r3, #34	; 0x22
 80056b0:	f04f 0a00 	mov.w	sl, #0
 80056b4:	f04f 0b00 	mov.w	fp, #0
 80056b8:	f8c9 3000 	str.w	r3, [r9]
 80056bc:	e765      	b.n	800558a <_strtod_l+0x44a>
 80056be:	bf00      	nop
 80056c0:	08007ef9 	.word	0x08007ef9
 80056c4:	08007f83 	.word	0x08007f83
 80056c8:	08007f01 	.word	0x08007f01
 80056cc:	08007f44 	.word	0x08007f44
 80056d0:	08007fc0 	.word	0x08007fc0
 80056d4:	08007f98 	.word	0x08007f98
 80056d8:	7ff00000 	.word	0x7ff00000
 80056dc:	7ca00000 	.word	0x7ca00000
 80056e0:	fff80000 	.word	0xfff80000
 80056e4:	7fefffff 	.word	0x7fefffff
 80056e8:	f018 0310 	ands.w	r3, r8, #16
 80056ec:	bf18      	it	ne
 80056ee:	236a      	movne	r3, #106	; 0x6a
 80056f0:	4da0      	ldr	r5, [pc, #640]	; (8005974 <_strtod_l+0x834>)
 80056f2:	9304      	str	r3, [sp, #16]
 80056f4:	4650      	mov	r0, sl
 80056f6:	4659      	mov	r1, fp
 80056f8:	2300      	movs	r3, #0
 80056fa:	f1b8 0f00 	cmp.w	r8, #0
 80056fe:	f300 810a 	bgt.w	8005916 <_strtod_l+0x7d6>
 8005702:	b10b      	cbz	r3, 8005708 <_strtod_l+0x5c8>
 8005704:	4682      	mov	sl, r0
 8005706:	468b      	mov	fp, r1
 8005708:	9b04      	ldr	r3, [sp, #16]
 800570a:	b1bb      	cbz	r3, 800573c <_strtod_l+0x5fc>
 800570c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8005710:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005714:	2b00      	cmp	r3, #0
 8005716:	4659      	mov	r1, fp
 8005718:	dd10      	ble.n	800573c <_strtod_l+0x5fc>
 800571a:	2b1f      	cmp	r3, #31
 800571c:	f340 8107 	ble.w	800592e <_strtod_l+0x7ee>
 8005720:	2b34      	cmp	r3, #52	; 0x34
 8005722:	bfde      	ittt	le
 8005724:	3b20      	suble	r3, #32
 8005726:	f04f 32ff 	movle.w	r2, #4294967295
 800572a:	fa02 f303 	lslle.w	r3, r2, r3
 800572e:	f04f 0a00 	mov.w	sl, #0
 8005732:	bfcc      	ite	gt
 8005734:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005738:	ea03 0b01 	andle.w	fp, r3, r1
 800573c:	2200      	movs	r2, #0
 800573e:	2300      	movs	r3, #0
 8005740:	4650      	mov	r0, sl
 8005742:	4659      	mov	r1, fp
 8005744:	f7fb f9e8 	bl	8000b18 <__aeabi_dcmpeq>
 8005748:	2800      	cmp	r0, #0
 800574a:	d1ac      	bne.n	80056a6 <_strtod_l+0x566>
 800574c:	9b07      	ldr	r3, [sp, #28]
 800574e:	9300      	str	r3, [sp, #0]
 8005750:	9a05      	ldr	r2, [sp, #20]
 8005752:	9908      	ldr	r1, [sp, #32]
 8005754:	4623      	mov	r3, r4
 8005756:	4648      	mov	r0, r9
 8005758:	f001 fdaf 	bl	80072ba <__s2b>
 800575c:	9007      	str	r0, [sp, #28]
 800575e:	2800      	cmp	r0, #0
 8005760:	f43f af08 	beq.w	8005574 <_strtod_l+0x434>
 8005764:	9a06      	ldr	r2, [sp, #24]
 8005766:	9b06      	ldr	r3, [sp, #24]
 8005768:	2a00      	cmp	r2, #0
 800576a:	f1c3 0300 	rsb	r3, r3, #0
 800576e:	bfa8      	it	ge
 8005770:	2300      	movge	r3, #0
 8005772:	930e      	str	r3, [sp, #56]	; 0x38
 8005774:	2400      	movs	r4, #0
 8005776:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800577a:	9316      	str	r3, [sp, #88]	; 0x58
 800577c:	46a0      	mov	r8, r4
 800577e:	9b07      	ldr	r3, [sp, #28]
 8005780:	4648      	mov	r0, r9
 8005782:	6859      	ldr	r1, [r3, #4]
 8005784:	f001 fd13 	bl	80071ae <_Balloc>
 8005788:	9005      	str	r0, [sp, #20]
 800578a:	2800      	cmp	r0, #0
 800578c:	f43f aef6 	beq.w	800557c <_strtod_l+0x43c>
 8005790:	9b07      	ldr	r3, [sp, #28]
 8005792:	691a      	ldr	r2, [r3, #16]
 8005794:	3202      	adds	r2, #2
 8005796:	f103 010c 	add.w	r1, r3, #12
 800579a:	0092      	lsls	r2, r2, #2
 800579c:	300c      	adds	r0, #12
 800579e:	f001 fcfb 	bl	8007198 <memcpy>
 80057a2:	aa1e      	add	r2, sp, #120	; 0x78
 80057a4:	a91d      	add	r1, sp, #116	; 0x74
 80057a6:	ec4b ab10 	vmov	d0, sl, fp
 80057aa:	4648      	mov	r0, r9
 80057ac:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80057b0:	f002 f83e 	bl	8007830 <__d2b>
 80057b4:	901c      	str	r0, [sp, #112]	; 0x70
 80057b6:	2800      	cmp	r0, #0
 80057b8:	f43f aee0 	beq.w	800557c <_strtod_l+0x43c>
 80057bc:	2101      	movs	r1, #1
 80057be:	4648      	mov	r0, r9
 80057c0:	f001 fe07 	bl	80073d2 <__i2b>
 80057c4:	4680      	mov	r8, r0
 80057c6:	2800      	cmp	r0, #0
 80057c8:	f43f aed8 	beq.w	800557c <_strtod_l+0x43c>
 80057cc:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80057ce:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80057d0:	2e00      	cmp	r6, #0
 80057d2:	bfab      	itete	ge
 80057d4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80057d6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80057d8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80057da:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80057dc:	bfac      	ite	ge
 80057de:	18f7      	addge	r7, r6, r3
 80057e0:	1b9d      	sublt	r5, r3, r6
 80057e2:	9b04      	ldr	r3, [sp, #16]
 80057e4:	1af6      	subs	r6, r6, r3
 80057e6:	4416      	add	r6, r2
 80057e8:	4b63      	ldr	r3, [pc, #396]	; (8005978 <_strtod_l+0x838>)
 80057ea:	3e01      	subs	r6, #1
 80057ec:	429e      	cmp	r6, r3
 80057ee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80057f2:	f280 80af 	bge.w	8005954 <_strtod_l+0x814>
 80057f6:	1b9b      	subs	r3, r3, r6
 80057f8:	2b1f      	cmp	r3, #31
 80057fa:	eba2 0203 	sub.w	r2, r2, r3
 80057fe:	f04f 0101 	mov.w	r1, #1
 8005802:	f300 809b 	bgt.w	800593c <_strtod_l+0x7fc>
 8005806:	fa01 f303 	lsl.w	r3, r1, r3
 800580a:	930f      	str	r3, [sp, #60]	; 0x3c
 800580c:	2300      	movs	r3, #0
 800580e:	930a      	str	r3, [sp, #40]	; 0x28
 8005810:	18be      	adds	r6, r7, r2
 8005812:	9b04      	ldr	r3, [sp, #16]
 8005814:	42b7      	cmp	r7, r6
 8005816:	4415      	add	r5, r2
 8005818:	441d      	add	r5, r3
 800581a:	463b      	mov	r3, r7
 800581c:	bfa8      	it	ge
 800581e:	4633      	movge	r3, r6
 8005820:	42ab      	cmp	r3, r5
 8005822:	bfa8      	it	ge
 8005824:	462b      	movge	r3, r5
 8005826:	2b00      	cmp	r3, #0
 8005828:	bfc2      	ittt	gt
 800582a:	1af6      	subgt	r6, r6, r3
 800582c:	1aed      	subgt	r5, r5, r3
 800582e:	1aff      	subgt	r7, r7, r3
 8005830:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005832:	b1bb      	cbz	r3, 8005864 <_strtod_l+0x724>
 8005834:	4641      	mov	r1, r8
 8005836:	461a      	mov	r2, r3
 8005838:	4648      	mov	r0, r9
 800583a:	f001 fe69 	bl	8007510 <__pow5mult>
 800583e:	4680      	mov	r8, r0
 8005840:	2800      	cmp	r0, #0
 8005842:	f43f ae9b 	beq.w	800557c <_strtod_l+0x43c>
 8005846:	4601      	mov	r1, r0
 8005848:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800584a:	4648      	mov	r0, r9
 800584c:	f001 fdca 	bl	80073e4 <__multiply>
 8005850:	900c      	str	r0, [sp, #48]	; 0x30
 8005852:	2800      	cmp	r0, #0
 8005854:	f43f ae92 	beq.w	800557c <_strtod_l+0x43c>
 8005858:	991c      	ldr	r1, [sp, #112]	; 0x70
 800585a:	4648      	mov	r0, r9
 800585c:	f001 fcdb 	bl	8007216 <_Bfree>
 8005860:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005862:	931c      	str	r3, [sp, #112]	; 0x70
 8005864:	2e00      	cmp	r6, #0
 8005866:	dc7a      	bgt.n	800595e <_strtod_l+0x81e>
 8005868:	9b06      	ldr	r3, [sp, #24]
 800586a:	2b00      	cmp	r3, #0
 800586c:	dd08      	ble.n	8005880 <_strtod_l+0x740>
 800586e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005870:	9905      	ldr	r1, [sp, #20]
 8005872:	4648      	mov	r0, r9
 8005874:	f001 fe4c 	bl	8007510 <__pow5mult>
 8005878:	9005      	str	r0, [sp, #20]
 800587a:	2800      	cmp	r0, #0
 800587c:	f43f ae7e 	beq.w	800557c <_strtod_l+0x43c>
 8005880:	2d00      	cmp	r5, #0
 8005882:	dd08      	ble.n	8005896 <_strtod_l+0x756>
 8005884:	462a      	mov	r2, r5
 8005886:	9905      	ldr	r1, [sp, #20]
 8005888:	4648      	mov	r0, r9
 800588a:	f001 fe8f 	bl	80075ac <__lshift>
 800588e:	9005      	str	r0, [sp, #20]
 8005890:	2800      	cmp	r0, #0
 8005892:	f43f ae73 	beq.w	800557c <_strtod_l+0x43c>
 8005896:	2f00      	cmp	r7, #0
 8005898:	dd08      	ble.n	80058ac <_strtod_l+0x76c>
 800589a:	4641      	mov	r1, r8
 800589c:	463a      	mov	r2, r7
 800589e:	4648      	mov	r0, r9
 80058a0:	f001 fe84 	bl	80075ac <__lshift>
 80058a4:	4680      	mov	r8, r0
 80058a6:	2800      	cmp	r0, #0
 80058a8:	f43f ae68 	beq.w	800557c <_strtod_l+0x43c>
 80058ac:	9a05      	ldr	r2, [sp, #20]
 80058ae:	991c      	ldr	r1, [sp, #112]	; 0x70
 80058b0:	4648      	mov	r0, r9
 80058b2:	f001 fee9 	bl	8007688 <__mdiff>
 80058b6:	4604      	mov	r4, r0
 80058b8:	2800      	cmp	r0, #0
 80058ba:	f43f ae5f 	beq.w	800557c <_strtod_l+0x43c>
 80058be:	68c3      	ldr	r3, [r0, #12]
 80058c0:	930c      	str	r3, [sp, #48]	; 0x30
 80058c2:	2300      	movs	r3, #0
 80058c4:	60c3      	str	r3, [r0, #12]
 80058c6:	4641      	mov	r1, r8
 80058c8:	f001 fec4 	bl	8007654 <__mcmp>
 80058cc:	2800      	cmp	r0, #0
 80058ce:	da55      	bge.n	800597c <_strtod_l+0x83c>
 80058d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80058d2:	b9e3      	cbnz	r3, 800590e <_strtod_l+0x7ce>
 80058d4:	f1ba 0f00 	cmp.w	sl, #0
 80058d8:	d119      	bne.n	800590e <_strtod_l+0x7ce>
 80058da:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80058de:	b9b3      	cbnz	r3, 800590e <_strtod_l+0x7ce>
 80058e0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80058e4:	0d1b      	lsrs	r3, r3, #20
 80058e6:	051b      	lsls	r3, r3, #20
 80058e8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80058ec:	d90f      	bls.n	800590e <_strtod_l+0x7ce>
 80058ee:	6963      	ldr	r3, [r4, #20]
 80058f0:	b913      	cbnz	r3, 80058f8 <_strtod_l+0x7b8>
 80058f2:	6923      	ldr	r3, [r4, #16]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	dd0a      	ble.n	800590e <_strtod_l+0x7ce>
 80058f8:	4621      	mov	r1, r4
 80058fa:	2201      	movs	r2, #1
 80058fc:	4648      	mov	r0, r9
 80058fe:	f001 fe55 	bl	80075ac <__lshift>
 8005902:	4641      	mov	r1, r8
 8005904:	4604      	mov	r4, r0
 8005906:	f001 fea5 	bl	8007654 <__mcmp>
 800590a:	2800      	cmp	r0, #0
 800590c:	dc67      	bgt.n	80059de <_strtod_l+0x89e>
 800590e:	9b04      	ldr	r3, [sp, #16]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d171      	bne.n	80059f8 <_strtod_l+0x8b8>
 8005914:	e63d      	b.n	8005592 <_strtod_l+0x452>
 8005916:	f018 0f01 	tst.w	r8, #1
 800591a:	d004      	beq.n	8005926 <_strtod_l+0x7e6>
 800591c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005920:	f7fa fe92 	bl	8000648 <__aeabi_dmul>
 8005924:	2301      	movs	r3, #1
 8005926:	ea4f 0868 	mov.w	r8, r8, asr #1
 800592a:	3508      	adds	r5, #8
 800592c:	e6e5      	b.n	80056fa <_strtod_l+0x5ba>
 800592e:	f04f 32ff 	mov.w	r2, #4294967295
 8005932:	fa02 f303 	lsl.w	r3, r2, r3
 8005936:	ea03 0a0a 	and.w	sl, r3, sl
 800593a:	e6ff      	b.n	800573c <_strtod_l+0x5fc>
 800593c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8005940:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8005944:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8005948:	36e2      	adds	r6, #226	; 0xe2
 800594a:	fa01 f306 	lsl.w	r3, r1, r6
 800594e:	930a      	str	r3, [sp, #40]	; 0x28
 8005950:	910f      	str	r1, [sp, #60]	; 0x3c
 8005952:	e75d      	b.n	8005810 <_strtod_l+0x6d0>
 8005954:	2300      	movs	r3, #0
 8005956:	930a      	str	r3, [sp, #40]	; 0x28
 8005958:	2301      	movs	r3, #1
 800595a:	930f      	str	r3, [sp, #60]	; 0x3c
 800595c:	e758      	b.n	8005810 <_strtod_l+0x6d0>
 800595e:	4632      	mov	r2, r6
 8005960:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005962:	4648      	mov	r0, r9
 8005964:	f001 fe22 	bl	80075ac <__lshift>
 8005968:	901c      	str	r0, [sp, #112]	; 0x70
 800596a:	2800      	cmp	r0, #0
 800596c:	f47f af7c 	bne.w	8005868 <_strtod_l+0x728>
 8005970:	e604      	b.n	800557c <_strtod_l+0x43c>
 8005972:	bf00      	nop
 8005974:	08007f58 	.word	0x08007f58
 8005978:	fffffc02 	.word	0xfffffc02
 800597c:	465d      	mov	r5, fp
 800597e:	f040 8086 	bne.w	8005a8e <_strtod_l+0x94e>
 8005982:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005984:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005988:	b32a      	cbz	r2, 80059d6 <_strtod_l+0x896>
 800598a:	4aaf      	ldr	r2, [pc, #700]	; (8005c48 <_strtod_l+0xb08>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d153      	bne.n	8005a38 <_strtod_l+0x8f8>
 8005990:	9b04      	ldr	r3, [sp, #16]
 8005992:	4650      	mov	r0, sl
 8005994:	b1d3      	cbz	r3, 80059cc <_strtod_l+0x88c>
 8005996:	4aad      	ldr	r2, [pc, #692]	; (8005c4c <_strtod_l+0xb0c>)
 8005998:	402a      	ands	r2, r5
 800599a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800599e:	f04f 31ff 	mov.w	r1, #4294967295
 80059a2:	d816      	bhi.n	80059d2 <_strtod_l+0x892>
 80059a4:	0d12      	lsrs	r2, r2, #20
 80059a6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80059aa:	fa01 f303 	lsl.w	r3, r1, r3
 80059ae:	4298      	cmp	r0, r3
 80059b0:	d142      	bne.n	8005a38 <_strtod_l+0x8f8>
 80059b2:	4ba7      	ldr	r3, [pc, #668]	; (8005c50 <_strtod_l+0xb10>)
 80059b4:	429d      	cmp	r5, r3
 80059b6:	d102      	bne.n	80059be <_strtod_l+0x87e>
 80059b8:	3001      	adds	r0, #1
 80059ba:	f43f addf 	beq.w	800557c <_strtod_l+0x43c>
 80059be:	4ba3      	ldr	r3, [pc, #652]	; (8005c4c <_strtod_l+0xb0c>)
 80059c0:	402b      	ands	r3, r5
 80059c2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80059c6:	f04f 0a00 	mov.w	sl, #0
 80059ca:	e7a0      	b.n	800590e <_strtod_l+0x7ce>
 80059cc:	f04f 33ff 	mov.w	r3, #4294967295
 80059d0:	e7ed      	b.n	80059ae <_strtod_l+0x86e>
 80059d2:	460b      	mov	r3, r1
 80059d4:	e7eb      	b.n	80059ae <_strtod_l+0x86e>
 80059d6:	bb7b      	cbnz	r3, 8005a38 <_strtod_l+0x8f8>
 80059d8:	f1ba 0f00 	cmp.w	sl, #0
 80059dc:	d12c      	bne.n	8005a38 <_strtod_l+0x8f8>
 80059de:	9904      	ldr	r1, [sp, #16]
 80059e0:	4a9a      	ldr	r2, [pc, #616]	; (8005c4c <_strtod_l+0xb0c>)
 80059e2:	465b      	mov	r3, fp
 80059e4:	b1f1      	cbz	r1, 8005a24 <_strtod_l+0x8e4>
 80059e6:	ea02 010b 	and.w	r1, r2, fp
 80059ea:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80059ee:	dc19      	bgt.n	8005a24 <_strtod_l+0x8e4>
 80059f0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80059f4:	f77f ae5b 	ble.w	80056ae <_strtod_l+0x56e>
 80059f8:	4a96      	ldr	r2, [pc, #600]	; (8005c54 <_strtod_l+0xb14>)
 80059fa:	2300      	movs	r3, #0
 80059fc:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8005a00:	4650      	mov	r0, sl
 8005a02:	4659      	mov	r1, fp
 8005a04:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005a08:	f7fa fe1e 	bl	8000648 <__aeabi_dmul>
 8005a0c:	4682      	mov	sl, r0
 8005a0e:	468b      	mov	fp, r1
 8005a10:	2900      	cmp	r1, #0
 8005a12:	f47f adbe 	bne.w	8005592 <_strtod_l+0x452>
 8005a16:	2800      	cmp	r0, #0
 8005a18:	f47f adbb 	bne.w	8005592 <_strtod_l+0x452>
 8005a1c:	2322      	movs	r3, #34	; 0x22
 8005a1e:	f8c9 3000 	str.w	r3, [r9]
 8005a22:	e5b6      	b.n	8005592 <_strtod_l+0x452>
 8005a24:	4013      	ands	r3, r2
 8005a26:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005a2a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005a2e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005a32:	f04f 3aff 	mov.w	sl, #4294967295
 8005a36:	e76a      	b.n	800590e <_strtod_l+0x7ce>
 8005a38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a3a:	b193      	cbz	r3, 8005a62 <_strtod_l+0x922>
 8005a3c:	422b      	tst	r3, r5
 8005a3e:	f43f af66 	beq.w	800590e <_strtod_l+0x7ce>
 8005a42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a44:	9a04      	ldr	r2, [sp, #16]
 8005a46:	4650      	mov	r0, sl
 8005a48:	4659      	mov	r1, fp
 8005a4a:	b173      	cbz	r3, 8005a6a <_strtod_l+0x92a>
 8005a4c:	f7ff fb5c 	bl	8005108 <sulp>
 8005a50:	4602      	mov	r2, r0
 8005a52:	460b      	mov	r3, r1
 8005a54:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005a58:	f7fa fc40 	bl	80002dc <__adddf3>
 8005a5c:	4682      	mov	sl, r0
 8005a5e:	468b      	mov	fp, r1
 8005a60:	e755      	b.n	800590e <_strtod_l+0x7ce>
 8005a62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005a64:	ea13 0f0a 	tst.w	r3, sl
 8005a68:	e7e9      	b.n	8005a3e <_strtod_l+0x8fe>
 8005a6a:	f7ff fb4d 	bl	8005108 <sulp>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	460b      	mov	r3, r1
 8005a72:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005a76:	f7fa fc2f 	bl	80002d8 <__aeabi_dsub>
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	4682      	mov	sl, r0
 8005a80:	468b      	mov	fp, r1
 8005a82:	f7fb f849 	bl	8000b18 <__aeabi_dcmpeq>
 8005a86:	2800      	cmp	r0, #0
 8005a88:	f47f ae11 	bne.w	80056ae <_strtod_l+0x56e>
 8005a8c:	e73f      	b.n	800590e <_strtod_l+0x7ce>
 8005a8e:	4641      	mov	r1, r8
 8005a90:	4620      	mov	r0, r4
 8005a92:	f001 ff1c 	bl	80078ce <__ratio>
 8005a96:	ec57 6b10 	vmov	r6, r7, d0
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005aa0:	ee10 0a10 	vmov	r0, s0
 8005aa4:	4639      	mov	r1, r7
 8005aa6:	f7fb f84b 	bl	8000b40 <__aeabi_dcmple>
 8005aaa:	2800      	cmp	r0, #0
 8005aac:	d077      	beq.n	8005b9e <_strtod_l+0xa5e>
 8005aae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d04a      	beq.n	8005b4a <_strtod_l+0xa0a>
 8005ab4:	4b68      	ldr	r3, [pc, #416]	; (8005c58 <_strtod_l+0xb18>)
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005abc:	4f66      	ldr	r7, [pc, #408]	; (8005c58 <_strtod_l+0xb18>)
 8005abe:	2600      	movs	r6, #0
 8005ac0:	4b62      	ldr	r3, [pc, #392]	; (8005c4c <_strtod_l+0xb0c>)
 8005ac2:	402b      	ands	r3, r5
 8005ac4:	930f      	str	r3, [sp, #60]	; 0x3c
 8005ac6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005ac8:	4b64      	ldr	r3, [pc, #400]	; (8005c5c <_strtod_l+0xb1c>)
 8005aca:	429a      	cmp	r2, r3
 8005acc:	f040 80ce 	bne.w	8005c6c <_strtod_l+0xb2c>
 8005ad0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005ad4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005ad8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8005adc:	ec4b ab10 	vmov	d0, sl, fp
 8005ae0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8005ae4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005ae8:	f001 fe2c 	bl	8007744 <__ulp>
 8005aec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005af0:	ec53 2b10 	vmov	r2, r3, d0
 8005af4:	f7fa fda8 	bl	8000648 <__aeabi_dmul>
 8005af8:	4652      	mov	r2, sl
 8005afa:	465b      	mov	r3, fp
 8005afc:	f7fa fbee 	bl	80002dc <__adddf3>
 8005b00:	460b      	mov	r3, r1
 8005b02:	4952      	ldr	r1, [pc, #328]	; (8005c4c <_strtod_l+0xb0c>)
 8005b04:	4a56      	ldr	r2, [pc, #344]	; (8005c60 <_strtod_l+0xb20>)
 8005b06:	4019      	ands	r1, r3
 8005b08:	4291      	cmp	r1, r2
 8005b0a:	4682      	mov	sl, r0
 8005b0c:	d95b      	bls.n	8005bc6 <_strtod_l+0xa86>
 8005b0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b10:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d103      	bne.n	8005b20 <_strtod_l+0x9e0>
 8005b18:	9b08      	ldr	r3, [sp, #32]
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	f43f ad2e 	beq.w	800557c <_strtod_l+0x43c>
 8005b20:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8005c50 <_strtod_l+0xb10>
 8005b24:	f04f 3aff 	mov.w	sl, #4294967295
 8005b28:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005b2a:	4648      	mov	r0, r9
 8005b2c:	f001 fb73 	bl	8007216 <_Bfree>
 8005b30:	9905      	ldr	r1, [sp, #20]
 8005b32:	4648      	mov	r0, r9
 8005b34:	f001 fb6f 	bl	8007216 <_Bfree>
 8005b38:	4641      	mov	r1, r8
 8005b3a:	4648      	mov	r0, r9
 8005b3c:	f001 fb6b 	bl	8007216 <_Bfree>
 8005b40:	4621      	mov	r1, r4
 8005b42:	4648      	mov	r0, r9
 8005b44:	f001 fb67 	bl	8007216 <_Bfree>
 8005b48:	e619      	b.n	800577e <_strtod_l+0x63e>
 8005b4a:	f1ba 0f00 	cmp.w	sl, #0
 8005b4e:	d11a      	bne.n	8005b86 <_strtod_l+0xa46>
 8005b50:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005b54:	b9eb      	cbnz	r3, 8005b92 <_strtod_l+0xa52>
 8005b56:	2200      	movs	r2, #0
 8005b58:	4b3f      	ldr	r3, [pc, #252]	; (8005c58 <_strtod_l+0xb18>)
 8005b5a:	4630      	mov	r0, r6
 8005b5c:	4639      	mov	r1, r7
 8005b5e:	f7fa ffe5 	bl	8000b2c <__aeabi_dcmplt>
 8005b62:	b9c8      	cbnz	r0, 8005b98 <_strtod_l+0xa58>
 8005b64:	4630      	mov	r0, r6
 8005b66:	4639      	mov	r1, r7
 8005b68:	2200      	movs	r2, #0
 8005b6a:	4b3e      	ldr	r3, [pc, #248]	; (8005c64 <_strtod_l+0xb24>)
 8005b6c:	f7fa fd6c 	bl	8000648 <__aeabi_dmul>
 8005b70:	4606      	mov	r6, r0
 8005b72:	460f      	mov	r7, r1
 8005b74:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8005b78:	9618      	str	r6, [sp, #96]	; 0x60
 8005b7a:	9319      	str	r3, [sp, #100]	; 0x64
 8005b7c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8005b80:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005b84:	e79c      	b.n	8005ac0 <_strtod_l+0x980>
 8005b86:	f1ba 0f01 	cmp.w	sl, #1
 8005b8a:	d102      	bne.n	8005b92 <_strtod_l+0xa52>
 8005b8c:	2d00      	cmp	r5, #0
 8005b8e:	f43f ad8e 	beq.w	80056ae <_strtod_l+0x56e>
 8005b92:	2200      	movs	r2, #0
 8005b94:	4b34      	ldr	r3, [pc, #208]	; (8005c68 <_strtod_l+0xb28>)
 8005b96:	e78f      	b.n	8005ab8 <_strtod_l+0x978>
 8005b98:	2600      	movs	r6, #0
 8005b9a:	4f32      	ldr	r7, [pc, #200]	; (8005c64 <_strtod_l+0xb24>)
 8005b9c:	e7ea      	b.n	8005b74 <_strtod_l+0xa34>
 8005b9e:	4b31      	ldr	r3, [pc, #196]	; (8005c64 <_strtod_l+0xb24>)
 8005ba0:	4630      	mov	r0, r6
 8005ba2:	4639      	mov	r1, r7
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f7fa fd4f 	bl	8000648 <__aeabi_dmul>
 8005baa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005bac:	4606      	mov	r6, r0
 8005bae:	460f      	mov	r7, r1
 8005bb0:	b933      	cbnz	r3, 8005bc0 <_strtod_l+0xa80>
 8005bb2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005bb6:	9010      	str	r0, [sp, #64]	; 0x40
 8005bb8:	9311      	str	r3, [sp, #68]	; 0x44
 8005bba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005bbe:	e7df      	b.n	8005b80 <_strtod_l+0xa40>
 8005bc0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8005bc4:	e7f9      	b.n	8005bba <_strtod_l+0xa7a>
 8005bc6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8005bca:	9b04      	ldr	r3, [sp, #16]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d1ab      	bne.n	8005b28 <_strtod_l+0x9e8>
 8005bd0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005bd4:	0d1b      	lsrs	r3, r3, #20
 8005bd6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005bd8:	051b      	lsls	r3, r3, #20
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	465d      	mov	r5, fp
 8005bde:	d1a3      	bne.n	8005b28 <_strtod_l+0x9e8>
 8005be0:	4639      	mov	r1, r7
 8005be2:	4630      	mov	r0, r6
 8005be4:	f7fa ffe0 	bl	8000ba8 <__aeabi_d2iz>
 8005be8:	f7fa fcc4 	bl	8000574 <__aeabi_i2d>
 8005bec:	460b      	mov	r3, r1
 8005bee:	4602      	mov	r2, r0
 8005bf0:	4639      	mov	r1, r7
 8005bf2:	4630      	mov	r0, r6
 8005bf4:	f7fa fb70 	bl	80002d8 <__aeabi_dsub>
 8005bf8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005bfa:	4606      	mov	r6, r0
 8005bfc:	460f      	mov	r7, r1
 8005bfe:	b933      	cbnz	r3, 8005c0e <_strtod_l+0xace>
 8005c00:	f1ba 0f00 	cmp.w	sl, #0
 8005c04:	d103      	bne.n	8005c0e <_strtod_l+0xace>
 8005c06:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8005c0a:	2d00      	cmp	r5, #0
 8005c0c:	d06d      	beq.n	8005cea <_strtod_l+0xbaa>
 8005c0e:	a30a      	add	r3, pc, #40	; (adr r3, 8005c38 <_strtod_l+0xaf8>)
 8005c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c14:	4630      	mov	r0, r6
 8005c16:	4639      	mov	r1, r7
 8005c18:	f7fa ff88 	bl	8000b2c <__aeabi_dcmplt>
 8005c1c:	2800      	cmp	r0, #0
 8005c1e:	f47f acb8 	bne.w	8005592 <_strtod_l+0x452>
 8005c22:	a307      	add	r3, pc, #28	; (adr r3, 8005c40 <_strtod_l+0xb00>)
 8005c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c28:	4630      	mov	r0, r6
 8005c2a:	4639      	mov	r1, r7
 8005c2c:	f7fa ff9c 	bl	8000b68 <__aeabi_dcmpgt>
 8005c30:	2800      	cmp	r0, #0
 8005c32:	f43f af79 	beq.w	8005b28 <_strtod_l+0x9e8>
 8005c36:	e4ac      	b.n	8005592 <_strtod_l+0x452>
 8005c38:	94a03595 	.word	0x94a03595
 8005c3c:	3fdfffff 	.word	0x3fdfffff
 8005c40:	35afe535 	.word	0x35afe535
 8005c44:	3fe00000 	.word	0x3fe00000
 8005c48:	000fffff 	.word	0x000fffff
 8005c4c:	7ff00000 	.word	0x7ff00000
 8005c50:	7fefffff 	.word	0x7fefffff
 8005c54:	39500000 	.word	0x39500000
 8005c58:	3ff00000 	.word	0x3ff00000
 8005c5c:	7fe00000 	.word	0x7fe00000
 8005c60:	7c9fffff 	.word	0x7c9fffff
 8005c64:	3fe00000 	.word	0x3fe00000
 8005c68:	bff00000 	.word	0xbff00000
 8005c6c:	9b04      	ldr	r3, [sp, #16]
 8005c6e:	b333      	cbz	r3, 8005cbe <_strtod_l+0xb7e>
 8005c70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005c72:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005c76:	d822      	bhi.n	8005cbe <_strtod_l+0xb7e>
 8005c78:	a327      	add	r3, pc, #156	; (adr r3, 8005d18 <_strtod_l+0xbd8>)
 8005c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c7e:	4630      	mov	r0, r6
 8005c80:	4639      	mov	r1, r7
 8005c82:	f7fa ff5d 	bl	8000b40 <__aeabi_dcmple>
 8005c86:	b1a0      	cbz	r0, 8005cb2 <_strtod_l+0xb72>
 8005c88:	4639      	mov	r1, r7
 8005c8a:	4630      	mov	r0, r6
 8005c8c:	f7fa ffb4 	bl	8000bf8 <__aeabi_d2uiz>
 8005c90:	2800      	cmp	r0, #0
 8005c92:	bf08      	it	eq
 8005c94:	2001      	moveq	r0, #1
 8005c96:	f7fa fc5d 	bl	8000554 <__aeabi_ui2d>
 8005c9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005c9c:	4606      	mov	r6, r0
 8005c9e:	460f      	mov	r7, r1
 8005ca0:	bb03      	cbnz	r3, 8005ce4 <_strtod_l+0xba4>
 8005ca2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005ca6:	9012      	str	r0, [sp, #72]	; 0x48
 8005ca8:	9313      	str	r3, [sp, #76]	; 0x4c
 8005caa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8005cae:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005cb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005cb4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005cb6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8005cba:	1a9b      	subs	r3, r3, r2
 8005cbc:	930b      	str	r3, [sp, #44]	; 0x2c
 8005cbe:	ed9d 0b08 	vldr	d0, [sp, #32]
 8005cc2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8005cc6:	f001 fd3d 	bl	8007744 <__ulp>
 8005cca:	4650      	mov	r0, sl
 8005ccc:	ec53 2b10 	vmov	r2, r3, d0
 8005cd0:	4659      	mov	r1, fp
 8005cd2:	f7fa fcb9 	bl	8000648 <__aeabi_dmul>
 8005cd6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005cda:	f7fa faff 	bl	80002dc <__adddf3>
 8005cde:	4682      	mov	sl, r0
 8005ce0:	468b      	mov	fp, r1
 8005ce2:	e772      	b.n	8005bca <_strtod_l+0xa8a>
 8005ce4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8005ce8:	e7df      	b.n	8005caa <_strtod_l+0xb6a>
 8005cea:	a30d      	add	r3, pc, #52	; (adr r3, 8005d20 <_strtod_l+0xbe0>)
 8005cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf0:	f7fa ff1c 	bl	8000b2c <__aeabi_dcmplt>
 8005cf4:	e79c      	b.n	8005c30 <_strtod_l+0xaf0>
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	930d      	str	r3, [sp, #52]	; 0x34
 8005cfa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005cfc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005cfe:	6013      	str	r3, [r2, #0]
 8005d00:	f7ff ba61 	b.w	80051c6 <_strtod_l+0x86>
 8005d04:	2b65      	cmp	r3, #101	; 0x65
 8005d06:	f04f 0200 	mov.w	r2, #0
 8005d0a:	f43f ab4e 	beq.w	80053aa <_strtod_l+0x26a>
 8005d0e:	2101      	movs	r1, #1
 8005d10:	4614      	mov	r4, r2
 8005d12:	9104      	str	r1, [sp, #16]
 8005d14:	f7ff bacb 	b.w	80052ae <_strtod_l+0x16e>
 8005d18:	ffc00000 	.word	0xffc00000
 8005d1c:	41dfffff 	.word	0x41dfffff
 8005d20:	94a03595 	.word	0x94a03595
 8005d24:	3fcfffff 	.word	0x3fcfffff

08005d28 <_strtod_r>:
 8005d28:	4b05      	ldr	r3, [pc, #20]	; (8005d40 <_strtod_r+0x18>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	b410      	push	{r4}
 8005d2e:	6a1b      	ldr	r3, [r3, #32]
 8005d30:	4c04      	ldr	r4, [pc, #16]	; (8005d44 <_strtod_r+0x1c>)
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	bf08      	it	eq
 8005d36:	4623      	moveq	r3, r4
 8005d38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d3c:	f7ff ba00 	b.w	8005140 <_strtod_l>
 8005d40:	200001d8 	.word	0x200001d8
 8005d44:	2000023c 	.word	0x2000023c

08005d48 <_strtol_l.isra.0>:
 8005d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d4c:	4680      	mov	r8, r0
 8005d4e:	4689      	mov	r9, r1
 8005d50:	4692      	mov	sl, r2
 8005d52:	461e      	mov	r6, r3
 8005d54:	460f      	mov	r7, r1
 8005d56:	463d      	mov	r5, r7
 8005d58:	9808      	ldr	r0, [sp, #32]
 8005d5a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005d5e:	f001 f9ed 	bl	800713c <__locale_ctype_ptr_l>
 8005d62:	4420      	add	r0, r4
 8005d64:	7843      	ldrb	r3, [r0, #1]
 8005d66:	f013 0308 	ands.w	r3, r3, #8
 8005d6a:	d132      	bne.n	8005dd2 <_strtol_l.isra.0+0x8a>
 8005d6c:	2c2d      	cmp	r4, #45	; 0x2d
 8005d6e:	d132      	bne.n	8005dd6 <_strtol_l.isra.0+0x8e>
 8005d70:	787c      	ldrb	r4, [r7, #1]
 8005d72:	1cbd      	adds	r5, r7, #2
 8005d74:	2201      	movs	r2, #1
 8005d76:	2e00      	cmp	r6, #0
 8005d78:	d05d      	beq.n	8005e36 <_strtol_l.isra.0+0xee>
 8005d7a:	2e10      	cmp	r6, #16
 8005d7c:	d109      	bne.n	8005d92 <_strtol_l.isra.0+0x4a>
 8005d7e:	2c30      	cmp	r4, #48	; 0x30
 8005d80:	d107      	bne.n	8005d92 <_strtol_l.isra.0+0x4a>
 8005d82:	782b      	ldrb	r3, [r5, #0]
 8005d84:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005d88:	2b58      	cmp	r3, #88	; 0x58
 8005d8a:	d14f      	bne.n	8005e2c <_strtol_l.isra.0+0xe4>
 8005d8c:	786c      	ldrb	r4, [r5, #1]
 8005d8e:	2610      	movs	r6, #16
 8005d90:	3502      	adds	r5, #2
 8005d92:	2a00      	cmp	r2, #0
 8005d94:	bf14      	ite	ne
 8005d96:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8005d9a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8005d9e:	2700      	movs	r7, #0
 8005da0:	fbb1 fcf6 	udiv	ip, r1, r6
 8005da4:	4638      	mov	r0, r7
 8005da6:	fb06 1e1c 	mls	lr, r6, ip, r1
 8005daa:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8005dae:	2b09      	cmp	r3, #9
 8005db0:	d817      	bhi.n	8005de2 <_strtol_l.isra.0+0x9a>
 8005db2:	461c      	mov	r4, r3
 8005db4:	42a6      	cmp	r6, r4
 8005db6:	dd23      	ble.n	8005e00 <_strtol_l.isra.0+0xb8>
 8005db8:	1c7b      	adds	r3, r7, #1
 8005dba:	d007      	beq.n	8005dcc <_strtol_l.isra.0+0x84>
 8005dbc:	4584      	cmp	ip, r0
 8005dbe:	d31c      	bcc.n	8005dfa <_strtol_l.isra.0+0xb2>
 8005dc0:	d101      	bne.n	8005dc6 <_strtol_l.isra.0+0x7e>
 8005dc2:	45a6      	cmp	lr, r4
 8005dc4:	db19      	blt.n	8005dfa <_strtol_l.isra.0+0xb2>
 8005dc6:	fb00 4006 	mla	r0, r0, r6, r4
 8005dca:	2701      	movs	r7, #1
 8005dcc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005dd0:	e7eb      	b.n	8005daa <_strtol_l.isra.0+0x62>
 8005dd2:	462f      	mov	r7, r5
 8005dd4:	e7bf      	b.n	8005d56 <_strtol_l.isra.0+0xe>
 8005dd6:	2c2b      	cmp	r4, #43	; 0x2b
 8005dd8:	bf04      	itt	eq
 8005dda:	1cbd      	addeq	r5, r7, #2
 8005ddc:	787c      	ldrbeq	r4, [r7, #1]
 8005dde:	461a      	mov	r2, r3
 8005de0:	e7c9      	b.n	8005d76 <_strtol_l.isra.0+0x2e>
 8005de2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8005de6:	2b19      	cmp	r3, #25
 8005de8:	d801      	bhi.n	8005dee <_strtol_l.isra.0+0xa6>
 8005dea:	3c37      	subs	r4, #55	; 0x37
 8005dec:	e7e2      	b.n	8005db4 <_strtol_l.isra.0+0x6c>
 8005dee:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005df2:	2b19      	cmp	r3, #25
 8005df4:	d804      	bhi.n	8005e00 <_strtol_l.isra.0+0xb8>
 8005df6:	3c57      	subs	r4, #87	; 0x57
 8005df8:	e7dc      	b.n	8005db4 <_strtol_l.isra.0+0x6c>
 8005dfa:	f04f 37ff 	mov.w	r7, #4294967295
 8005dfe:	e7e5      	b.n	8005dcc <_strtol_l.isra.0+0x84>
 8005e00:	1c7b      	adds	r3, r7, #1
 8005e02:	d108      	bne.n	8005e16 <_strtol_l.isra.0+0xce>
 8005e04:	2322      	movs	r3, #34	; 0x22
 8005e06:	f8c8 3000 	str.w	r3, [r8]
 8005e0a:	4608      	mov	r0, r1
 8005e0c:	f1ba 0f00 	cmp.w	sl, #0
 8005e10:	d107      	bne.n	8005e22 <_strtol_l.isra.0+0xda>
 8005e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e16:	b102      	cbz	r2, 8005e1a <_strtol_l.isra.0+0xd2>
 8005e18:	4240      	negs	r0, r0
 8005e1a:	f1ba 0f00 	cmp.w	sl, #0
 8005e1e:	d0f8      	beq.n	8005e12 <_strtol_l.isra.0+0xca>
 8005e20:	b10f      	cbz	r7, 8005e26 <_strtol_l.isra.0+0xde>
 8005e22:	f105 39ff 	add.w	r9, r5, #4294967295
 8005e26:	f8ca 9000 	str.w	r9, [sl]
 8005e2a:	e7f2      	b.n	8005e12 <_strtol_l.isra.0+0xca>
 8005e2c:	2430      	movs	r4, #48	; 0x30
 8005e2e:	2e00      	cmp	r6, #0
 8005e30:	d1af      	bne.n	8005d92 <_strtol_l.isra.0+0x4a>
 8005e32:	2608      	movs	r6, #8
 8005e34:	e7ad      	b.n	8005d92 <_strtol_l.isra.0+0x4a>
 8005e36:	2c30      	cmp	r4, #48	; 0x30
 8005e38:	d0a3      	beq.n	8005d82 <_strtol_l.isra.0+0x3a>
 8005e3a:	260a      	movs	r6, #10
 8005e3c:	e7a9      	b.n	8005d92 <_strtol_l.isra.0+0x4a>
	...

08005e40 <_strtol_r>:
 8005e40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e42:	4c06      	ldr	r4, [pc, #24]	; (8005e5c <_strtol_r+0x1c>)
 8005e44:	4d06      	ldr	r5, [pc, #24]	; (8005e60 <_strtol_r+0x20>)
 8005e46:	6824      	ldr	r4, [r4, #0]
 8005e48:	6a24      	ldr	r4, [r4, #32]
 8005e4a:	2c00      	cmp	r4, #0
 8005e4c:	bf08      	it	eq
 8005e4e:	462c      	moveq	r4, r5
 8005e50:	9400      	str	r4, [sp, #0]
 8005e52:	f7ff ff79 	bl	8005d48 <_strtol_l.isra.0>
 8005e56:	b003      	add	sp, #12
 8005e58:	bd30      	pop	{r4, r5, pc}
 8005e5a:	bf00      	nop
 8005e5c:	200001d8 	.word	0x200001d8
 8005e60:	2000023c 	.word	0x2000023c

08005e64 <quorem>:
 8005e64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e68:	6903      	ldr	r3, [r0, #16]
 8005e6a:	690c      	ldr	r4, [r1, #16]
 8005e6c:	42a3      	cmp	r3, r4
 8005e6e:	4680      	mov	r8, r0
 8005e70:	f2c0 8082 	blt.w	8005f78 <quorem+0x114>
 8005e74:	3c01      	subs	r4, #1
 8005e76:	f101 0714 	add.w	r7, r1, #20
 8005e7a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005e7e:	f100 0614 	add.w	r6, r0, #20
 8005e82:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005e86:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005e8a:	eb06 030c 	add.w	r3, r6, ip
 8005e8e:	3501      	adds	r5, #1
 8005e90:	eb07 090c 	add.w	r9, r7, ip
 8005e94:	9301      	str	r3, [sp, #4]
 8005e96:	fbb0 f5f5 	udiv	r5, r0, r5
 8005e9a:	b395      	cbz	r5, 8005f02 <quorem+0x9e>
 8005e9c:	f04f 0a00 	mov.w	sl, #0
 8005ea0:	4638      	mov	r0, r7
 8005ea2:	46b6      	mov	lr, r6
 8005ea4:	46d3      	mov	fp, sl
 8005ea6:	f850 2b04 	ldr.w	r2, [r0], #4
 8005eaa:	b293      	uxth	r3, r2
 8005eac:	fb05 a303 	mla	r3, r5, r3, sl
 8005eb0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	ebab 0303 	sub.w	r3, fp, r3
 8005eba:	0c12      	lsrs	r2, r2, #16
 8005ebc:	f8de b000 	ldr.w	fp, [lr]
 8005ec0:	fb05 a202 	mla	r2, r5, r2, sl
 8005ec4:	fa13 f38b 	uxtah	r3, r3, fp
 8005ec8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005ecc:	fa1f fb82 	uxth.w	fp, r2
 8005ed0:	f8de 2000 	ldr.w	r2, [lr]
 8005ed4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005ed8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ee2:	4581      	cmp	r9, r0
 8005ee4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005ee8:	f84e 3b04 	str.w	r3, [lr], #4
 8005eec:	d2db      	bcs.n	8005ea6 <quorem+0x42>
 8005eee:	f856 300c 	ldr.w	r3, [r6, ip]
 8005ef2:	b933      	cbnz	r3, 8005f02 <quorem+0x9e>
 8005ef4:	9b01      	ldr	r3, [sp, #4]
 8005ef6:	3b04      	subs	r3, #4
 8005ef8:	429e      	cmp	r6, r3
 8005efa:	461a      	mov	r2, r3
 8005efc:	d330      	bcc.n	8005f60 <quorem+0xfc>
 8005efe:	f8c8 4010 	str.w	r4, [r8, #16]
 8005f02:	4640      	mov	r0, r8
 8005f04:	f001 fba6 	bl	8007654 <__mcmp>
 8005f08:	2800      	cmp	r0, #0
 8005f0a:	db25      	blt.n	8005f58 <quorem+0xf4>
 8005f0c:	3501      	adds	r5, #1
 8005f0e:	4630      	mov	r0, r6
 8005f10:	f04f 0c00 	mov.w	ip, #0
 8005f14:	f857 2b04 	ldr.w	r2, [r7], #4
 8005f18:	f8d0 e000 	ldr.w	lr, [r0]
 8005f1c:	b293      	uxth	r3, r2
 8005f1e:	ebac 0303 	sub.w	r3, ip, r3
 8005f22:	0c12      	lsrs	r2, r2, #16
 8005f24:	fa13 f38e 	uxtah	r3, r3, lr
 8005f28:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005f2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f36:	45b9      	cmp	r9, r7
 8005f38:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005f3c:	f840 3b04 	str.w	r3, [r0], #4
 8005f40:	d2e8      	bcs.n	8005f14 <quorem+0xb0>
 8005f42:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005f46:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005f4a:	b92a      	cbnz	r2, 8005f58 <quorem+0xf4>
 8005f4c:	3b04      	subs	r3, #4
 8005f4e:	429e      	cmp	r6, r3
 8005f50:	461a      	mov	r2, r3
 8005f52:	d30b      	bcc.n	8005f6c <quorem+0x108>
 8005f54:	f8c8 4010 	str.w	r4, [r8, #16]
 8005f58:	4628      	mov	r0, r5
 8005f5a:	b003      	add	sp, #12
 8005f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f60:	6812      	ldr	r2, [r2, #0]
 8005f62:	3b04      	subs	r3, #4
 8005f64:	2a00      	cmp	r2, #0
 8005f66:	d1ca      	bne.n	8005efe <quorem+0x9a>
 8005f68:	3c01      	subs	r4, #1
 8005f6a:	e7c5      	b.n	8005ef8 <quorem+0x94>
 8005f6c:	6812      	ldr	r2, [r2, #0]
 8005f6e:	3b04      	subs	r3, #4
 8005f70:	2a00      	cmp	r2, #0
 8005f72:	d1ef      	bne.n	8005f54 <quorem+0xf0>
 8005f74:	3c01      	subs	r4, #1
 8005f76:	e7ea      	b.n	8005f4e <quorem+0xea>
 8005f78:	2000      	movs	r0, #0
 8005f7a:	e7ee      	b.n	8005f5a <quorem+0xf6>
 8005f7c:	0000      	movs	r0, r0
	...

08005f80 <_dtoa_r>:
 8005f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f84:	ec57 6b10 	vmov	r6, r7, d0
 8005f88:	b097      	sub	sp, #92	; 0x5c
 8005f8a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005f8c:	9106      	str	r1, [sp, #24]
 8005f8e:	4604      	mov	r4, r0
 8005f90:	920b      	str	r2, [sp, #44]	; 0x2c
 8005f92:	9312      	str	r3, [sp, #72]	; 0x48
 8005f94:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005f98:	e9cd 6700 	strd	r6, r7, [sp]
 8005f9c:	b93d      	cbnz	r5, 8005fae <_dtoa_r+0x2e>
 8005f9e:	2010      	movs	r0, #16
 8005fa0:	f001 f8e0 	bl	8007164 <malloc>
 8005fa4:	6260      	str	r0, [r4, #36]	; 0x24
 8005fa6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005faa:	6005      	str	r5, [r0, #0]
 8005fac:	60c5      	str	r5, [r0, #12]
 8005fae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005fb0:	6819      	ldr	r1, [r3, #0]
 8005fb2:	b151      	cbz	r1, 8005fca <_dtoa_r+0x4a>
 8005fb4:	685a      	ldr	r2, [r3, #4]
 8005fb6:	604a      	str	r2, [r1, #4]
 8005fb8:	2301      	movs	r3, #1
 8005fba:	4093      	lsls	r3, r2
 8005fbc:	608b      	str	r3, [r1, #8]
 8005fbe:	4620      	mov	r0, r4
 8005fc0:	f001 f929 	bl	8007216 <_Bfree>
 8005fc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	601a      	str	r2, [r3, #0]
 8005fca:	1e3b      	subs	r3, r7, #0
 8005fcc:	bfbb      	ittet	lt
 8005fce:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005fd2:	9301      	strlt	r3, [sp, #4]
 8005fd4:	2300      	movge	r3, #0
 8005fd6:	2201      	movlt	r2, #1
 8005fd8:	bfac      	ite	ge
 8005fda:	f8c8 3000 	strge.w	r3, [r8]
 8005fde:	f8c8 2000 	strlt.w	r2, [r8]
 8005fe2:	4baf      	ldr	r3, [pc, #700]	; (80062a0 <_dtoa_r+0x320>)
 8005fe4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005fe8:	ea33 0308 	bics.w	r3, r3, r8
 8005fec:	d114      	bne.n	8006018 <_dtoa_r+0x98>
 8005fee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005ff0:	f242 730f 	movw	r3, #9999	; 0x270f
 8005ff4:	6013      	str	r3, [r2, #0]
 8005ff6:	9b00      	ldr	r3, [sp, #0]
 8005ff8:	b923      	cbnz	r3, 8006004 <_dtoa_r+0x84>
 8005ffa:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005ffe:	2800      	cmp	r0, #0
 8006000:	f000 8542 	beq.w	8006a88 <_dtoa_r+0xb08>
 8006004:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006006:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80062b4 <_dtoa_r+0x334>
 800600a:	2b00      	cmp	r3, #0
 800600c:	f000 8544 	beq.w	8006a98 <_dtoa_r+0xb18>
 8006010:	f10b 0303 	add.w	r3, fp, #3
 8006014:	f000 bd3e 	b.w	8006a94 <_dtoa_r+0xb14>
 8006018:	e9dd 6700 	ldrd	r6, r7, [sp]
 800601c:	2200      	movs	r2, #0
 800601e:	2300      	movs	r3, #0
 8006020:	4630      	mov	r0, r6
 8006022:	4639      	mov	r1, r7
 8006024:	f7fa fd78 	bl	8000b18 <__aeabi_dcmpeq>
 8006028:	4681      	mov	r9, r0
 800602a:	b168      	cbz	r0, 8006048 <_dtoa_r+0xc8>
 800602c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800602e:	2301      	movs	r3, #1
 8006030:	6013      	str	r3, [r2, #0]
 8006032:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006034:	2b00      	cmp	r3, #0
 8006036:	f000 8524 	beq.w	8006a82 <_dtoa_r+0xb02>
 800603a:	4b9a      	ldr	r3, [pc, #616]	; (80062a4 <_dtoa_r+0x324>)
 800603c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800603e:	f103 3bff 	add.w	fp, r3, #4294967295
 8006042:	6013      	str	r3, [r2, #0]
 8006044:	f000 bd28 	b.w	8006a98 <_dtoa_r+0xb18>
 8006048:	aa14      	add	r2, sp, #80	; 0x50
 800604a:	a915      	add	r1, sp, #84	; 0x54
 800604c:	ec47 6b10 	vmov	d0, r6, r7
 8006050:	4620      	mov	r0, r4
 8006052:	f001 fbed 	bl	8007830 <__d2b>
 8006056:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800605a:	9004      	str	r0, [sp, #16]
 800605c:	2d00      	cmp	r5, #0
 800605e:	d07c      	beq.n	800615a <_dtoa_r+0x1da>
 8006060:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006064:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8006068:	46b2      	mov	sl, r6
 800606a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800606e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006072:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8006076:	2200      	movs	r2, #0
 8006078:	4b8b      	ldr	r3, [pc, #556]	; (80062a8 <_dtoa_r+0x328>)
 800607a:	4650      	mov	r0, sl
 800607c:	4659      	mov	r1, fp
 800607e:	f7fa f92b 	bl	80002d8 <__aeabi_dsub>
 8006082:	a381      	add	r3, pc, #516	; (adr r3, 8006288 <_dtoa_r+0x308>)
 8006084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006088:	f7fa fade 	bl	8000648 <__aeabi_dmul>
 800608c:	a380      	add	r3, pc, #512	; (adr r3, 8006290 <_dtoa_r+0x310>)
 800608e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006092:	f7fa f923 	bl	80002dc <__adddf3>
 8006096:	4606      	mov	r6, r0
 8006098:	4628      	mov	r0, r5
 800609a:	460f      	mov	r7, r1
 800609c:	f7fa fa6a 	bl	8000574 <__aeabi_i2d>
 80060a0:	a37d      	add	r3, pc, #500	; (adr r3, 8006298 <_dtoa_r+0x318>)
 80060a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a6:	f7fa facf 	bl	8000648 <__aeabi_dmul>
 80060aa:	4602      	mov	r2, r0
 80060ac:	460b      	mov	r3, r1
 80060ae:	4630      	mov	r0, r6
 80060b0:	4639      	mov	r1, r7
 80060b2:	f7fa f913 	bl	80002dc <__adddf3>
 80060b6:	4606      	mov	r6, r0
 80060b8:	460f      	mov	r7, r1
 80060ba:	f7fa fd75 	bl	8000ba8 <__aeabi_d2iz>
 80060be:	2200      	movs	r2, #0
 80060c0:	4682      	mov	sl, r0
 80060c2:	2300      	movs	r3, #0
 80060c4:	4630      	mov	r0, r6
 80060c6:	4639      	mov	r1, r7
 80060c8:	f7fa fd30 	bl	8000b2c <__aeabi_dcmplt>
 80060cc:	b148      	cbz	r0, 80060e2 <_dtoa_r+0x162>
 80060ce:	4650      	mov	r0, sl
 80060d0:	f7fa fa50 	bl	8000574 <__aeabi_i2d>
 80060d4:	4632      	mov	r2, r6
 80060d6:	463b      	mov	r3, r7
 80060d8:	f7fa fd1e 	bl	8000b18 <__aeabi_dcmpeq>
 80060dc:	b908      	cbnz	r0, 80060e2 <_dtoa_r+0x162>
 80060de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80060e2:	f1ba 0f16 	cmp.w	sl, #22
 80060e6:	d859      	bhi.n	800619c <_dtoa_r+0x21c>
 80060e8:	4970      	ldr	r1, [pc, #448]	; (80062ac <_dtoa_r+0x32c>)
 80060ea:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80060ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80060f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80060f6:	f7fa fd37 	bl	8000b68 <__aeabi_dcmpgt>
 80060fa:	2800      	cmp	r0, #0
 80060fc:	d050      	beq.n	80061a0 <_dtoa_r+0x220>
 80060fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006102:	2300      	movs	r3, #0
 8006104:	930f      	str	r3, [sp, #60]	; 0x3c
 8006106:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006108:	1b5d      	subs	r5, r3, r5
 800610a:	f1b5 0801 	subs.w	r8, r5, #1
 800610e:	bf49      	itett	mi
 8006110:	f1c5 0301 	rsbmi	r3, r5, #1
 8006114:	2300      	movpl	r3, #0
 8006116:	9305      	strmi	r3, [sp, #20]
 8006118:	f04f 0800 	movmi.w	r8, #0
 800611c:	bf58      	it	pl
 800611e:	9305      	strpl	r3, [sp, #20]
 8006120:	f1ba 0f00 	cmp.w	sl, #0
 8006124:	db3e      	blt.n	80061a4 <_dtoa_r+0x224>
 8006126:	2300      	movs	r3, #0
 8006128:	44d0      	add	r8, sl
 800612a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800612e:	9307      	str	r3, [sp, #28]
 8006130:	9b06      	ldr	r3, [sp, #24]
 8006132:	2b09      	cmp	r3, #9
 8006134:	f200 8090 	bhi.w	8006258 <_dtoa_r+0x2d8>
 8006138:	2b05      	cmp	r3, #5
 800613a:	bfc4      	itt	gt
 800613c:	3b04      	subgt	r3, #4
 800613e:	9306      	strgt	r3, [sp, #24]
 8006140:	9b06      	ldr	r3, [sp, #24]
 8006142:	f1a3 0302 	sub.w	r3, r3, #2
 8006146:	bfcc      	ite	gt
 8006148:	2500      	movgt	r5, #0
 800614a:	2501      	movle	r5, #1
 800614c:	2b03      	cmp	r3, #3
 800614e:	f200 808f 	bhi.w	8006270 <_dtoa_r+0x2f0>
 8006152:	e8df f003 	tbb	[pc, r3]
 8006156:	7f7d      	.short	0x7f7d
 8006158:	7131      	.short	0x7131
 800615a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800615e:	441d      	add	r5, r3
 8006160:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8006164:	2820      	cmp	r0, #32
 8006166:	dd13      	ble.n	8006190 <_dtoa_r+0x210>
 8006168:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800616c:	9b00      	ldr	r3, [sp, #0]
 800616e:	fa08 f800 	lsl.w	r8, r8, r0
 8006172:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8006176:	fa23 f000 	lsr.w	r0, r3, r0
 800617a:	ea48 0000 	orr.w	r0, r8, r0
 800617e:	f7fa f9e9 	bl	8000554 <__aeabi_ui2d>
 8006182:	2301      	movs	r3, #1
 8006184:	4682      	mov	sl, r0
 8006186:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800618a:	3d01      	subs	r5, #1
 800618c:	9313      	str	r3, [sp, #76]	; 0x4c
 800618e:	e772      	b.n	8006076 <_dtoa_r+0xf6>
 8006190:	9b00      	ldr	r3, [sp, #0]
 8006192:	f1c0 0020 	rsb	r0, r0, #32
 8006196:	fa03 f000 	lsl.w	r0, r3, r0
 800619a:	e7f0      	b.n	800617e <_dtoa_r+0x1fe>
 800619c:	2301      	movs	r3, #1
 800619e:	e7b1      	b.n	8006104 <_dtoa_r+0x184>
 80061a0:	900f      	str	r0, [sp, #60]	; 0x3c
 80061a2:	e7b0      	b.n	8006106 <_dtoa_r+0x186>
 80061a4:	9b05      	ldr	r3, [sp, #20]
 80061a6:	eba3 030a 	sub.w	r3, r3, sl
 80061aa:	9305      	str	r3, [sp, #20]
 80061ac:	f1ca 0300 	rsb	r3, sl, #0
 80061b0:	9307      	str	r3, [sp, #28]
 80061b2:	2300      	movs	r3, #0
 80061b4:	930e      	str	r3, [sp, #56]	; 0x38
 80061b6:	e7bb      	b.n	8006130 <_dtoa_r+0x1b0>
 80061b8:	2301      	movs	r3, #1
 80061ba:	930a      	str	r3, [sp, #40]	; 0x28
 80061bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061be:	2b00      	cmp	r3, #0
 80061c0:	dd59      	ble.n	8006276 <_dtoa_r+0x2f6>
 80061c2:	9302      	str	r3, [sp, #8]
 80061c4:	4699      	mov	r9, r3
 80061c6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80061c8:	2200      	movs	r2, #0
 80061ca:	6072      	str	r2, [r6, #4]
 80061cc:	2204      	movs	r2, #4
 80061ce:	f102 0014 	add.w	r0, r2, #20
 80061d2:	4298      	cmp	r0, r3
 80061d4:	6871      	ldr	r1, [r6, #4]
 80061d6:	d953      	bls.n	8006280 <_dtoa_r+0x300>
 80061d8:	4620      	mov	r0, r4
 80061da:	f000 ffe8 	bl	80071ae <_Balloc>
 80061de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061e0:	6030      	str	r0, [r6, #0]
 80061e2:	f1b9 0f0e 	cmp.w	r9, #14
 80061e6:	f8d3 b000 	ldr.w	fp, [r3]
 80061ea:	f200 80e6 	bhi.w	80063ba <_dtoa_r+0x43a>
 80061ee:	2d00      	cmp	r5, #0
 80061f0:	f000 80e3 	beq.w	80063ba <_dtoa_r+0x43a>
 80061f4:	ed9d 7b00 	vldr	d7, [sp]
 80061f8:	f1ba 0f00 	cmp.w	sl, #0
 80061fc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8006200:	dd74      	ble.n	80062ec <_dtoa_r+0x36c>
 8006202:	4a2a      	ldr	r2, [pc, #168]	; (80062ac <_dtoa_r+0x32c>)
 8006204:	f00a 030f 	and.w	r3, sl, #15
 8006208:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800620c:	ed93 7b00 	vldr	d7, [r3]
 8006210:	ea4f 162a 	mov.w	r6, sl, asr #4
 8006214:	06f0      	lsls	r0, r6, #27
 8006216:	ed8d 7b08 	vstr	d7, [sp, #32]
 800621a:	d565      	bpl.n	80062e8 <_dtoa_r+0x368>
 800621c:	4b24      	ldr	r3, [pc, #144]	; (80062b0 <_dtoa_r+0x330>)
 800621e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006222:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006226:	f7fa fb39 	bl	800089c <__aeabi_ddiv>
 800622a:	e9cd 0100 	strd	r0, r1, [sp]
 800622e:	f006 060f 	and.w	r6, r6, #15
 8006232:	2503      	movs	r5, #3
 8006234:	4f1e      	ldr	r7, [pc, #120]	; (80062b0 <_dtoa_r+0x330>)
 8006236:	e04c      	b.n	80062d2 <_dtoa_r+0x352>
 8006238:	2301      	movs	r3, #1
 800623a:	930a      	str	r3, [sp, #40]	; 0x28
 800623c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800623e:	4453      	add	r3, sl
 8006240:	f103 0901 	add.w	r9, r3, #1
 8006244:	9302      	str	r3, [sp, #8]
 8006246:	464b      	mov	r3, r9
 8006248:	2b01      	cmp	r3, #1
 800624a:	bfb8      	it	lt
 800624c:	2301      	movlt	r3, #1
 800624e:	e7ba      	b.n	80061c6 <_dtoa_r+0x246>
 8006250:	2300      	movs	r3, #0
 8006252:	e7b2      	b.n	80061ba <_dtoa_r+0x23a>
 8006254:	2300      	movs	r3, #0
 8006256:	e7f0      	b.n	800623a <_dtoa_r+0x2ba>
 8006258:	2501      	movs	r5, #1
 800625a:	2300      	movs	r3, #0
 800625c:	9306      	str	r3, [sp, #24]
 800625e:	950a      	str	r5, [sp, #40]	; 0x28
 8006260:	f04f 33ff 	mov.w	r3, #4294967295
 8006264:	9302      	str	r3, [sp, #8]
 8006266:	4699      	mov	r9, r3
 8006268:	2200      	movs	r2, #0
 800626a:	2312      	movs	r3, #18
 800626c:	920b      	str	r2, [sp, #44]	; 0x2c
 800626e:	e7aa      	b.n	80061c6 <_dtoa_r+0x246>
 8006270:	2301      	movs	r3, #1
 8006272:	930a      	str	r3, [sp, #40]	; 0x28
 8006274:	e7f4      	b.n	8006260 <_dtoa_r+0x2e0>
 8006276:	2301      	movs	r3, #1
 8006278:	9302      	str	r3, [sp, #8]
 800627a:	4699      	mov	r9, r3
 800627c:	461a      	mov	r2, r3
 800627e:	e7f5      	b.n	800626c <_dtoa_r+0x2ec>
 8006280:	3101      	adds	r1, #1
 8006282:	6071      	str	r1, [r6, #4]
 8006284:	0052      	lsls	r2, r2, #1
 8006286:	e7a2      	b.n	80061ce <_dtoa_r+0x24e>
 8006288:	636f4361 	.word	0x636f4361
 800628c:	3fd287a7 	.word	0x3fd287a7
 8006290:	8b60c8b3 	.word	0x8b60c8b3
 8006294:	3fc68a28 	.word	0x3fc68a28
 8006298:	509f79fb 	.word	0x509f79fb
 800629c:	3fd34413 	.word	0x3fd34413
 80062a0:	7ff00000 	.word	0x7ff00000
 80062a4:	08007f05 	.word	0x08007f05
 80062a8:	3ff80000 	.word	0x3ff80000
 80062ac:	08007fc0 	.word	0x08007fc0
 80062b0:	08007f98 	.word	0x08007f98
 80062b4:	08007f89 	.word	0x08007f89
 80062b8:	07f1      	lsls	r1, r6, #31
 80062ba:	d508      	bpl.n	80062ce <_dtoa_r+0x34e>
 80062bc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80062c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062c4:	f7fa f9c0 	bl	8000648 <__aeabi_dmul>
 80062c8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80062cc:	3501      	adds	r5, #1
 80062ce:	1076      	asrs	r6, r6, #1
 80062d0:	3708      	adds	r7, #8
 80062d2:	2e00      	cmp	r6, #0
 80062d4:	d1f0      	bne.n	80062b8 <_dtoa_r+0x338>
 80062d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80062da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80062de:	f7fa fadd 	bl	800089c <__aeabi_ddiv>
 80062e2:	e9cd 0100 	strd	r0, r1, [sp]
 80062e6:	e01a      	b.n	800631e <_dtoa_r+0x39e>
 80062e8:	2502      	movs	r5, #2
 80062ea:	e7a3      	b.n	8006234 <_dtoa_r+0x2b4>
 80062ec:	f000 80a0 	beq.w	8006430 <_dtoa_r+0x4b0>
 80062f0:	f1ca 0600 	rsb	r6, sl, #0
 80062f4:	4b9f      	ldr	r3, [pc, #636]	; (8006574 <_dtoa_r+0x5f4>)
 80062f6:	4fa0      	ldr	r7, [pc, #640]	; (8006578 <_dtoa_r+0x5f8>)
 80062f8:	f006 020f 	and.w	r2, r6, #15
 80062fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006304:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006308:	f7fa f99e 	bl	8000648 <__aeabi_dmul>
 800630c:	e9cd 0100 	strd	r0, r1, [sp]
 8006310:	1136      	asrs	r6, r6, #4
 8006312:	2300      	movs	r3, #0
 8006314:	2502      	movs	r5, #2
 8006316:	2e00      	cmp	r6, #0
 8006318:	d17f      	bne.n	800641a <_dtoa_r+0x49a>
 800631a:	2b00      	cmp	r3, #0
 800631c:	d1e1      	bne.n	80062e2 <_dtoa_r+0x362>
 800631e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006320:	2b00      	cmp	r3, #0
 8006322:	f000 8087 	beq.w	8006434 <_dtoa_r+0x4b4>
 8006326:	e9dd 6700 	ldrd	r6, r7, [sp]
 800632a:	2200      	movs	r2, #0
 800632c:	4b93      	ldr	r3, [pc, #588]	; (800657c <_dtoa_r+0x5fc>)
 800632e:	4630      	mov	r0, r6
 8006330:	4639      	mov	r1, r7
 8006332:	f7fa fbfb 	bl	8000b2c <__aeabi_dcmplt>
 8006336:	2800      	cmp	r0, #0
 8006338:	d07c      	beq.n	8006434 <_dtoa_r+0x4b4>
 800633a:	f1b9 0f00 	cmp.w	r9, #0
 800633e:	d079      	beq.n	8006434 <_dtoa_r+0x4b4>
 8006340:	9b02      	ldr	r3, [sp, #8]
 8006342:	2b00      	cmp	r3, #0
 8006344:	dd35      	ble.n	80063b2 <_dtoa_r+0x432>
 8006346:	f10a 33ff 	add.w	r3, sl, #4294967295
 800634a:	9308      	str	r3, [sp, #32]
 800634c:	4639      	mov	r1, r7
 800634e:	2200      	movs	r2, #0
 8006350:	4b8b      	ldr	r3, [pc, #556]	; (8006580 <_dtoa_r+0x600>)
 8006352:	4630      	mov	r0, r6
 8006354:	f7fa f978 	bl	8000648 <__aeabi_dmul>
 8006358:	e9cd 0100 	strd	r0, r1, [sp]
 800635c:	9f02      	ldr	r7, [sp, #8]
 800635e:	3501      	adds	r5, #1
 8006360:	4628      	mov	r0, r5
 8006362:	f7fa f907 	bl	8000574 <__aeabi_i2d>
 8006366:	e9dd 2300 	ldrd	r2, r3, [sp]
 800636a:	f7fa f96d 	bl	8000648 <__aeabi_dmul>
 800636e:	2200      	movs	r2, #0
 8006370:	4b84      	ldr	r3, [pc, #528]	; (8006584 <_dtoa_r+0x604>)
 8006372:	f7f9 ffb3 	bl	80002dc <__adddf3>
 8006376:	4605      	mov	r5, r0
 8006378:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800637c:	2f00      	cmp	r7, #0
 800637e:	d15d      	bne.n	800643c <_dtoa_r+0x4bc>
 8006380:	2200      	movs	r2, #0
 8006382:	4b81      	ldr	r3, [pc, #516]	; (8006588 <_dtoa_r+0x608>)
 8006384:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006388:	f7f9 ffa6 	bl	80002d8 <__aeabi_dsub>
 800638c:	462a      	mov	r2, r5
 800638e:	4633      	mov	r3, r6
 8006390:	e9cd 0100 	strd	r0, r1, [sp]
 8006394:	f7fa fbe8 	bl	8000b68 <__aeabi_dcmpgt>
 8006398:	2800      	cmp	r0, #0
 800639a:	f040 8288 	bne.w	80068ae <_dtoa_r+0x92e>
 800639e:	462a      	mov	r2, r5
 80063a0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80063a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80063a8:	f7fa fbc0 	bl	8000b2c <__aeabi_dcmplt>
 80063ac:	2800      	cmp	r0, #0
 80063ae:	f040 827c 	bne.w	80068aa <_dtoa_r+0x92a>
 80063b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80063b6:	e9cd 2300 	strd	r2, r3, [sp]
 80063ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80063bc:	2b00      	cmp	r3, #0
 80063be:	f2c0 8150 	blt.w	8006662 <_dtoa_r+0x6e2>
 80063c2:	f1ba 0f0e 	cmp.w	sl, #14
 80063c6:	f300 814c 	bgt.w	8006662 <_dtoa_r+0x6e2>
 80063ca:	4b6a      	ldr	r3, [pc, #424]	; (8006574 <_dtoa_r+0x5f4>)
 80063cc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80063d0:	ed93 7b00 	vldr	d7, [r3]
 80063d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80063dc:	f280 80d8 	bge.w	8006590 <_dtoa_r+0x610>
 80063e0:	f1b9 0f00 	cmp.w	r9, #0
 80063e4:	f300 80d4 	bgt.w	8006590 <_dtoa_r+0x610>
 80063e8:	f040 825e 	bne.w	80068a8 <_dtoa_r+0x928>
 80063ec:	2200      	movs	r2, #0
 80063ee:	4b66      	ldr	r3, [pc, #408]	; (8006588 <_dtoa_r+0x608>)
 80063f0:	ec51 0b17 	vmov	r0, r1, d7
 80063f4:	f7fa f928 	bl	8000648 <__aeabi_dmul>
 80063f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80063fc:	f7fa fbaa 	bl	8000b54 <__aeabi_dcmpge>
 8006400:	464f      	mov	r7, r9
 8006402:	464e      	mov	r6, r9
 8006404:	2800      	cmp	r0, #0
 8006406:	f040 8234 	bne.w	8006872 <_dtoa_r+0x8f2>
 800640a:	2331      	movs	r3, #49	; 0x31
 800640c:	f10b 0501 	add.w	r5, fp, #1
 8006410:	f88b 3000 	strb.w	r3, [fp]
 8006414:	f10a 0a01 	add.w	sl, sl, #1
 8006418:	e22f      	b.n	800687a <_dtoa_r+0x8fa>
 800641a:	07f2      	lsls	r2, r6, #31
 800641c:	d505      	bpl.n	800642a <_dtoa_r+0x4aa>
 800641e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006422:	f7fa f911 	bl	8000648 <__aeabi_dmul>
 8006426:	3501      	adds	r5, #1
 8006428:	2301      	movs	r3, #1
 800642a:	1076      	asrs	r6, r6, #1
 800642c:	3708      	adds	r7, #8
 800642e:	e772      	b.n	8006316 <_dtoa_r+0x396>
 8006430:	2502      	movs	r5, #2
 8006432:	e774      	b.n	800631e <_dtoa_r+0x39e>
 8006434:	f8cd a020 	str.w	sl, [sp, #32]
 8006438:	464f      	mov	r7, r9
 800643a:	e791      	b.n	8006360 <_dtoa_r+0x3e0>
 800643c:	4b4d      	ldr	r3, [pc, #308]	; (8006574 <_dtoa_r+0x5f4>)
 800643e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006442:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006446:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006448:	2b00      	cmp	r3, #0
 800644a:	d047      	beq.n	80064dc <_dtoa_r+0x55c>
 800644c:	4602      	mov	r2, r0
 800644e:	460b      	mov	r3, r1
 8006450:	2000      	movs	r0, #0
 8006452:	494e      	ldr	r1, [pc, #312]	; (800658c <_dtoa_r+0x60c>)
 8006454:	f7fa fa22 	bl	800089c <__aeabi_ddiv>
 8006458:	462a      	mov	r2, r5
 800645a:	4633      	mov	r3, r6
 800645c:	f7f9 ff3c 	bl	80002d8 <__aeabi_dsub>
 8006460:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006464:	465d      	mov	r5, fp
 8006466:	e9dd 0100 	ldrd	r0, r1, [sp]
 800646a:	f7fa fb9d 	bl	8000ba8 <__aeabi_d2iz>
 800646e:	4606      	mov	r6, r0
 8006470:	f7fa f880 	bl	8000574 <__aeabi_i2d>
 8006474:	4602      	mov	r2, r0
 8006476:	460b      	mov	r3, r1
 8006478:	e9dd 0100 	ldrd	r0, r1, [sp]
 800647c:	f7f9 ff2c 	bl	80002d8 <__aeabi_dsub>
 8006480:	3630      	adds	r6, #48	; 0x30
 8006482:	f805 6b01 	strb.w	r6, [r5], #1
 8006486:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800648a:	e9cd 0100 	strd	r0, r1, [sp]
 800648e:	f7fa fb4d 	bl	8000b2c <__aeabi_dcmplt>
 8006492:	2800      	cmp	r0, #0
 8006494:	d163      	bne.n	800655e <_dtoa_r+0x5de>
 8006496:	e9dd 2300 	ldrd	r2, r3, [sp]
 800649a:	2000      	movs	r0, #0
 800649c:	4937      	ldr	r1, [pc, #220]	; (800657c <_dtoa_r+0x5fc>)
 800649e:	f7f9 ff1b 	bl	80002d8 <__aeabi_dsub>
 80064a2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80064a6:	f7fa fb41 	bl	8000b2c <__aeabi_dcmplt>
 80064aa:	2800      	cmp	r0, #0
 80064ac:	f040 80b7 	bne.w	800661e <_dtoa_r+0x69e>
 80064b0:	eba5 030b 	sub.w	r3, r5, fp
 80064b4:	429f      	cmp	r7, r3
 80064b6:	f77f af7c 	ble.w	80063b2 <_dtoa_r+0x432>
 80064ba:	2200      	movs	r2, #0
 80064bc:	4b30      	ldr	r3, [pc, #192]	; (8006580 <_dtoa_r+0x600>)
 80064be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80064c2:	f7fa f8c1 	bl	8000648 <__aeabi_dmul>
 80064c6:	2200      	movs	r2, #0
 80064c8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80064cc:	4b2c      	ldr	r3, [pc, #176]	; (8006580 <_dtoa_r+0x600>)
 80064ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80064d2:	f7fa f8b9 	bl	8000648 <__aeabi_dmul>
 80064d6:	e9cd 0100 	strd	r0, r1, [sp]
 80064da:	e7c4      	b.n	8006466 <_dtoa_r+0x4e6>
 80064dc:	462a      	mov	r2, r5
 80064de:	4633      	mov	r3, r6
 80064e0:	f7fa f8b2 	bl	8000648 <__aeabi_dmul>
 80064e4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80064e8:	eb0b 0507 	add.w	r5, fp, r7
 80064ec:	465e      	mov	r6, fp
 80064ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80064f2:	f7fa fb59 	bl	8000ba8 <__aeabi_d2iz>
 80064f6:	4607      	mov	r7, r0
 80064f8:	f7fa f83c 	bl	8000574 <__aeabi_i2d>
 80064fc:	3730      	adds	r7, #48	; 0x30
 80064fe:	4602      	mov	r2, r0
 8006500:	460b      	mov	r3, r1
 8006502:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006506:	f7f9 fee7 	bl	80002d8 <__aeabi_dsub>
 800650a:	f806 7b01 	strb.w	r7, [r6], #1
 800650e:	42ae      	cmp	r6, r5
 8006510:	e9cd 0100 	strd	r0, r1, [sp]
 8006514:	f04f 0200 	mov.w	r2, #0
 8006518:	d126      	bne.n	8006568 <_dtoa_r+0x5e8>
 800651a:	4b1c      	ldr	r3, [pc, #112]	; (800658c <_dtoa_r+0x60c>)
 800651c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006520:	f7f9 fedc 	bl	80002dc <__adddf3>
 8006524:	4602      	mov	r2, r0
 8006526:	460b      	mov	r3, r1
 8006528:	e9dd 0100 	ldrd	r0, r1, [sp]
 800652c:	f7fa fb1c 	bl	8000b68 <__aeabi_dcmpgt>
 8006530:	2800      	cmp	r0, #0
 8006532:	d174      	bne.n	800661e <_dtoa_r+0x69e>
 8006534:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006538:	2000      	movs	r0, #0
 800653a:	4914      	ldr	r1, [pc, #80]	; (800658c <_dtoa_r+0x60c>)
 800653c:	f7f9 fecc 	bl	80002d8 <__aeabi_dsub>
 8006540:	4602      	mov	r2, r0
 8006542:	460b      	mov	r3, r1
 8006544:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006548:	f7fa faf0 	bl	8000b2c <__aeabi_dcmplt>
 800654c:	2800      	cmp	r0, #0
 800654e:	f43f af30 	beq.w	80063b2 <_dtoa_r+0x432>
 8006552:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006556:	2b30      	cmp	r3, #48	; 0x30
 8006558:	f105 32ff 	add.w	r2, r5, #4294967295
 800655c:	d002      	beq.n	8006564 <_dtoa_r+0x5e4>
 800655e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006562:	e04a      	b.n	80065fa <_dtoa_r+0x67a>
 8006564:	4615      	mov	r5, r2
 8006566:	e7f4      	b.n	8006552 <_dtoa_r+0x5d2>
 8006568:	4b05      	ldr	r3, [pc, #20]	; (8006580 <_dtoa_r+0x600>)
 800656a:	f7fa f86d 	bl	8000648 <__aeabi_dmul>
 800656e:	e9cd 0100 	strd	r0, r1, [sp]
 8006572:	e7bc      	b.n	80064ee <_dtoa_r+0x56e>
 8006574:	08007fc0 	.word	0x08007fc0
 8006578:	08007f98 	.word	0x08007f98
 800657c:	3ff00000 	.word	0x3ff00000
 8006580:	40240000 	.word	0x40240000
 8006584:	401c0000 	.word	0x401c0000
 8006588:	40140000 	.word	0x40140000
 800658c:	3fe00000 	.word	0x3fe00000
 8006590:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006594:	465d      	mov	r5, fp
 8006596:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800659a:	4630      	mov	r0, r6
 800659c:	4639      	mov	r1, r7
 800659e:	f7fa f97d 	bl	800089c <__aeabi_ddiv>
 80065a2:	f7fa fb01 	bl	8000ba8 <__aeabi_d2iz>
 80065a6:	4680      	mov	r8, r0
 80065a8:	f7f9 ffe4 	bl	8000574 <__aeabi_i2d>
 80065ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80065b0:	f7fa f84a 	bl	8000648 <__aeabi_dmul>
 80065b4:	4602      	mov	r2, r0
 80065b6:	460b      	mov	r3, r1
 80065b8:	4630      	mov	r0, r6
 80065ba:	4639      	mov	r1, r7
 80065bc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80065c0:	f7f9 fe8a 	bl	80002d8 <__aeabi_dsub>
 80065c4:	f805 6b01 	strb.w	r6, [r5], #1
 80065c8:	eba5 060b 	sub.w	r6, r5, fp
 80065cc:	45b1      	cmp	r9, r6
 80065ce:	4602      	mov	r2, r0
 80065d0:	460b      	mov	r3, r1
 80065d2:	d139      	bne.n	8006648 <_dtoa_r+0x6c8>
 80065d4:	f7f9 fe82 	bl	80002dc <__adddf3>
 80065d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80065dc:	4606      	mov	r6, r0
 80065de:	460f      	mov	r7, r1
 80065e0:	f7fa fac2 	bl	8000b68 <__aeabi_dcmpgt>
 80065e4:	b9c8      	cbnz	r0, 800661a <_dtoa_r+0x69a>
 80065e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80065ea:	4630      	mov	r0, r6
 80065ec:	4639      	mov	r1, r7
 80065ee:	f7fa fa93 	bl	8000b18 <__aeabi_dcmpeq>
 80065f2:	b110      	cbz	r0, 80065fa <_dtoa_r+0x67a>
 80065f4:	f018 0f01 	tst.w	r8, #1
 80065f8:	d10f      	bne.n	800661a <_dtoa_r+0x69a>
 80065fa:	9904      	ldr	r1, [sp, #16]
 80065fc:	4620      	mov	r0, r4
 80065fe:	f000 fe0a 	bl	8007216 <_Bfree>
 8006602:	2300      	movs	r3, #0
 8006604:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006606:	702b      	strb	r3, [r5, #0]
 8006608:	f10a 0301 	add.w	r3, sl, #1
 800660c:	6013      	str	r3, [r2, #0]
 800660e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006610:	2b00      	cmp	r3, #0
 8006612:	f000 8241 	beq.w	8006a98 <_dtoa_r+0xb18>
 8006616:	601d      	str	r5, [r3, #0]
 8006618:	e23e      	b.n	8006a98 <_dtoa_r+0xb18>
 800661a:	f8cd a020 	str.w	sl, [sp, #32]
 800661e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006622:	2a39      	cmp	r2, #57	; 0x39
 8006624:	f105 33ff 	add.w	r3, r5, #4294967295
 8006628:	d108      	bne.n	800663c <_dtoa_r+0x6bc>
 800662a:	459b      	cmp	fp, r3
 800662c:	d10a      	bne.n	8006644 <_dtoa_r+0x6c4>
 800662e:	9b08      	ldr	r3, [sp, #32]
 8006630:	3301      	adds	r3, #1
 8006632:	9308      	str	r3, [sp, #32]
 8006634:	2330      	movs	r3, #48	; 0x30
 8006636:	f88b 3000 	strb.w	r3, [fp]
 800663a:	465b      	mov	r3, fp
 800663c:	781a      	ldrb	r2, [r3, #0]
 800663e:	3201      	adds	r2, #1
 8006640:	701a      	strb	r2, [r3, #0]
 8006642:	e78c      	b.n	800655e <_dtoa_r+0x5de>
 8006644:	461d      	mov	r5, r3
 8006646:	e7ea      	b.n	800661e <_dtoa_r+0x69e>
 8006648:	2200      	movs	r2, #0
 800664a:	4b9b      	ldr	r3, [pc, #620]	; (80068b8 <_dtoa_r+0x938>)
 800664c:	f7f9 fffc 	bl	8000648 <__aeabi_dmul>
 8006650:	2200      	movs	r2, #0
 8006652:	2300      	movs	r3, #0
 8006654:	4606      	mov	r6, r0
 8006656:	460f      	mov	r7, r1
 8006658:	f7fa fa5e 	bl	8000b18 <__aeabi_dcmpeq>
 800665c:	2800      	cmp	r0, #0
 800665e:	d09a      	beq.n	8006596 <_dtoa_r+0x616>
 8006660:	e7cb      	b.n	80065fa <_dtoa_r+0x67a>
 8006662:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006664:	2a00      	cmp	r2, #0
 8006666:	f000 808b 	beq.w	8006780 <_dtoa_r+0x800>
 800666a:	9a06      	ldr	r2, [sp, #24]
 800666c:	2a01      	cmp	r2, #1
 800666e:	dc6e      	bgt.n	800674e <_dtoa_r+0x7ce>
 8006670:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006672:	2a00      	cmp	r2, #0
 8006674:	d067      	beq.n	8006746 <_dtoa_r+0x7c6>
 8006676:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800667a:	9f07      	ldr	r7, [sp, #28]
 800667c:	9d05      	ldr	r5, [sp, #20]
 800667e:	9a05      	ldr	r2, [sp, #20]
 8006680:	2101      	movs	r1, #1
 8006682:	441a      	add	r2, r3
 8006684:	4620      	mov	r0, r4
 8006686:	9205      	str	r2, [sp, #20]
 8006688:	4498      	add	r8, r3
 800668a:	f000 fea2 	bl	80073d2 <__i2b>
 800668e:	4606      	mov	r6, r0
 8006690:	2d00      	cmp	r5, #0
 8006692:	dd0c      	ble.n	80066ae <_dtoa_r+0x72e>
 8006694:	f1b8 0f00 	cmp.w	r8, #0
 8006698:	dd09      	ble.n	80066ae <_dtoa_r+0x72e>
 800669a:	4545      	cmp	r5, r8
 800669c:	9a05      	ldr	r2, [sp, #20]
 800669e:	462b      	mov	r3, r5
 80066a0:	bfa8      	it	ge
 80066a2:	4643      	movge	r3, r8
 80066a4:	1ad2      	subs	r2, r2, r3
 80066a6:	9205      	str	r2, [sp, #20]
 80066a8:	1aed      	subs	r5, r5, r3
 80066aa:	eba8 0803 	sub.w	r8, r8, r3
 80066ae:	9b07      	ldr	r3, [sp, #28]
 80066b0:	b1eb      	cbz	r3, 80066ee <_dtoa_r+0x76e>
 80066b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d067      	beq.n	8006788 <_dtoa_r+0x808>
 80066b8:	b18f      	cbz	r7, 80066de <_dtoa_r+0x75e>
 80066ba:	4631      	mov	r1, r6
 80066bc:	463a      	mov	r2, r7
 80066be:	4620      	mov	r0, r4
 80066c0:	f000 ff26 	bl	8007510 <__pow5mult>
 80066c4:	9a04      	ldr	r2, [sp, #16]
 80066c6:	4601      	mov	r1, r0
 80066c8:	4606      	mov	r6, r0
 80066ca:	4620      	mov	r0, r4
 80066cc:	f000 fe8a 	bl	80073e4 <__multiply>
 80066d0:	9904      	ldr	r1, [sp, #16]
 80066d2:	9008      	str	r0, [sp, #32]
 80066d4:	4620      	mov	r0, r4
 80066d6:	f000 fd9e 	bl	8007216 <_Bfree>
 80066da:	9b08      	ldr	r3, [sp, #32]
 80066dc:	9304      	str	r3, [sp, #16]
 80066de:	9b07      	ldr	r3, [sp, #28]
 80066e0:	1bda      	subs	r2, r3, r7
 80066e2:	d004      	beq.n	80066ee <_dtoa_r+0x76e>
 80066e4:	9904      	ldr	r1, [sp, #16]
 80066e6:	4620      	mov	r0, r4
 80066e8:	f000 ff12 	bl	8007510 <__pow5mult>
 80066ec:	9004      	str	r0, [sp, #16]
 80066ee:	2101      	movs	r1, #1
 80066f0:	4620      	mov	r0, r4
 80066f2:	f000 fe6e 	bl	80073d2 <__i2b>
 80066f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80066f8:	4607      	mov	r7, r0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	f000 81d0 	beq.w	8006aa0 <_dtoa_r+0xb20>
 8006700:	461a      	mov	r2, r3
 8006702:	4601      	mov	r1, r0
 8006704:	4620      	mov	r0, r4
 8006706:	f000 ff03 	bl	8007510 <__pow5mult>
 800670a:	9b06      	ldr	r3, [sp, #24]
 800670c:	2b01      	cmp	r3, #1
 800670e:	4607      	mov	r7, r0
 8006710:	dc40      	bgt.n	8006794 <_dtoa_r+0x814>
 8006712:	9b00      	ldr	r3, [sp, #0]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d139      	bne.n	800678c <_dtoa_r+0x80c>
 8006718:	9b01      	ldr	r3, [sp, #4]
 800671a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800671e:	2b00      	cmp	r3, #0
 8006720:	d136      	bne.n	8006790 <_dtoa_r+0x810>
 8006722:	9b01      	ldr	r3, [sp, #4]
 8006724:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006728:	0d1b      	lsrs	r3, r3, #20
 800672a:	051b      	lsls	r3, r3, #20
 800672c:	b12b      	cbz	r3, 800673a <_dtoa_r+0x7ba>
 800672e:	9b05      	ldr	r3, [sp, #20]
 8006730:	3301      	adds	r3, #1
 8006732:	9305      	str	r3, [sp, #20]
 8006734:	f108 0801 	add.w	r8, r8, #1
 8006738:	2301      	movs	r3, #1
 800673a:	9307      	str	r3, [sp, #28]
 800673c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800673e:	2b00      	cmp	r3, #0
 8006740:	d12a      	bne.n	8006798 <_dtoa_r+0x818>
 8006742:	2001      	movs	r0, #1
 8006744:	e030      	b.n	80067a8 <_dtoa_r+0x828>
 8006746:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006748:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800674c:	e795      	b.n	800667a <_dtoa_r+0x6fa>
 800674e:	9b07      	ldr	r3, [sp, #28]
 8006750:	f109 37ff 	add.w	r7, r9, #4294967295
 8006754:	42bb      	cmp	r3, r7
 8006756:	bfbf      	itttt	lt
 8006758:	9b07      	ldrlt	r3, [sp, #28]
 800675a:	9707      	strlt	r7, [sp, #28]
 800675c:	1afa      	sublt	r2, r7, r3
 800675e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006760:	bfbb      	ittet	lt
 8006762:	189b      	addlt	r3, r3, r2
 8006764:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006766:	1bdf      	subge	r7, r3, r7
 8006768:	2700      	movlt	r7, #0
 800676a:	f1b9 0f00 	cmp.w	r9, #0
 800676e:	bfb5      	itete	lt
 8006770:	9b05      	ldrlt	r3, [sp, #20]
 8006772:	9d05      	ldrge	r5, [sp, #20]
 8006774:	eba3 0509 	sublt.w	r5, r3, r9
 8006778:	464b      	movge	r3, r9
 800677a:	bfb8      	it	lt
 800677c:	2300      	movlt	r3, #0
 800677e:	e77e      	b.n	800667e <_dtoa_r+0x6fe>
 8006780:	9f07      	ldr	r7, [sp, #28]
 8006782:	9d05      	ldr	r5, [sp, #20]
 8006784:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006786:	e783      	b.n	8006690 <_dtoa_r+0x710>
 8006788:	9a07      	ldr	r2, [sp, #28]
 800678a:	e7ab      	b.n	80066e4 <_dtoa_r+0x764>
 800678c:	2300      	movs	r3, #0
 800678e:	e7d4      	b.n	800673a <_dtoa_r+0x7ba>
 8006790:	9b00      	ldr	r3, [sp, #0]
 8006792:	e7d2      	b.n	800673a <_dtoa_r+0x7ba>
 8006794:	2300      	movs	r3, #0
 8006796:	9307      	str	r3, [sp, #28]
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800679e:	6918      	ldr	r0, [r3, #16]
 80067a0:	f000 fdc9 	bl	8007336 <__hi0bits>
 80067a4:	f1c0 0020 	rsb	r0, r0, #32
 80067a8:	4440      	add	r0, r8
 80067aa:	f010 001f 	ands.w	r0, r0, #31
 80067ae:	d047      	beq.n	8006840 <_dtoa_r+0x8c0>
 80067b0:	f1c0 0320 	rsb	r3, r0, #32
 80067b4:	2b04      	cmp	r3, #4
 80067b6:	dd3b      	ble.n	8006830 <_dtoa_r+0x8b0>
 80067b8:	9b05      	ldr	r3, [sp, #20]
 80067ba:	f1c0 001c 	rsb	r0, r0, #28
 80067be:	4403      	add	r3, r0
 80067c0:	9305      	str	r3, [sp, #20]
 80067c2:	4405      	add	r5, r0
 80067c4:	4480      	add	r8, r0
 80067c6:	9b05      	ldr	r3, [sp, #20]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	dd05      	ble.n	80067d8 <_dtoa_r+0x858>
 80067cc:	461a      	mov	r2, r3
 80067ce:	9904      	ldr	r1, [sp, #16]
 80067d0:	4620      	mov	r0, r4
 80067d2:	f000 feeb 	bl	80075ac <__lshift>
 80067d6:	9004      	str	r0, [sp, #16]
 80067d8:	f1b8 0f00 	cmp.w	r8, #0
 80067dc:	dd05      	ble.n	80067ea <_dtoa_r+0x86a>
 80067de:	4639      	mov	r1, r7
 80067e0:	4642      	mov	r2, r8
 80067e2:	4620      	mov	r0, r4
 80067e4:	f000 fee2 	bl	80075ac <__lshift>
 80067e8:	4607      	mov	r7, r0
 80067ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80067ec:	b353      	cbz	r3, 8006844 <_dtoa_r+0x8c4>
 80067ee:	4639      	mov	r1, r7
 80067f0:	9804      	ldr	r0, [sp, #16]
 80067f2:	f000 ff2f 	bl	8007654 <__mcmp>
 80067f6:	2800      	cmp	r0, #0
 80067f8:	da24      	bge.n	8006844 <_dtoa_r+0x8c4>
 80067fa:	2300      	movs	r3, #0
 80067fc:	220a      	movs	r2, #10
 80067fe:	9904      	ldr	r1, [sp, #16]
 8006800:	4620      	mov	r0, r4
 8006802:	f000 fd1f 	bl	8007244 <__multadd>
 8006806:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006808:	9004      	str	r0, [sp, #16]
 800680a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800680e:	2b00      	cmp	r3, #0
 8006810:	f000 814d 	beq.w	8006aae <_dtoa_r+0xb2e>
 8006814:	2300      	movs	r3, #0
 8006816:	4631      	mov	r1, r6
 8006818:	220a      	movs	r2, #10
 800681a:	4620      	mov	r0, r4
 800681c:	f000 fd12 	bl	8007244 <__multadd>
 8006820:	9b02      	ldr	r3, [sp, #8]
 8006822:	2b00      	cmp	r3, #0
 8006824:	4606      	mov	r6, r0
 8006826:	dc4f      	bgt.n	80068c8 <_dtoa_r+0x948>
 8006828:	9b06      	ldr	r3, [sp, #24]
 800682a:	2b02      	cmp	r3, #2
 800682c:	dd4c      	ble.n	80068c8 <_dtoa_r+0x948>
 800682e:	e011      	b.n	8006854 <_dtoa_r+0x8d4>
 8006830:	d0c9      	beq.n	80067c6 <_dtoa_r+0x846>
 8006832:	9a05      	ldr	r2, [sp, #20]
 8006834:	331c      	adds	r3, #28
 8006836:	441a      	add	r2, r3
 8006838:	9205      	str	r2, [sp, #20]
 800683a:	441d      	add	r5, r3
 800683c:	4498      	add	r8, r3
 800683e:	e7c2      	b.n	80067c6 <_dtoa_r+0x846>
 8006840:	4603      	mov	r3, r0
 8006842:	e7f6      	b.n	8006832 <_dtoa_r+0x8b2>
 8006844:	f1b9 0f00 	cmp.w	r9, #0
 8006848:	dc38      	bgt.n	80068bc <_dtoa_r+0x93c>
 800684a:	9b06      	ldr	r3, [sp, #24]
 800684c:	2b02      	cmp	r3, #2
 800684e:	dd35      	ble.n	80068bc <_dtoa_r+0x93c>
 8006850:	f8cd 9008 	str.w	r9, [sp, #8]
 8006854:	9b02      	ldr	r3, [sp, #8]
 8006856:	b963      	cbnz	r3, 8006872 <_dtoa_r+0x8f2>
 8006858:	4639      	mov	r1, r7
 800685a:	2205      	movs	r2, #5
 800685c:	4620      	mov	r0, r4
 800685e:	f000 fcf1 	bl	8007244 <__multadd>
 8006862:	4601      	mov	r1, r0
 8006864:	4607      	mov	r7, r0
 8006866:	9804      	ldr	r0, [sp, #16]
 8006868:	f000 fef4 	bl	8007654 <__mcmp>
 800686c:	2800      	cmp	r0, #0
 800686e:	f73f adcc 	bgt.w	800640a <_dtoa_r+0x48a>
 8006872:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006874:	465d      	mov	r5, fp
 8006876:	ea6f 0a03 	mvn.w	sl, r3
 800687a:	f04f 0900 	mov.w	r9, #0
 800687e:	4639      	mov	r1, r7
 8006880:	4620      	mov	r0, r4
 8006882:	f000 fcc8 	bl	8007216 <_Bfree>
 8006886:	2e00      	cmp	r6, #0
 8006888:	f43f aeb7 	beq.w	80065fa <_dtoa_r+0x67a>
 800688c:	f1b9 0f00 	cmp.w	r9, #0
 8006890:	d005      	beq.n	800689e <_dtoa_r+0x91e>
 8006892:	45b1      	cmp	r9, r6
 8006894:	d003      	beq.n	800689e <_dtoa_r+0x91e>
 8006896:	4649      	mov	r1, r9
 8006898:	4620      	mov	r0, r4
 800689a:	f000 fcbc 	bl	8007216 <_Bfree>
 800689e:	4631      	mov	r1, r6
 80068a0:	4620      	mov	r0, r4
 80068a2:	f000 fcb8 	bl	8007216 <_Bfree>
 80068a6:	e6a8      	b.n	80065fa <_dtoa_r+0x67a>
 80068a8:	2700      	movs	r7, #0
 80068aa:	463e      	mov	r6, r7
 80068ac:	e7e1      	b.n	8006872 <_dtoa_r+0x8f2>
 80068ae:	f8dd a020 	ldr.w	sl, [sp, #32]
 80068b2:	463e      	mov	r6, r7
 80068b4:	e5a9      	b.n	800640a <_dtoa_r+0x48a>
 80068b6:	bf00      	nop
 80068b8:	40240000 	.word	0x40240000
 80068bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068be:	f8cd 9008 	str.w	r9, [sp, #8]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	f000 80fa 	beq.w	8006abc <_dtoa_r+0xb3c>
 80068c8:	2d00      	cmp	r5, #0
 80068ca:	dd05      	ble.n	80068d8 <_dtoa_r+0x958>
 80068cc:	4631      	mov	r1, r6
 80068ce:	462a      	mov	r2, r5
 80068d0:	4620      	mov	r0, r4
 80068d2:	f000 fe6b 	bl	80075ac <__lshift>
 80068d6:	4606      	mov	r6, r0
 80068d8:	9b07      	ldr	r3, [sp, #28]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d04c      	beq.n	8006978 <_dtoa_r+0x9f8>
 80068de:	6871      	ldr	r1, [r6, #4]
 80068e0:	4620      	mov	r0, r4
 80068e2:	f000 fc64 	bl	80071ae <_Balloc>
 80068e6:	6932      	ldr	r2, [r6, #16]
 80068e8:	3202      	adds	r2, #2
 80068ea:	4605      	mov	r5, r0
 80068ec:	0092      	lsls	r2, r2, #2
 80068ee:	f106 010c 	add.w	r1, r6, #12
 80068f2:	300c      	adds	r0, #12
 80068f4:	f000 fc50 	bl	8007198 <memcpy>
 80068f8:	2201      	movs	r2, #1
 80068fa:	4629      	mov	r1, r5
 80068fc:	4620      	mov	r0, r4
 80068fe:	f000 fe55 	bl	80075ac <__lshift>
 8006902:	9b00      	ldr	r3, [sp, #0]
 8006904:	f8cd b014 	str.w	fp, [sp, #20]
 8006908:	f003 0301 	and.w	r3, r3, #1
 800690c:	46b1      	mov	r9, r6
 800690e:	9307      	str	r3, [sp, #28]
 8006910:	4606      	mov	r6, r0
 8006912:	4639      	mov	r1, r7
 8006914:	9804      	ldr	r0, [sp, #16]
 8006916:	f7ff faa5 	bl	8005e64 <quorem>
 800691a:	4649      	mov	r1, r9
 800691c:	4605      	mov	r5, r0
 800691e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006922:	9804      	ldr	r0, [sp, #16]
 8006924:	f000 fe96 	bl	8007654 <__mcmp>
 8006928:	4632      	mov	r2, r6
 800692a:	9000      	str	r0, [sp, #0]
 800692c:	4639      	mov	r1, r7
 800692e:	4620      	mov	r0, r4
 8006930:	f000 feaa 	bl	8007688 <__mdiff>
 8006934:	68c3      	ldr	r3, [r0, #12]
 8006936:	4602      	mov	r2, r0
 8006938:	bb03      	cbnz	r3, 800697c <_dtoa_r+0x9fc>
 800693a:	4601      	mov	r1, r0
 800693c:	9008      	str	r0, [sp, #32]
 800693e:	9804      	ldr	r0, [sp, #16]
 8006940:	f000 fe88 	bl	8007654 <__mcmp>
 8006944:	9a08      	ldr	r2, [sp, #32]
 8006946:	4603      	mov	r3, r0
 8006948:	4611      	mov	r1, r2
 800694a:	4620      	mov	r0, r4
 800694c:	9308      	str	r3, [sp, #32]
 800694e:	f000 fc62 	bl	8007216 <_Bfree>
 8006952:	9b08      	ldr	r3, [sp, #32]
 8006954:	b9a3      	cbnz	r3, 8006980 <_dtoa_r+0xa00>
 8006956:	9a06      	ldr	r2, [sp, #24]
 8006958:	b992      	cbnz	r2, 8006980 <_dtoa_r+0xa00>
 800695a:	9a07      	ldr	r2, [sp, #28]
 800695c:	b982      	cbnz	r2, 8006980 <_dtoa_r+0xa00>
 800695e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006962:	d029      	beq.n	80069b8 <_dtoa_r+0xa38>
 8006964:	9b00      	ldr	r3, [sp, #0]
 8006966:	2b00      	cmp	r3, #0
 8006968:	dd01      	ble.n	800696e <_dtoa_r+0x9ee>
 800696a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800696e:	9b05      	ldr	r3, [sp, #20]
 8006970:	1c5d      	adds	r5, r3, #1
 8006972:	f883 8000 	strb.w	r8, [r3]
 8006976:	e782      	b.n	800687e <_dtoa_r+0x8fe>
 8006978:	4630      	mov	r0, r6
 800697a:	e7c2      	b.n	8006902 <_dtoa_r+0x982>
 800697c:	2301      	movs	r3, #1
 800697e:	e7e3      	b.n	8006948 <_dtoa_r+0x9c8>
 8006980:	9a00      	ldr	r2, [sp, #0]
 8006982:	2a00      	cmp	r2, #0
 8006984:	db04      	blt.n	8006990 <_dtoa_r+0xa10>
 8006986:	d125      	bne.n	80069d4 <_dtoa_r+0xa54>
 8006988:	9a06      	ldr	r2, [sp, #24]
 800698a:	bb1a      	cbnz	r2, 80069d4 <_dtoa_r+0xa54>
 800698c:	9a07      	ldr	r2, [sp, #28]
 800698e:	bb0a      	cbnz	r2, 80069d4 <_dtoa_r+0xa54>
 8006990:	2b00      	cmp	r3, #0
 8006992:	ddec      	ble.n	800696e <_dtoa_r+0x9ee>
 8006994:	2201      	movs	r2, #1
 8006996:	9904      	ldr	r1, [sp, #16]
 8006998:	4620      	mov	r0, r4
 800699a:	f000 fe07 	bl	80075ac <__lshift>
 800699e:	4639      	mov	r1, r7
 80069a0:	9004      	str	r0, [sp, #16]
 80069a2:	f000 fe57 	bl	8007654 <__mcmp>
 80069a6:	2800      	cmp	r0, #0
 80069a8:	dc03      	bgt.n	80069b2 <_dtoa_r+0xa32>
 80069aa:	d1e0      	bne.n	800696e <_dtoa_r+0x9ee>
 80069ac:	f018 0f01 	tst.w	r8, #1
 80069b0:	d0dd      	beq.n	800696e <_dtoa_r+0x9ee>
 80069b2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80069b6:	d1d8      	bne.n	800696a <_dtoa_r+0x9ea>
 80069b8:	9b05      	ldr	r3, [sp, #20]
 80069ba:	9a05      	ldr	r2, [sp, #20]
 80069bc:	1c5d      	adds	r5, r3, #1
 80069be:	2339      	movs	r3, #57	; 0x39
 80069c0:	7013      	strb	r3, [r2, #0]
 80069c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80069c6:	2b39      	cmp	r3, #57	; 0x39
 80069c8:	f105 32ff 	add.w	r2, r5, #4294967295
 80069cc:	d04f      	beq.n	8006a6e <_dtoa_r+0xaee>
 80069ce:	3301      	adds	r3, #1
 80069d0:	7013      	strb	r3, [r2, #0]
 80069d2:	e754      	b.n	800687e <_dtoa_r+0x8fe>
 80069d4:	9a05      	ldr	r2, [sp, #20]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	f102 0501 	add.w	r5, r2, #1
 80069dc:	dd06      	ble.n	80069ec <_dtoa_r+0xa6c>
 80069de:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80069e2:	d0e9      	beq.n	80069b8 <_dtoa_r+0xa38>
 80069e4:	f108 0801 	add.w	r8, r8, #1
 80069e8:	9b05      	ldr	r3, [sp, #20]
 80069ea:	e7c2      	b.n	8006972 <_dtoa_r+0x9f2>
 80069ec:	9a02      	ldr	r2, [sp, #8]
 80069ee:	f805 8c01 	strb.w	r8, [r5, #-1]
 80069f2:	eba5 030b 	sub.w	r3, r5, fp
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d021      	beq.n	8006a3e <_dtoa_r+0xabe>
 80069fa:	2300      	movs	r3, #0
 80069fc:	220a      	movs	r2, #10
 80069fe:	9904      	ldr	r1, [sp, #16]
 8006a00:	4620      	mov	r0, r4
 8006a02:	f000 fc1f 	bl	8007244 <__multadd>
 8006a06:	45b1      	cmp	r9, r6
 8006a08:	9004      	str	r0, [sp, #16]
 8006a0a:	f04f 0300 	mov.w	r3, #0
 8006a0e:	f04f 020a 	mov.w	r2, #10
 8006a12:	4649      	mov	r1, r9
 8006a14:	4620      	mov	r0, r4
 8006a16:	d105      	bne.n	8006a24 <_dtoa_r+0xaa4>
 8006a18:	f000 fc14 	bl	8007244 <__multadd>
 8006a1c:	4681      	mov	r9, r0
 8006a1e:	4606      	mov	r6, r0
 8006a20:	9505      	str	r5, [sp, #20]
 8006a22:	e776      	b.n	8006912 <_dtoa_r+0x992>
 8006a24:	f000 fc0e 	bl	8007244 <__multadd>
 8006a28:	4631      	mov	r1, r6
 8006a2a:	4681      	mov	r9, r0
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	220a      	movs	r2, #10
 8006a30:	4620      	mov	r0, r4
 8006a32:	f000 fc07 	bl	8007244 <__multadd>
 8006a36:	4606      	mov	r6, r0
 8006a38:	e7f2      	b.n	8006a20 <_dtoa_r+0xaa0>
 8006a3a:	f04f 0900 	mov.w	r9, #0
 8006a3e:	2201      	movs	r2, #1
 8006a40:	9904      	ldr	r1, [sp, #16]
 8006a42:	4620      	mov	r0, r4
 8006a44:	f000 fdb2 	bl	80075ac <__lshift>
 8006a48:	4639      	mov	r1, r7
 8006a4a:	9004      	str	r0, [sp, #16]
 8006a4c:	f000 fe02 	bl	8007654 <__mcmp>
 8006a50:	2800      	cmp	r0, #0
 8006a52:	dcb6      	bgt.n	80069c2 <_dtoa_r+0xa42>
 8006a54:	d102      	bne.n	8006a5c <_dtoa_r+0xadc>
 8006a56:	f018 0f01 	tst.w	r8, #1
 8006a5a:	d1b2      	bne.n	80069c2 <_dtoa_r+0xa42>
 8006a5c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006a60:	2b30      	cmp	r3, #48	; 0x30
 8006a62:	f105 32ff 	add.w	r2, r5, #4294967295
 8006a66:	f47f af0a 	bne.w	800687e <_dtoa_r+0x8fe>
 8006a6a:	4615      	mov	r5, r2
 8006a6c:	e7f6      	b.n	8006a5c <_dtoa_r+0xadc>
 8006a6e:	4593      	cmp	fp, r2
 8006a70:	d105      	bne.n	8006a7e <_dtoa_r+0xafe>
 8006a72:	2331      	movs	r3, #49	; 0x31
 8006a74:	f10a 0a01 	add.w	sl, sl, #1
 8006a78:	f88b 3000 	strb.w	r3, [fp]
 8006a7c:	e6ff      	b.n	800687e <_dtoa_r+0x8fe>
 8006a7e:	4615      	mov	r5, r2
 8006a80:	e79f      	b.n	80069c2 <_dtoa_r+0xa42>
 8006a82:	f8df b064 	ldr.w	fp, [pc, #100]	; 8006ae8 <_dtoa_r+0xb68>
 8006a86:	e007      	b.n	8006a98 <_dtoa_r+0xb18>
 8006a88:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a8a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8006aec <_dtoa_r+0xb6c>
 8006a8e:	b11b      	cbz	r3, 8006a98 <_dtoa_r+0xb18>
 8006a90:	f10b 0308 	add.w	r3, fp, #8
 8006a94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006a96:	6013      	str	r3, [r2, #0]
 8006a98:	4658      	mov	r0, fp
 8006a9a:	b017      	add	sp, #92	; 0x5c
 8006a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aa0:	9b06      	ldr	r3, [sp, #24]
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	f77f ae35 	ble.w	8006712 <_dtoa_r+0x792>
 8006aa8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006aaa:	9307      	str	r3, [sp, #28]
 8006aac:	e649      	b.n	8006742 <_dtoa_r+0x7c2>
 8006aae:	9b02      	ldr	r3, [sp, #8]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	dc03      	bgt.n	8006abc <_dtoa_r+0xb3c>
 8006ab4:	9b06      	ldr	r3, [sp, #24]
 8006ab6:	2b02      	cmp	r3, #2
 8006ab8:	f73f aecc 	bgt.w	8006854 <_dtoa_r+0x8d4>
 8006abc:	465d      	mov	r5, fp
 8006abe:	4639      	mov	r1, r7
 8006ac0:	9804      	ldr	r0, [sp, #16]
 8006ac2:	f7ff f9cf 	bl	8005e64 <quorem>
 8006ac6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006aca:	f805 8b01 	strb.w	r8, [r5], #1
 8006ace:	9a02      	ldr	r2, [sp, #8]
 8006ad0:	eba5 030b 	sub.w	r3, r5, fp
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	ddb0      	ble.n	8006a3a <_dtoa_r+0xaba>
 8006ad8:	2300      	movs	r3, #0
 8006ada:	220a      	movs	r2, #10
 8006adc:	9904      	ldr	r1, [sp, #16]
 8006ade:	4620      	mov	r0, r4
 8006ae0:	f000 fbb0 	bl	8007244 <__multadd>
 8006ae4:	9004      	str	r0, [sp, #16]
 8006ae6:	e7ea      	b.n	8006abe <_dtoa_r+0xb3e>
 8006ae8:	08007f04 	.word	0x08007f04
 8006aec:	08007f80 	.word	0x08007f80

08006af0 <rshift>:
 8006af0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006af2:	6906      	ldr	r6, [r0, #16]
 8006af4:	114b      	asrs	r3, r1, #5
 8006af6:	429e      	cmp	r6, r3
 8006af8:	f100 0414 	add.w	r4, r0, #20
 8006afc:	dd30      	ble.n	8006b60 <rshift+0x70>
 8006afe:	f011 011f 	ands.w	r1, r1, #31
 8006b02:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8006b06:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8006b0a:	d108      	bne.n	8006b1e <rshift+0x2e>
 8006b0c:	4621      	mov	r1, r4
 8006b0e:	42b2      	cmp	r2, r6
 8006b10:	460b      	mov	r3, r1
 8006b12:	d211      	bcs.n	8006b38 <rshift+0x48>
 8006b14:	f852 3b04 	ldr.w	r3, [r2], #4
 8006b18:	f841 3b04 	str.w	r3, [r1], #4
 8006b1c:	e7f7      	b.n	8006b0e <rshift+0x1e>
 8006b1e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8006b22:	f1c1 0c20 	rsb	ip, r1, #32
 8006b26:	40cd      	lsrs	r5, r1
 8006b28:	3204      	adds	r2, #4
 8006b2a:	4623      	mov	r3, r4
 8006b2c:	42b2      	cmp	r2, r6
 8006b2e:	4617      	mov	r7, r2
 8006b30:	d30c      	bcc.n	8006b4c <rshift+0x5c>
 8006b32:	601d      	str	r5, [r3, #0]
 8006b34:	b105      	cbz	r5, 8006b38 <rshift+0x48>
 8006b36:	3304      	adds	r3, #4
 8006b38:	1b1a      	subs	r2, r3, r4
 8006b3a:	42a3      	cmp	r3, r4
 8006b3c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006b40:	bf08      	it	eq
 8006b42:	2300      	moveq	r3, #0
 8006b44:	6102      	str	r2, [r0, #16]
 8006b46:	bf08      	it	eq
 8006b48:	6143      	streq	r3, [r0, #20]
 8006b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b4c:	683f      	ldr	r7, [r7, #0]
 8006b4e:	fa07 f70c 	lsl.w	r7, r7, ip
 8006b52:	433d      	orrs	r5, r7
 8006b54:	f843 5b04 	str.w	r5, [r3], #4
 8006b58:	f852 5b04 	ldr.w	r5, [r2], #4
 8006b5c:	40cd      	lsrs	r5, r1
 8006b5e:	e7e5      	b.n	8006b2c <rshift+0x3c>
 8006b60:	4623      	mov	r3, r4
 8006b62:	e7e9      	b.n	8006b38 <rshift+0x48>

08006b64 <__hexdig_fun>:
 8006b64:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006b68:	2b09      	cmp	r3, #9
 8006b6a:	d802      	bhi.n	8006b72 <__hexdig_fun+0xe>
 8006b6c:	3820      	subs	r0, #32
 8006b6e:	b2c0      	uxtb	r0, r0
 8006b70:	4770      	bx	lr
 8006b72:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006b76:	2b05      	cmp	r3, #5
 8006b78:	d801      	bhi.n	8006b7e <__hexdig_fun+0x1a>
 8006b7a:	3847      	subs	r0, #71	; 0x47
 8006b7c:	e7f7      	b.n	8006b6e <__hexdig_fun+0xa>
 8006b7e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006b82:	2b05      	cmp	r3, #5
 8006b84:	d801      	bhi.n	8006b8a <__hexdig_fun+0x26>
 8006b86:	3827      	subs	r0, #39	; 0x27
 8006b88:	e7f1      	b.n	8006b6e <__hexdig_fun+0xa>
 8006b8a:	2000      	movs	r0, #0
 8006b8c:	4770      	bx	lr

08006b8e <__gethex>:
 8006b8e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b92:	b08b      	sub	sp, #44	; 0x2c
 8006b94:	468a      	mov	sl, r1
 8006b96:	9002      	str	r0, [sp, #8]
 8006b98:	9816      	ldr	r0, [sp, #88]	; 0x58
 8006b9a:	9306      	str	r3, [sp, #24]
 8006b9c:	4690      	mov	r8, r2
 8006b9e:	f000 fad0 	bl	8007142 <__localeconv_l>
 8006ba2:	6803      	ldr	r3, [r0, #0]
 8006ba4:	9303      	str	r3, [sp, #12]
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f7f9 fb3a 	bl	8000220 <strlen>
 8006bac:	9b03      	ldr	r3, [sp, #12]
 8006bae:	9001      	str	r0, [sp, #4]
 8006bb0:	4403      	add	r3, r0
 8006bb2:	f04f 0b00 	mov.w	fp, #0
 8006bb6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006bba:	9307      	str	r3, [sp, #28]
 8006bbc:	f8da 3000 	ldr.w	r3, [sl]
 8006bc0:	3302      	adds	r3, #2
 8006bc2:	461f      	mov	r7, r3
 8006bc4:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006bc8:	2830      	cmp	r0, #48	; 0x30
 8006bca:	d06c      	beq.n	8006ca6 <__gethex+0x118>
 8006bcc:	f7ff ffca 	bl	8006b64 <__hexdig_fun>
 8006bd0:	4604      	mov	r4, r0
 8006bd2:	2800      	cmp	r0, #0
 8006bd4:	d16a      	bne.n	8006cac <__gethex+0x11e>
 8006bd6:	9a01      	ldr	r2, [sp, #4]
 8006bd8:	9903      	ldr	r1, [sp, #12]
 8006bda:	4638      	mov	r0, r7
 8006bdc:	f001 f8fe 	bl	8007ddc <strncmp>
 8006be0:	2800      	cmp	r0, #0
 8006be2:	d166      	bne.n	8006cb2 <__gethex+0x124>
 8006be4:	9b01      	ldr	r3, [sp, #4]
 8006be6:	5cf8      	ldrb	r0, [r7, r3]
 8006be8:	18fe      	adds	r6, r7, r3
 8006bea:	f7ff ffbb 	bl	8006b64 <__hexdig_fun>
 8006bee:	2800      	cmp	r0, #0
 8006bf0:	d062      	beq.n	8006cb8 <__gethex+0x12a>
 8006bf2:	4633      	mov	r3, r6
 8006bf4:	7818      	ldrb	r0, [r3, #0]
 8006bf6:	2830      	cmp	r0, #48	; 0x30
 8006bf8:	461f      	mov	r7, r3
 8006bfa:	f103 0301 	add.w	r3, r3, #1
 8006bfe:	d0f9      	beq.n	8006bf4 <__gethex+0x66>
 8006c00:	f7ff ffb0 	bl	8006b64 <__hexdig_fun>
 8006c04:	fab0 f580 	clz	r5, r0
 8006c08:	096d      	lsrs	r5, r5, #5
 8006c0a:	4634      	mov	r4, r6
 8006c0c:	f04f 0b01 	mov.w	fp, #1
 8006c10:	463a      	mov	r2, r7
 8006c12:	4616      	mov	r6, r2
 8006c14:	3201      	adds	r2, #1
 8006c16:	7830      	ldrb	r0, [r6, #0]
 8006c18:	f7ff ffa4 	bl	8006b64 <__hexdig_fun>
 8006c1c:	2800      	cmp	r0, #0
 8006c1e:	d1f8      	bne.n	8006c12 <__gethex+0x84>
 8006c20:	9a01      	ldr	r2, [sp, #4]
 8006c22:	9903      	ldr	r1, [sp, #12]
 8006c24:	4630      	mov	r0, r6
 8006c26:	f001 f8d9 	bl	8007ddc <strncmp>
 8006c2a:	b950      	cbnz	r0, 8006c42 <__gethex+0xb4>
 8006c2c:	b954      	cbnz	r4, 8006c44 <__gethex+0xb6>
 8006c2e:	9b01      	ldr	r3, [sp, #4]
 8006c30:	18f4      	adds	r4, r6, r3
 8006c32:	4622      	mov	r2, r4
 8006c34:	4616      	mov	r6, r2
 8006c36:	3201      	adds	r2, #1
 8006c38:	7830      	ldrb	r0, [r6, #0]
 8006c3a:	f7ff ff93 	bl	8006b64 <__hexdig_fun>
 8006c3e:	2800      	cmp	r0, #0
 8006c40:	d1f8      	bne.n	8006c34 <__gethex+0xa6>
 8006c42:	b10c      	cbz	r4, 8006c48 <__gethex+0xba>
 8006c44:	1ba4      	subs	r4, r4, r6
 8006c46:	00a4      	lsls	r4, r4, #2
 8006c48:	7833      	ldrb	r3, [r6, #0]
 8006c4a:	2b50      	cmp	r3, #80	; 0x50
 8006c4c:	d001      	beq.n	8006c52 <__gethex+0xc4>
 8006c4e:	2b70      	cmp	r3, #112	; 0x70
 8006c50:	d140      	bne.n	8006cd4 <__gethex+0x146>
 8006c52:	7873      	ldrb	r3, [r6, #1]
 8006c54:	2b2b      	cmp	r3, #43	; 0x2b
 8006c56:	d031      	beq.n	8006cbc <__gethex+0x12e>
 8006c58:	2b2d      	cmp	r3, #45	; 0x2d
 8006c5a:	d033      	beq.n	8006cc4 <__gethex+0x136>
 8006c5c:	1c71      	adds	r1, r6, #1
 8006c5e:	f04f 0900 	mov.w	r9, #0
 8006c62:	7808      	ldrb	r0, [r1, #0]
 8006c64:	f7ff ff7e 	bl	8006b64 <__hexdig_fun>
 8006c68:	1e43      	subs	r3, r0, #1
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	2b18      	cmp	r3, #24
 8006c6e:	d831      	bhi.n	8006cd4 <__gethex+0x146>
 8006c70:	f1a0 0210 	sub.w	r2, r0, #16
 8006c74:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006c78:	f7ff ff74 	bl	8006b64 <__hexdig_fun>
 8006c7c:	1e43      	subs	r3, r0, #1
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	2b18      	cmp	r3, #24
 8006c82:	d922      	bls.n	8006cca <__gethex+0x13c>
 8006c84:	f1b9 0f00 	cmp.w	r9, #0
 8006c88:	d000      	beq.n	8006c8c <__gethex+0xfe>
 8006c8a:	4252      	negs	r2, r2
 8006c8c:	4414      	add	r4, r2
 8006c8e:	f8ca 1000 	str.w	r1, [sl]
 8006c92:	b30d      	cbz	r5, 8006cd8 <__gethex+0x14a>
 8006c94:	f1bb 0f00 	cmp.w	fp, #0
 8006c98:	bf0c      	ite	eq
 8006c9a:	2706      	moveq	r7, #6
 8006c9c:	2700      	movne	r7, #0
 8006c9e:	4638      	mov	r0, r7
 8006ca0:	b00b      	add	sp, #44	; 0x2c
 8006ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ca6:	f10b 0b01 	add.w	fp, fp, #1
 8006caa:	e78a      	b.n	8006bc2 <__gethex+0x34>
 8006cac:	2500      	movs	r5, #0
 8006cae:	462c      	mov	r4, r5
 8006cb0:	e7ae      	b.n	8006c10 <__gethex+0x82>
 8006cb2:	463e      	mov	r6, r7
 8006cb4:	2501      	movs	r5, #1
 8006cb6:	e7c7      	b.n	8006c48 <__gethex+0xba>
 8006cb8:	4604      	mov	r4, r0
 8006cba:	e7fb      	b.n	8006cb4 <__gethex+0x126>
 8006cbc:	f04f 0900 	mov.w	r9, #0
 8006cc0:	1cb1      	adds	r1, r6, #2
 8006cc2:	e7ce      	b.n	8006c62 <__gethex+0xd4>
 8006cc4:	f04f 0901 	mov.w	r9, #1
 8006cc8:	e7fa      	b.n	8006cc0 <__gethex+0x132>
 8006cca:	230a      	movs	r3, #10
 8006ccc:	fb03 0202 	mla	r2, r3, r2, r0
 8006cd0:	3a10      	subs	r2, #16
 8006cd2:	e7cf      	b.n	8006c74 <__gethex+0xe6>
 8006cd4:	4631      	mov	r1, r6
 8006cd6:	e7da      	b.n	8006c8e <__gethex+0x100>
 8006cd8:	1bf3      	subs	r3, r6, r7
 8006cda:	3b01      	subs	r3, #1
 8006cdc:	4629      	mov	r1, r5
 8006cde:	2b07      	cmp	r3, #7
 8006ce0:	dc49      	bgt.n	8006d76 <__gethex+0x1e8>
 8006ce2:	9802      	ldr	r0, [sp, #8]
 8006ce4:	f000 fa63 	bl	80071ae <_Balloc>
 8006ce8:	9b01      	ldr	r3, [sp, #4]
 8006cea:	f100 0914 	add.w	r9, r0, #20
 8006cee:	f04f 0b00 	mov.w	fp, #0
 8006cf2:	f1c3 0301 	rsb	r3, r3, #1
 8006cf6:	4605      	mov	r5, r0
 8006cf8:	f8cd 9010 	str.w	r9, [sp, #16]
 8006cfc:	46da      	mov	sl, fp
 8006cfe:	9308      	str	r3, [sp, #32]
 8006d00:	42b7      	cmp	r7, r6
 8006d02:	d33b      	bcc.n	8006d7c <__gethex+0x1ee>
 8006d04:	9804      	ldr	r0, [sp, #16]
 8006d06:	f840 ab04 	str.w	sl, [r0], #4
 8006d0a:	eba0 0009 	sub.w	r0, r0, r9
 8006d0e:	1080      	asrs	r0, r0, #2
 8006d10:	6128      	str	r0, [r5, #16]
 8006d12:	0147      	lsls	r7, r0, #5
 8006d14:	4650      	mov	r0, sl
 8006d16:	f000 fb0e 	bl	8007336 <__hi0bits>
 8006d1a:	f8d8 6000 	ldr.w	r6, [r8]
 8006d1e:	1a3f      	subs	r7, r7, r0
 8006d20:	42b7      	cmp	r7, r6
 8006d22:	dd64      	ble.n	8006dee <__gethex+0x260>
 8006d24:	1bbf      	subs	r7, r7, r6
 8006d26:	4639      	mov	r1, r7
 8006d28:	4628      	mov	r0, r5
 8006d2a:	f000 fe1d 	bl	8007968 <__any_on>
 8006d2e:	4682      	mov	sl, r0
 8006d30:	b178      	cbz	r0, 8006d52 <__gethex+0x1c4>
 8006d32:	1e7b      	subs	r3, r7, #1
 8006d34:	1159      	asrs	r1, r3, #5
 8006d36:	f003 021f 	and.w	r2, r3, #31
 8006d3a:	f04f 0a01 	mov.w	sl, #1
 8006d3e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006d42:	fa0a f202 	lsl.w	r2, sl, r2
 8006d46:	420a      	tst	r2, r1
 8006d48:	d003      	beq.n	8006d52 <__gethex+0x1c4>
 8006d4a:	4553      	cmp	r3, sl
 8006d4c:	dc46      	bgt.n	8006ddc <__gethex+0x24e>
 8006d4e:	f04f 0a02 	mov.w	sl, #2
 8006d52:	4639      	mov	r1, r7
 8006d54:	4628      	mov	r0, r5
 8006d56:	f7ff fecb 	bl	8006af0 <rshift>
 8006d5a:	443c      	add	r4, r7
 8006d5c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006d60:	42a3      	cmp	r3, r4
 8006d62:	da52      	bge.n	8006e0a <__gethex+0x27c>
 8006d64:	4629      	mov	r1, r5
 8006d66:	9802      	ldr	r0, [sp, #8]
 8006d68:	f000 fa55 	bl	8007216 <_Bfree>
 8006d6c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006d6e:	2300      	movs	r3, #0
 8006d70:	6013      	str	r3, [r2, #0]
 8006d72:	27a3      	movs	r7, #163	; 0xa3
 8006d74:	e793      	b.n	8006c9e <__gethex+0x110>
 8006d76:	3101      	adds	r1, #1
 8006d78:	105b      	asrs	r3, r3, #1
 8006d7a:	e7b0      	b.n	8006cde <__gethex+0x150>
 8006d7c:	1e73      	subs	r3, r6, #1
 8006d7e:	9305      	str	r3, [sp, #20]
 8006d80:	9a07      	ldr	r2, [sp, #28]
 8006d82:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d018      	beq.n	8006dbc <__gethex+0x22e>
 8006d8a:	f1bb 0f20 	cmp.w	fp, #32
 8006d8e:	d107      	bne.n	8006da0 <__gethex+0x212>
 8006d90:	9b04      	ldr	r3, [sp, #16]
 8006d92:	f8c3 a000 	str.w	sl, [r3]
 8006d96:	3304      	adds	r3, #4
 8006d98:	f04f 0a00 	mov.w	sl, #0
 8006d9c:	9304      	str	r3, [sp, #16]
 8006d9e:	46d3      	mov	fp, sl
 8006da0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006da4:	f7ff fede 	bl	8006b64 <__hexdig_fun>
 8006da8:	f000 000f 	and.w	r0, r0, #15
 8006dac:	fa00 f00b 	lsl.w	r0, r0, fp
 8006db0:	ea4a 0a00 	orr.w	sl, sl, r0
 8006db4:	f10b 0b04 	add.w	fp, fp, #4
 8006db8:	9b05      	ldr	r3, [sp, #20]
 8006dba:	e00d      	b.n	8006dd8 <__gethex+0x24a>
 8006dbc:	9b05      	ldr	r3, [sp, #20]
 8006dbe:	9a08      	ldr	r2, [sp, #32]
 8006dc0:	4413      	add	r3, r2
 8006dc2:	42bb      	cmp	r3, r7
 8006dc4:	d3e1      	bcc.n	8006d8a <__gethex+0x1fc>
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	9a01      	ldr	r2, [sp, #4]
 8006dca:	9903      	ldr	r1, [sp, #12]
 8006dcc:	9309      	str	r3, [sp, #36]	; 0x24
 8006dce:	f001 f805 	bl	8007ddc <strncmp>
 8006dd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dd4:	2800      	cmp	r0, #0
 8006dd6:	d1d8      	bne.n	8006d8a <__gethex+0x1fc>
 8006dd8:	461e      	mov	r6, r3
 8006dda:	e791      	b.n	8006d00 <__gethex+0x172>
 8006ddc:	1eb9      	subs	r1, r7, #2
 8006dde:	4628      	mov	r0, r5
 8006de0:	f000 fdc2 	bl	8007968 <__any_on>
 8006de4:	2800      	cmp	r0, #0
 8006de6:	d0b2      	beq.n	8006d4e <__gethex+0x1c0>
 8006de8:	f04f 0a03 	mov.w	sl, #3
 8006dec:	e7b1      	b.n	8006d52 <__gethex+0x1c4>
 8006dee:	da09      	bge.n	8006e04 <__gethex+0x276>
 8006df0:	1bf7      	subs	r7, r6, r7
 8006df2:	4629      	mov	r1, r5
 8006df4:	463a      	mov	r2, r7
 8006df6:	9802      	ldr	r0, [sp, #8]
 8006df8:	f000 fbd8 	bl	80075ac <__lshift>
 8006dfc:	1be4      	subs	r4, r4, r7
 8006dfe:	4605      	mov	r5, r0
 8006e00:	f100 0914 	add.w	r9, r0, #20
 8006e04:	f04f 0a00 	mov.w	sl, #0
 8006e08:	e7a8      	b.n	8006d5c <__gethex+0x1ce>
 8006e0a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006e0e:	42a0      	cmp	r0, r4
 8006e10:	dd6a      	ble.n	8006ee8 <__gethex+0x35a>
 8006e12:	1b04      	subs	r4, r0, r4
 8006e14:	42a6      	cmp	r6, r4
 8006e16:	dc2e      	bgt.n	8006e76 <__gethex+0x2e8>
 8006e18:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006e1c:	2b02      	cmp	r3, #2
 8006e1e:	d022      	beq.n	8006e66 <__gethex+0x2d8>
 8006e20:	2b03      	cmp	r3, #3
 8006e22:	d024      	beq.n	8006e6e <__gethex+0x2e0>
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d115      	bne.n	8006e54 <__gethex+0x2c6>
 8006e28:	42a6      	cmp	r6, r4
 8006e2a:	d113      	bne.n	8006e54 <__gethex+0x2c6>
 8006e2c:	2e01      	cmp	r6, #1
 8006e2e:	dc0b      	bgt.n	8006e48 <__gethex+0x2ba>
 8006e30:	9a06      	ldr	r2, [sp, #24]
 8006e32:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006e36:	6013      	str	r3, [r2, #0]
 8006e38:	2301      	movs	r3, #1
 8006e3a:	612b      	str	r3, [r5, #16]
 8006e3c:	f8c9 3000 	str.w	r3, [r9]
 8006e40:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006e42:	2762      	movs	r7, #98	; 0x62
 8006e44:	601d      	str	r5, [r3, #0]
 8006e46:	e72a      	b.n	8006c9e <__gethex+0x110>
 8006e48:	1e71      	subs	r1, r6, #1
 8006e4a:	4628      	mov	r0, r5
 8006e4c:	f000 fd8c 	bl	8007968 <__any_on>
 8006e50:	2800      	cmp	r0, #0
 8006e52:	d1ed      	bne.n	8006e30 <__gethex+0x2a2>
 8006e54:	4629      	mov	r1, r5
 8006e56:	9802      	ldr	r0, [sp, #8]
 8006e58:	f000 f9dd 	bl	8007216 <_Bfree>
 8006e5c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006e5e:	2300      	movs	r3, #0
 8006e60:	6013      	str	r3, [r2, #0]
 8006e62:	2750      	movs	r7, #80	; 0x50
 8006e64:	e71b      	b.n	8006c9e <__gethex+0x110>
 8006e66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d0e1      	beq.n	8006e30 <__gethex+0x2a2>
 8006e6c:	e7f2      	b.n	8006e54 <__gethex+0x2c6>
 8006e6e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d1dd      	bne.n	8006e30 <__gethex+0x2a2>
 8006e74:	e7ee      	b.n	8006e54 <__gethex+0x2c6>
 8006e76:	1e67      	subs	r7, r4, #1
 8006e78:	f1ba 0f00 	cmp.w	sl, #0
 8006e7c:	d131      	bne.n	8006ee2 <__gethex+0x354>
 8006e7e:	b127      	cbz	r7, 8006e8a <__gethex+0x2fc>
 8006e80:	4639      	mov	r1, r7
 8006e82:	4628      	mov	r0, r5
 8006e84:	f000 fd70 	bl	8007968 <__any_on>
 8006e88:	4682      	mov	sl, r0
 8006e8a:	117a      	asrs	r2, r7, #5
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	f007 071f 	and.w	r7, r7, #31
 8006e92:	fa03 f707 	lsl.w	r7, r3, r7
 8006e96:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8006e9a:	4621      	mov	r1, r4
 8006e9c:	421f      	tst	r7, r3
 8006e9e:	4628      	mov	r0, r5
 8006ea0:	bf18      	it	ne
 8006ea2:	f04a 0a02 	orrne.w	sl, sl, #2
 8006ea6:	1b36      	subs	r6, r6, r4
 8006ea8:	f7ff fe22 	bl	8006af0 <rshift>
 8006eac:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8006eb0:	2702      	movs	r7, #2
 8006eb2:	f1ba 0f00 	cmp.w	sl, #0
 8006eb6:	d048      	beq.n	8006f4a <__gethex+0x3bc>
 8006eb8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006ebc:	2b02      	cmp	r3, #2
 8006ebe:	d015      	beq.n	8006eec <__gethex+0x35e>
 8006ec0:	2b03      	cmp	r3, #3
 8006ec2:	d017      	beq.n	8006ef4 <__gethex+0x366>
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d109      	bne.n	8006edc <__gethex+0x34e>
 8006ec8:	f01a 0f02 	tst.w	sl, #2
 8006ecc:	d006      	beq.n	8006edc <__gethex+0x34e>
 8006ece:	f8d9 3000 	ldr.w	r3, [r9]
 8006ed2:	ea4a 0a03 	orr.w	sl, sl, r3
 8006ed6:	f01a 0f01 	tst.w	sl, #1
 8006eda:	d10e      	bne.n	8006efa <__gethex+0x36c>
 8006edc:	f047 0710 	orr.w	r7, r7, #16
 8006ee0:	e033      	b.n	8006f4a <__gethex+0x3bc>
 8006ee2:	f04f 0a01 	mov.w	sl, #1
 8006ee6:	e7d0      	b.n	8006e8a <__gethex+0x2fc>
 8006ee8:	2701      	movs	r7, #1
 8006eea:	e7e2      	b.n	8006eb2 <__gethex+0x324>
 8006eec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006eee:	f1c3 0301 	rsb	r3, r3, #1
 8006ef2:	9315      	str	r3, [sp, #84]	; 0x54
 8006ef4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d0f0      	beq.n	8006edc <__gethex+0x34e>
 8006efa:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8006efe:	f105 0314 	add.w	r3, r5, #20
 8006f02:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8006f06:	eb03 010a 	add.w	r1, r3, sl
 8006f0a:	f04f 0c00 	mov.w	ip, #0
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f14:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006f18:	d01c      	beq.n	8006f54 <__gethex+0x3c6>
 8006f1a:	3201      	adds	r2, #1
 8006f1c:	6002      	str	r2, [r0, #0]
 8006f1e:	2f02      	cmp	r7, #2
 8006f20:	f105 0314 	add.w	r3, r5, #20
 8006f24:	d138      	bne.n	8006f98 <__gethex+0x40a>
 8006f26:	f8d8 2000 	ldr.w	r2, [r8]
 8006f2a:	3a01      	subs	r2, #1
 8006f2c:	42b2      	cmp	r2, r6
 8006f2e:	d10a      	bne.n	8006f46 <__gethex+0x3b8>
 8006f30:	1171      	asrs	r1, r6, #5
 8006f32:	2201      	movs	r2, #1
 8006f34:	f006 061f 	and.w	r6, r6, #31
 8006f38:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006f3c:	fa02 f606 	lsl.w	r6, r2, r6
 8006f40:	421e      	tst	r6, r3
 8006f42:	bf18      	it	ne
 8006f44:	4617      	movne	r7, r2
 8006f46:	f047 0720 	orr.w	r7, r7, #32
 8006f4a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006f4c:	601d      	str	r5, [r3, #0]
 8006f4e:	9b06      	ldr	r3, [sp, #24]
 8006f50:	601c      	str	r4, [r3, #0]
 8006f52:	e6a4      	b.n	8006c9e <__gethex+0x110>
 8006f54:	4299      	cmp	r1, r3
 8006f56:	f843 cc04 	str.w	ip, [r3, #-4]
 8006f5a:	d8d8      	bhi.n	8006f0e <__gethex+0x380>
 8006f5c:	68ab      	ldr	r3, [r5, #8]
 8006f5e:	4599      	cmp	r9, r3
 8006f60:	db12      	blt.n	8006f88 <__gethex+0x3fa>
 8006f62:	6869      	ldr	r1, [r5, #4]
 8006f64:	9802      	ldr	r0, [sp, #8]
 8006f66:	3101      	adds	r1, #1
 8006f68:	f000 f921 	bl	80071ae <_Balloc>
 8006f6c:	692a      	ldr	r2, [r5, #16]
 8006f6e:	3202      	adds	r2, #2
 8006f70:	f105 010c 	add.w	r1, r5, #12
 8006f74:	4683      	mov	fp, r0
 8006f76:	0092      	lsls	r2, r2, #2
 8006f78:	300c      	adds	r0, #12
 8006f7a:	f000 f90d 	bl	8007198 <memcpy>
 8006f7e:	4629      	mov	r1, r5
 8006f80:	9802      	ldr	r0, [sp, #8]
 8006f82:	f000 f948 	bl	8007216 <_Bfree>
 8006f86:	465d      	mov	r5, fp
 8006f88:	692b      	ldr	r3, [r5, #16]
 8006f8a:	1c5a      	adds	r2, r3, #1
 8006f8c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006f90:	612a      	str	r2, [r5, #16]
 8006f92:	2201      	movs	r2, #1
 8006f94:	615a      	str	r2, [r3, #20]
 8006f96:	e7c2      	b.n	8006f1e <__gethex+0x390>
 8006f98:	692a      	ldr	r2, [r5, #16]
 8006f9a:	454a      	cmp	r2, r9
 8006f9c:	dd0b      	ble.n	8006fb6 <__gethex+0x428>
 8006f9e:	2101      	movs	r1, #1
 8006fa0:	4628      	mov	r0, r5
 8006fa2:	f7ff fda5 	bl	8006af0 <rshift>
 8006fa6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006faa:	3401      	adds	r4, #1
 8006fac:	42a3      	cmp	r3, r4
 8006fae:	f6ff aed9 	blt.w	8006d64 <__gethex+0x1d6>
 8006fb2:	2701      	movs	r7, #1
 8006fb4:	e7c7      	b.n	8006f46 <__gethex+0x3b8>
 8006fb6:	f016 061f 	ands.w	r6, r6, #31
 8006fba:	d0fa      	beq.n	8006fb2 <__gethex+0x424>
 8006fbc:	449a      	add	sl, r3
 8006fbe:	f1c6 0620 	rsb	r6, r6, #32
 8006fc2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8006fc6:	f000 f9b6 	bl	8007336 <__hi0bits>
 8006fca:	42b0      	cmp	r0, r6
 8006fcc:	dbe7      	blt.n	8006f9e <__gethex+0x410>
 8006fce:	e7f0      	b.n	8006fb2 <__gethex+0x424>

08006fd0 <L_shift>:
 8006fd0:	f1c2 0208 	rsb	r2, r2, #8
 8006fd4:	0092      	lsls	r2, r2, #2
 8006fd6:	b570      	push	{r4, r5, r6, lr}
 8006fd8:	f1c2 0620 	rsb	r6, r2, #32
 8006fdc:	6843      	ldr	r3, [r0, #4]
 8006fde:	6804      	ldr	r4, [r0, #0]
 8006fe0:	fa03 f506 	lsl.w	r5, r3, r6
 8006fe4:	432c      	orrs	r4, r5
 8006fe6:	40d3      	lsrs	r3, r2
 8006fe8:	6004      	str	r4, [r0, #0]
 8006fea:	f840 3f04 	str.w	r3, [r0, #4]!
 8006fee:	4288      	cmp	r0, r1
 8006ff0:	d3f4      	bcc.n	8006fdc <L_shift+0xc>
 8006ff2:	bd70      	pop	{r4, r5, r6, pc}

08006ff4 <__match>:
 8006ff4:	b530      	push	{r4, r5, lr}
 8006ff6:	6803      	ldr	r3, [r0, #0]
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ffe:	b914      	cbnz	r4, 8007006 <__match+0x12>
 8007000:	6003      	str	r3, [r0, #0]
 8007002:	2001      	movs	r0, #1
 8007004:	bd30      	pop	{r4, r5, pc}
 8007006:	f813 2b01 	ldrb.w	r2, [r3], #1
 800700a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800700e:	2d19      	cmp	r5, #25
 8007010:	bf98      	it	ls
 8007012:	3220      	addls	r2, #32
 8007014:	42a2      	cmp	r2, r4
 8007016:	d0f0      	beq.n	8006ffa <__match+0x6>
 8007018:	2000      	movs	r0, #0
 800701a:	e7f3      	b.n	8007004 <__match+0x10>

0800701c <__hexnan>:
 800701c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007020:	680b      	ldr	r3, [r1, #0]
 8007022:	6801      	ldr	r1, [r0, #0]
 8007024:	115f      	asrs	r7, r3, #5
 8007026:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800702a:	f013 031f 	ands.w	r3, r3, #31
 800702e:	b087      	sub	sp, #28
 8007030:	bf18      	it	ne
 8007032:	3704      	addne	r7, #4
 8007034:	2500      	movs	r5, #0
 8007036:	1f3e      	subs	r6, r7, #4
 8007038:	4682      	mov	sl, r0
 800703a:	4690      	mov	r8, r2
 800703c:	9301      	str	r3, [sp, #4]
 800703e:	f847 5c04 	str.w	r5, [r7, #-4]
 8007042:	46b1      	mov	r9, r6
 8007044:	4634      	mov	r4, r6
 8007046:	9502      	str	r5, [sp, #8]
 8007048:	46ab      	mov	fp, r5
 800704a:	784a      	ldrb	r2, [r1, #1]
 800704c:	1c4b      	adds	r3, r1, #1
 800704e:	9303      	str	r3, [sp, #12]
 8007050:	b342      	cbz	r2, 80070a4 <__hexnan+0x88>
 8007052:	4610      	mov	r0, r2
 8007054:	9105      	str	r1, [sp, #20]
 8007056:	9204      	str	r2, [sp, #16]
 8007058:	f7ff fd84 	bl	8006b64 <__hexdig_fun>
 800705c:	2800      	cmp	r0, #0
 800705e:	d143      	bne.n	80070e8 <__hexnan+0xcc>
 8007060:	9a04      	ldr	r2, [sp, #16]
 8007062:	9905      	ldr	r1, [sp, #20]
 8007064:	2a20      	cmp	r2, #32
 8007066:	d818      	bhi.n	800709a <__hexnan+0x7e>
 8007068:	9b02      	ldr	r3, [sp, #8]
 800706a:	459b      	cmp	fp, r3
 800706c:	dd13      	ble.n	8007096 <__hexnan+0x7a>
 800706e:	454c      	cmp	r4, r9
 8007070:	d206      	bcs.n	8007080 <__hexnan+0x64>
 8007072:	2d07      	cmp	r5, #7
 8007074:	dc04      	bgt.n	8007080 <__hexnan+0x64>
 8007076:	462a      	mov	r2, r5
 8007078:	4649      	mov	r1, r9
 800707a:	4620      	mov	r0, r4
 800707c:	f7ff ffa8 	bl	8006fd0 <L_shift>
 8007080:	4544      	cmp	r4, r8
 8007082:	d944      	bls.n	800710e <__hexnan+0xf2>
 8007084:	2300      	movs	r3, #0
 8007086:	f1a4 0904 	sub.w	r9, r4, #4
 800708a:	f844 3c04 	str.w	r3, [r4, #-4]
 800708e:	f8cd b008 	str.w	fp, [sp, #8]
 8007092:	464c      	mov	r4, r9
 8007094:	461d      	mov	r5, r3
 8007096:	9903      	ldr	r1, [sp, #12]
 8007098:	e7d7      	b.n	800704a <__hexnan+0x2e>
 800709a:	2a29      	cmp	r2, #41	; 0x29
 800709c:	d14a      	bne.n	8007134 <__hexnan+0x118>
 800709e:	3102      	adds	r1, #2
 80070a0:	f8ca 1000 	str.w	r1, [sl]
 80070a4:	f1bb 0f00 	cmp.w	fp, #0
 80070a8:	d044      	beq.n	8007134 <__hexnan+0x118>
 80070aa:	454c      	cmp	r4, r9
 80070ac:	d206      	bcs.n	80070bc <__hexnan+0xa0>
 80070ae:	2d07      	cmp	r5, #7
 80070b0:	dc04      	bgt.n	80070bc <__hexnan+0xa0>
 80070b2:	462a      	mov	r2, r5
 80070b4:	4649      	mov	r1, r9
 80070b6:	4620      	mov	r0, r4
 80070b8:	f7ff ff8a 	bl	8006fd0 <L_shift>
 80070bc:	4544      	cmp	r4, r8
 80070be:	d928      	bls.n	8007112 <__hexnan+0xf6>
 80070c0:	4643      	mov	r3, r8
 80070c2:	f854 2b04 	ldr.w	r2, [r4], #4
 80070c6:	f843 2b04 	str.w	r2, [r3], #4
 80070ca:	42a6      	cmp	r6, r4
 80070cc:	d2f9      	bcs.n	80070c2 <__hexnan+0xa6>
 80070ce:	2200      	movs	r2, #0
 80070d0:	f843 2b04 	str.w	r2, [r3], #4
 80070d4:	429e      	cmp	r6, r3
 80070d6:	d2fb      	bcs.n	80070d0 <__hexnan+0xb4>
 80070d8:	6833      	ldr	r3, [r6, #0]
 80070da:	b91b      	cbnz	r3, 80070e4 <__hexnan+0xc8>
 80070dc:	4546      	cmp	r6, r8
 80070de:	d127      	bne.n	8007130 <__hexnan+0x114>
 80070e0:	2301      	movs	r3, #1
 80070e2:	6033      	str	r3, [r6, #0]
 80070e4:	2005      	movs	r0, #5
 80070e6:	e026      	b.n	8007136 <__hexnan+0x11a>
 80070e8:	3501      	adds	r5, #1
 80070ea:	2d08      	cmp	r5, #8
 80070ec:	f10b 0b01 	add.w	fp, fp, #1
 80070f0:	dd06      	ble.n	8007100 <__hexnan+0xe4>
 80070f2:	4544      	cmp	r4, r8
 80070f4:	d9cf      	bls.n	8007096 <__hexnan+0x7a>
 80070f6:	2300      	movs	r3, #0
 80070f8:	f844 3c04 	str.w	r3, [r4, #-4]
 80070fc:	2501      	movs	r5, #1
 80070fe:	3c04      	subs	r4, #4
 8007100:	6822      	ldr	r2, [r4, #0]
 8007102:	f000 000f 	and.w	r0, r0, #15
 8007106:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800710a:	6020      	str	r0, [r4, #0]
 800710c:	e7c3      	b.n	8007096 <__hexnan+0x7a>
 800710e:	2508      	movs	r5, #8
 8007110:	e7c1      	b.n	8007096 <__hexnan+0x7a>
 8007112:	9b01      	ldr	r3, [sp, #4]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d0df      	beq.n	80070d8 <__hexnan+0xbc>
 8007118:	f04f 32ff 	mov.w	r2, #4294967295
 800711c:	f1c3 0320 	rsb	r3, r3, #32
 8007120:	fa22 f303 	lsr.w	r3, r2, r3
 8007124:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8007128:	401a      	ands	r2, r3
 800712a:	f847 2c04 	str.w	r2, [r7, #-4]
 800712e:	e7d3      	b.n	80070d8 <__hexnan+0xbc>
 8007130:	3e04      	subs	r6, #4
 8007132:	e7d1      	b.n	80070d8 <__hexnan+0xbc>
 8007134:	2004      	movs	r0, #4
 8007136:	b007      	add	sp, #28
 8007138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800713c <__locale_ctype_ptr_l>:
 800713c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8007140:	4770      	bx	lr

08007142 <__localeconv_l>:
 8007142:	30f0      	adds	r0, #240	; 0xf0
 8007144:	4770      	bx	lr
	...

08007148 <_localeconv_r>:
 8007148:	4b04      	ldr	r3, [pc, #16]	; (800715c <_localeconv_r+0x14>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	6a18      	ldr	r0, [r3, #32]
 800714e:	4b04      	ldr	r3, [pc, #16]	; (8007160 <_localeconv_r+0x18>)
 8007150:	2800      	cmp	r0, #0
 8007152:	bf08      	it	eq
 8007154:	4618      	moveq	r0, r3
 8007156:	30f0      	adds	r0, #240	; 0xf0
 8007158:	4770      	bx	lr
 800715a:	bf00      	nop
 800715c:	200001d8 	.word	0x200001d8
 8007160:	2000023c 	.word	0x2000023c

08007164 <malloc>:
 8007164:	4b02      	ldr	r3, [pc, #8]	; (8007170 <malloc+0xc>)
 8007166:	4601      	mov	r1, r0
 8007168:	6818      	ldr	r0, [r3, #0]
 800716a:	f000 bc7b 	b.w	8007a64 <_malloc_r>
 800716e:	bf00      	nop
 8007170:	200001d8 	.word	0x200001d8

08007174 <__ascii_mbtowc>:
 8007174:	b082      	sub	sp, #8
 8007176:	b901      	cbnz	r1, 800717a <__ascii_mbtowc+0x6>
 8007178:	a901      	add	r1, sp, #4
 800717a:	b142      	cbz	r2, 800718e <__ascii_mbtowc+0x1a>
 800717c:	b14b      	cbz	r3, 8007192 <__ascii_mbtowc+0x1e>
 800717e:	7813      	ldrb	r3, [r2, #0]
 8007180:	600b      	str	r3, [r1, #0]
 8007182:	7812      	ldrb	r2, [r2, #0]
 8007184:	1c10      	adds	r0, r2, #0
 8007186:	bf18      	it	ne
 8007188:	2001      	movne	r0, #1
 800718a:	b002      	add	sp, #8
 800718c:	4770      	bx	lr
 800718e:	4610      	mov	r0, r2
 8007190:	e7fb      	b.n	800718a <__ascii_mbtowc+0x16>
 8007192:	f06f 0001 	mvn.w	r0, #1
 8007196:	e7f8      	b.n	800718a <__ascii_mbtowc+0x16>

08007198 <memcpy>:
 8007198:	b510      	push	{r4, lr}
 800719a:	1e43      	subs	r3, r0, #1
 800719c:	440a      	add	r2, r1
 800719e:	4291      	cmp	r1, r2
 80071a0:	d100      	bne.n	80071a4 <memcpy+0xc>
 80071a2:	bd10      	pop	{r4, pc}
 80071a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071ac:	e7f7      	b.n	800719e <memcpy+0x6>

080071ae <_Balloc>:
 80071ae:	b570      	push	{r4, r5, r6, lr}
 80071b0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80071b2:	4604      	mov	r4, r0
 80071b4:	460e      	mov	r6, r1
 80071b6:	b93d      	cbnz	r5, 80071c8 <_Balloc+0x1a>
 80071b8:	2010      	movs	r0, #16
 80071ba:	f7ff ffd3 	bl	8007164 <malloc>
 80071be:	6260      	str	r0, [r4, #36]	; 0x24
 80071c0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80071c4:	6005      	str	r5, [r0, #0]
 80071c6:	60c5      	str	r5, [r0, #12]
 80071c8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80071ca:	68eb      	ldr	r3, [r5, #12]
 80071cc:	b183      	cbz	r3, 80071f0 <_Balloc+0x42>
 80071ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071d0:	68db      	ldr	r3, [r3, #12]
 80071d2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80071d6:	b9b8      	cbnz	r0, 8007208 <_Balloc+0x5a>
 80071d8:	2101      	movs	r1, #1
 80071da:	fa01 f506 	lsl.w	r5, r1, r6
 80071de:	1d6a      	adds	r2, r5, #5
 80071e0:	0092      	lsls	r2, r2, #2
 80071e2:	4620      	mov	r0, r4
 80071e4:	f000 fbe1 	bl	80079aa <_calloc_r>
 80071e8:	b160      	cbz	r0, 8007204 <_Balloc+0x56>
 80071ea:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80071ee:	e00e      	b.n	800720e <_Balloc+0x60>
 80071f0:	2221      	movs	r2, #33	; 0x21
 80071f2:	2104      	movs	r1, #4
 80071f4:	4620      	mov	r0, r4
 80071f6:	f000 fbd8 	bl	80079aa <_calloc_r>
 80071fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071fc:	60e8      	str	r0, [r5, #12]
 80071fe:	68db      	ldr	r3, [r3, #12]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d1e4      	bne.n	80071ce <_Balloc+0x20>
 8007204:	2000      	movs	r0, #0
 8007206:	bd70      	pop	{r4, r5, r6, pc}
 8007208:	6802      	ldr	r2, [r0, #0]
 800720a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800720e:	2300      	movs	r3, #0
 8007210:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007214:	e7f7      	b.n	8007206 <_Balloc+0x58>

08007216 <_Bfree>:
 8007216:	b570      	push	{r4, r5, r6, lr}
 8007218:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800721a:	4606      	mov	r6, r0
 800721c:	460d      	mov	r5, r1
 800721e:	b93c      	cbnz	r4, 8007230 <_Bfree+0x1a>
 8007220:	2010      	movs	r0, #16
 8007222:	f7ff ff9f 	bl	8007164 <malloc>
 8007226:	6270      	str	r0, [r6, #36]	; 0x24
 8007228:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800722c:	6004      	str	r4, [r0, #0]
 800722e:	60c4      	str	r4, [r0, #12]
 8007230:	b13d      	cbz	r5, 8007242 <_Bfree+0x2c>
 8007232:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007234:	686a      	ldr	r2, [r5, #4]
 8007236:	68db      	ldr	r3, [r3, #12]
 8007238:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800723c:	6029      	str	r1, [r5, #0]
 800723e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007242:	bd70      	pop	{r4, r5, r6, pc}

08007244 <__multadd>:
 8007244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007248:	690d      	ldr	r5, [r1, #16]
 800724a:	461f      	mov	r7, r3
 800724c:	4606      	mov	r6, r0
 800724e:	460c      	mov	r4, r1
 8007250:	f101 0c14 	add.w	ip, r1, #20
 8007254:	2300      	movs	r3, #0
 8007256:	f8dc 0000 	ldr.w	r0, [ip]
 800725a:	b281      	uxth	r1, r0
 800725c:	fb02 7101 	mla	r1, r2, r1, r7
 8007260:	0c0f      	lsrs	r7, r1, #16
 8007262:	0c00      	lsrs	r0, r0, #16
 8007264:	fb02 7000 	mla	r0, r2, r0, r7
 8007268:	b289      	uxth	r1, r1
 800726a:	3301      	adds	r3, #1
 800726c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007270:	429d      	cmp	r5, r3
 8007272:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007276:	f84c 1b04 	str.w	r1, [ip], #4
 800727a:	dcec      	bgt.n	8007256 <__multadd+0x12>
 800727c:	b1d7      	cbz	r7, 80072b4 <__multadd+0x70>
 800727e:	68a3      	ldr	r3, [r4, #8]
 8007280:	42ab      	cmp	r3, r5
 8007282:	dc12      	bgt.n	80072aa <__multadd+0x66>
 8007284:	6861      	ldr	r1, [r4, #4]
 8007286:	4630      	mov	r0, r6
 8007288:	3101      	adds	r1, #1
 800728a:	f7ff ff90 	bl	80071ae <_Balloc>
 800728e:	6922      	ldr	r2, [r4, #16]
 8007290:	3202      	adds	r2, #2
 8007292:	f104 010c 	add.w	r1, r4, #12
 8007296:	4680      	mov	r8, r0
 8007298:	0092      	lsls	r2, r2, #2
 800729a:	300c      	adds	r0, #12
 800729c:	f7ff ff7c 	bl	8007198 <memcpy>
 80072a0:	4621      	mov	r1, r4
 80072a2:	4630      	mov	r0, r6
 80072a4:	f7ff ffb7 	bl	8007216 <_Bfree>
 80072a8:	4644      	mov	r4, r8
 80072aa:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80072ae:	3501      	adds	r5, #1
 80072b0:	615f      	str	r7, [r3, #20]
 80072b2:	6125      	str	r5, [r4, #16]
 80072b4:	4620      	mov	r0, r4
 80072b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080072ba <__s2b>:
 80072ba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072be:	460c      	mov	r4, r1
 80072c0:	4615      	mov	r5, r2
 80072c2:	461f      	mov	r7, r3
 80072c4:	2209      	movs	r2, #9
 80072c6:	3308      	adds	r3, #8
 80072c8:	4606      	mov	r6, r0
 80072ca:	fb93 f3f2 	sdiv	r3, r3, r2
 80072ce:	2100      	movs	r1, #0
 80072d0:	2201      	movs	r2, #1
 80072d2:	429a      	cmp	r2, r3
 80072d4:	db20      	blt.n	8007318 <__s2b+0x5e>
 80072d6:	4630      	mov	r0, r6
 80072d8:	f7ff ff69 	bl	80071ae <_Balloc>
 80072dc:	9b08      	ldr	r3, [sp, #32]
 80072de:	6143      	str	r3, [r0, #20]
 80072e0:	2d09      	cmp	r5, #9
 80072e2:	f04f 0301 	mov.w	r3, #1
 80072e6:	6103      	str	r3, [r0, #16]
 80072e8:	dd19      	ble.n	800731e <__s2b+0x64>
 80072ea:	f104 0809 	add.w	r8, r4, #9
 80072ee:	46c1      	mov	r9, r8
 80072f0:	442c      	add	r4, r5
 80072f2:	f819 3b01 	ldrb.w	r3, [r9], #1
 80072f6:	4601      	mov	r1, r0
 80072f8:	3b30      	subs	r3, #48	; 0x30
 80072fa:	220a      	movs	r2, #10
 80072fc:	4630      	mov	r0, r6
 80072fe:	f7ff ffa1 	bl	8007244 <__multadd>
 8007302:	45a1      	cmp	r9, r4
 8007304:	d1f5      	bne.n	80072f2 <__s2b+0x38>
 8007306:	eb08 0405 	add.w	r4, r8, r5
 800730a:	3c08      	subs	r4, #8
 800730c:	1b2d      	subs	r5, r5, r4
 800730e:	1963      	adds	r3, r4, r5
 8007310:	42bb      	cmp	r3, r7
 8007312:	db07      	blt.n	8007324 <__s2b+0x6a>
 8007314:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007318:	0052      	lsls	r2, r2, #1
 800731a:	3101      	adds	r1, #1
 800731c:	e7d9      	b.n	80072d2 <__s2b+0x18>
 800731e:	340a      	adds	r4, #10
 8007320:	2509      	movs	r5, #9
 8007322:	e7f3      	b.n	800730c <__s2b+0x52>
 8007324:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007328:	4601      	mov	r1, r0
 800732a:	3b30      	subs	r3, #48	; 0x30
 800732c:	220a      	movs	r2, #10
 800732e:	4630      	mov	r0, r6
 8007330:	f7ff ff88 	bl	8007244 <__multadd>
 8007334:	e7eb      	b.n	800730e <__s2b+0x54>

08007336 <__hi0bits>:
 8007336:	0c02      	lsrs	r2, r0, #16
 8007338:	0412      	lsls	r2, r2, #16
 800733a:	4603      	mov	r3, r0
 800733c:	b9b2      	cbnz	r2, 800736c <__hi0bits+0x36>
 800733e:	0403      	lsls	r3, r0, #16
 8007340:	2010      	movs	r0, #16
 8007342:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007346:	bf04      	itt	eq
 8007348:	021b      	lsleq	r3, r3, #8
 800734a:	3008      	addeq	r0, #8
 800734c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007350:	bf04      	itt	eq
 8007352:	011b      	lsleq	r3, r3, #4
 8007354:	3004      	addeq	r0, #4
 8007356:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800735a:	bf04      	itt	eq
 800735c:	009b      	lsleq	r3, r3, #2
 800735e:	3002      	addeq	r0, #2
 8007360:	2b00      	cmp	r3, #0
 8007362:	db06      	blt.n	8007372 <__hi0bits+0x3c>
 8007364:	005b      	lsls	r3, r3, #1
 8007366:	d503      	bpl.n	8007370 <__hi0bits+0x3a>
 8007368:	3001      	adds	r0, #1
 800736a:	4770      	bx	lr
 800736c:	2000      	movs	r0, #0
 800736e:	e7e8      	b.n	8007342 <__hi0bits+0xc>
 8007370:	2020      	movs	r0, #32
 8007372:	4770      	bx	lr

08007374 <__lo0bits>:
 8007374:	6803      	ldr	r3, [r0, #0]
 8007376:	f013 0207 	ands.w	r2, r3, #7
 800737a:	4601      	mov	r1, r0
 800737c:	d00b      	beq.n	8007396 <__lo0bits+0x22>
 800737e:	07da      	lsls	r2, r3, #31
 8007380:	d423      	bmi.n	80073ca <__lo0bits+0x56>
 8007382:	0798      	lsls	r0, r3, #30
 8007384:	bf49      	itett	mi
 8007386:	085b      	lsrmi	r3, r3, #1
 8007388:	089b      	lsrpl	r3, r3, #2
 800738a:	2001      	movmi	r0, #1
 800738c:	600b      	strmi	r3, [r1, #0]
 800738e:	bf5c      	itt	pl
 8007390:	600b      	strpl	r3, [r1, #0]
 8007392:	2002      	movpl	r0, #2
 8007394:	4770      	bx	lr
 8007396:	b298      	uxth	r0, r3
 8007398:	b9a8      	cbnz	r0, 80073c6 <__lo0bits+0x52>
 800739a:	0c1b      	lsrs	r3, r3, #16
 800739c:	2010      	movs	r0, #16
 800739e:	f013 0fff 	tst.w	r3, #255	; 0xff
 80073a2:	bf04      	itt	eq
 80073a4:	0a1b      	lsreq	r3, r3, #8
 80073a6:	3008      	addeq	r0, #8
 80073a8:	071a      	lsls	r2, r3, #28
 80073aa:	bf04      	itt	eq
 80073ac:	091b      	lsreq	r3, r3, #4
 80073ae:	3004      	addeq	r0, #4
 80073b0:	079a      	lsls	r2, r3, #30
 80073b2:	bf04      	itt	eq
 80073b4:	089b      	lsreq	r3, r3, #2
 80073b6:	3002      	addeq	r0, #2
 80073b8:	07da      	lsls	r2, r3, #31
 80073ba:	d402      	bmi.n	80073c2 <__lo0bits+0x4e>
 80073bc:	085b      	lsrs	r3, r3, #1
 80073be:	d006      	beq.n	80073ce <__lo0bits+0x5a>
 80073c0:	3001      	adds	r0, #1
 80073c2:	600b      	str	r3, [r1, #0]
 80073c4:	4770      	bx	lr
 80073c6:	4610      	mov	r0, r2
 80073c8:	e7e9      	b.n	800739e <__lo0bits+0x2a>
 80073ca:	2000      	movs	r0, #0
 80073cc:	4770      	bx	lr
 80073ce:	2020      	movs	r0, #32
 80073d0:	4770      	bx	lr

080073d2 <__i2b>:
 80073d2:	b510      	push	{r4, lr}
 80073d4:	460c      	mov	r4, r1
 80073d6:	2101      	movs	r1, #1
 80073d8:	f7ff fee9 	bl	80071ae <_Balloc>
 80073dc:	2201      	movs	r2, #1
 80073de:	6144      	str	r4, [r0, #20]
 80073e0:	6102      	str	r2, [r0, #16]
 80073e2:	bd10      	pop	{r4, pc}

080073e4 <__multiply>:
 80073e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073e8:	4614      	mov	r4, r2
 80073ea:	690a      	ldr	r2, [r1, #16]
 80073ec:	6923      	ldr	r3, [r4, #16]
 80073ee:	429a      	cmp	r2, r3
 80073f0:	bfb8      	it	lt
 80073f2:	460b      	movlt	r3, r1
 80073f4:	4688      	mov	r8, r1
 80073f6:	bfbc      	itt	lt
 80073f8:	46a0      	movlt	r8, r4
 80073fa:	461c      	movlt	r4, r3
 80073fc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007400:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007404:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007408:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800740c:	eb07 0609 	add.w	r6, r7, r9
 8007410:	42b3      	cmp	r3, r6
 8007412:	bfb8      	it	lt
 8007414:	3101      	addlt	r1, #1
 8007416:	f7ff feca 	bl	80071ae <_Balloc>
 800741a:	f100 0514 	add.w	r5, r0, #20
 800741e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8007422:	462b      	mov	r3, r5
 8007424:	2200      	movs	r2, #0
 8007426:	4573      	cmp	r3, lr
 8007428:	d316      	bcc.n	8007458 <__multiply+0x74>
 800742a:	f104 0214 	add.w	r2, r4, #20
 800742e:	f108 0114 	add.w	r1, r8, #20
 8007432:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007436:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800743a:	9300      	str	r3, [sp, #0]
 800743c:	9b00      	ldr	r3, [sp, #0]
 800743e:	9201      	str	r2, [sp, #4]
 8007440:	4293      	cmp	r3, r2
 8007442:	d80c      	bhi.n	800745e <__multiply+0x7a>
 8007444:	2e00      	cmp	r6, #0
 8007446:	dd03      	ble.n	8007450 <__multiply+0x6c>
 8007448:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800744c:	2b00      	cmp	r3, #0
 800744e:	d05d      	beq.n	800750c <__multiply+0x128>
 8007450:	6106      	str	r6, [r0, #16]
 8007452:	b003      	add	sp, #12
 8007454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007458:	f843 2b04 	str.w	r2, [r3], #4
 800745c:	e7e3      	b.n	8007426 <__multiply+0x42>
 800745e:	f8b2 b000 	ldrh.w	fp, [r2]
 8007462:	f1bb 0f00 	cmp.w	fp, #0
 8007466:	d023      	beq.n	80074b0 <__multiply+0xcc>
 8007468:	4689      	mov	r9, r1
 800746a:	46ac      	mov	ip, r5
 800746c:	f04f 0800 	mov.w	r8, #0
 8007470:	f859 4b04 	ldr.w	r4, [r9], #4
 8007474:	f8dc a000 	ldr.w	sl, [ip]
 8007478:	b2a3      	uxth	r3, r4
 800747a:	fa1f fa8a 	uxth.w	sl, sl
 800747e:	fb0b a303 	mla	r3, fp, r3, sl
 8007482:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007486:	f8dc 4000 	ldr.w	r4, [ip]
 800748a:	4443      	add	r3, r8
 800748c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007490:	fb0b 840a 	mla	r4, fp, sl, r8
 8007494:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007498:	46e2      	mov	sl, ip
 800749a:	b29b      	uxth	r3, r3
 800749c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80074a0:	454f      	cmp	r7, r9
 80074a2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80074a6:	f84a 3b04 	str.w	r3, [sl], #4
 80074aa:	d82b      	bhi.n	8007504 <__multiply+0x120>
 80074ac:	f8cc 8004 	str.w	r8, [ip, #4]
 80074b0:	9b01      	ldr	r3, [sp, #4]
 80074b2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80074b6:	3204      	adds	r2, #4
 80074b8:	f1ba 0f00 	cmp.w	sl, #0
 80074bc:	d020      	beq.n	8007500 <__multiply+0x11c>
 80074be:	682b      	ldr	r3, [r5, #0]
 80074c0:	4689      	mov	r9, r1
 80074c2:	46a8      	mov	r8, r5
 80074c4:	f04f 0b00 	mov.w	fp, #0
 80074c8:	f8b9 c000 	ldrh.w	ip, [r9]
 80074cc:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80074d0:	fb0a 440c 	mla	r4, sl, ip, r4
 80074d4:	445c      	add	r4, fp
 80074d6:	46c4      	mov	ip, r8
 80074d8:	b29b      	uxth	r3, r3
 80074da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80074de:	f84c 3b04 	str.w	r3, [ip], #4
 80074e2:	f859 3b04 	ldr.w	r3, [r9], #4
 80074e6:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80074ea:	0c1b      	lsrs	r3, r3, #16
 80074ec:	fb0a b303 	mla	r3, sl, r3, fp
 80074f0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80074f4:	454f      	cmp	r7, r9
 80074f6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80074fa:	d805      	bhi.n	8007508 <__multiply+0x124>
 80074fc:	f8c8 3004 	str.w	r3, [r8, #4]
 8007500:	3504      	adds	r5, #4
 8007502:	e79b      	b.n	800743c <__multiply+0x58>
 8007504:	46d4      	mov	ip, sl
 8007506:	e7b3      	b.n	8007470 <__multiply+0x8c>
 8007508:	46e0      	mov	r8, ip
 800750a:	e7dd      	b.n	80074c8 <__multiply+0xe4>
 800750c:	3e01      	subs	r6, #1
 800750e:	e799      	b.n	8007444 <__multiply+0x60>

08007510 <__pow5mult>:
 8007510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007514:	4615      	mov	r5, r2
 8007516:	f012 0203 	ands.w	r2, r2, #3
 800751a:	4606      	mov	r6, r0
 800751c:	460f      	mov	r7, r1
 800751e:	d007      	beq.n	8007530 <__pow5mult+0x20>
 8007520:	3a01      	subs	r2, #1
 8007522:	4c21      	ldr	r4, [pc, #132]	; (80075a8 <__pow5mult+0x98>)
 8007524:	2300      	movs	r3, #0
 8007526:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800752a:	f7ff fe8b 	bl	8007244 <__multadd>
 800752e:	4607      	mov	r7, r0
 8007530:	10ad      	asrs	r5, r5, #2
 8007532:	d035      	beq.n	80075a0 <__pow5mult+0x90>
 8007534:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007536:	b93c      	cbnz	r4, 8007548 <__pow5mult+0x38>
 8007538:	2010      	movs	r0, #16
 800753a:	f7ff fe13 	bl	8007164 <malloc>
 800753e:	6270      	str	r0, [r6, #36]	; 0x24
 8007540:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007544:	6004      	str	r4, [r0, #0]
 8007546:	60c4      	str	r4, [r0, #12]
 8007548:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800754c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007550:	b94c      	cbnz	r4, 8007566 <__pow5mult+0x56>
 8007552:	f240 2171 	movw	r1, #625	; 0x271
 8007556:	4630      	mov	r0, r6
 8007558:	f7ff ff3b 	bl	80073d2 <__i2b>
 800755c:	2300      	movs	r3, #0
 800755e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007562:	4604      	mov	r4, r0
 8007564:	6003      	str	r3, [r0, #0]
 8007566:	f04f 0800 	mov.w	r8, #0
 800756a:	07eb      	lsls	r3, r5, #31
 800756c:	d50a      	bpl.n	8007584 <__pow5mult+0x74>
 800756e:	4639      	mov	r1, r7
 8007570:	4622      	mov	r2, r4
 8007572:	4630      	mov	r0, r6
 8007574:	f7ff ff36 	bl	80073e4 <__multiply>
 8007578:	4639      	mov	r1, r7
 800757a:	4681      	mov	r9, r0
 800757c:	4630      	mov	r0, r6
 800757e:	f7ff fe4a 	bl	8007216 <_Bfree>
 8007582:	464f      	mov	r7, r9
 8007584:	106d      	asrs	r5, r5, #1
 8007586:	d00b      	beq.n	80075a0 <__pow5mult+0x90>
 8007588:	6820      	ldr	r0, [r4, #0]
 800758a:	b938      	cbnz	r0, 800759c <__pow5mult+0x8c>
 800758c:	4622      	mov	r2, r4
 800758e:	4621      	mov	r1, r4
 8007590:	4630      	mov	r0, r6
 8007592:	f7ff ff27 	bl	80073e4 <__multiply>
 8007596:	6020      	str	r0, [r4, #0]
 8007598:	f8c0 8000 	str.w	r8, [r0]
 800759c:	4604      	mov	r4, r0
 800759e:	e7e4      	b.n	800756a <__pow5mult+0x5a>
 80075a0:	4638      	mov	r0, r7
 80075a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075a6:	bf00      	nop
 80075a8:	08008088 	.word	0x08008088

080075ac <__lshift>:
 80075ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075b0:	460c      	mov	r4, r1
 80075b2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80075b6:	6923      	ldr	r3, [r4, #16]
 80075b8:	6849      	ldr	r1, [r1, #4]
 80075ba:	eb0a 0903 	add.w	r9, sl, r3
 80075be:	68a3      	ldr	r3, [r4, #8]
 80075c0:	4607      	mov	r7, r0
 80075c2:	4616      	mov	r6, r2
 80075c4:	f109 0501 	add.w	r5, r9, #1
 80075c8:	42ab      	cmp	r3, r5
 80075ca:	db32      	blt.n	8007632 <__lshift+0x86>
 80075cc:	4638      	mov	r0, r7
 80075ce:	f7ff fdee 	bl	80071ae <_Balloc>
 80075d2:	2300      	movs	r3, #0
 80075d4:	4680      	mov	r8, r0
 80075d6:	f100 0114 	add.w	r1, r0, #20
 80075da:	461a      	mov	r2, r3
 80075dc:	4553      	cmp	r3, sl
 80075de:	db2b      	blt.n	8007638 <__lshift+0x8c>
 80075e0:	6920      	ldr	r0, [r4, #16]
 80075e2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80075e6:	f104 0314 	add.w	r3, r4, #20
 80075ea:	f016 021f 	ands.w	r2, r6, #31
 80075ee:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80075f2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80075f6:	d025      	beq.n	8007644 <__lshift+0x98>
 80075f8:	f1c2 0e20 	rsb	lr, r2, #32
 80075fc:	2000      	movs	r0, #0
 80075fe:	681e      	ldr	r6, [r3, #0]
 8007600:	468a      	mov	sl, r1
 8007602:	4096      	lsls	r6, r2
 8007604:	4330      	orrs	r0, r6
 8007606:	f84a 0b04 	str.w	r0, [sl], #4
 800760a:	f853 0b04 	ldr.w	r0, [r3], #4
 800760e:	459c      	cmp	ip, r3
 8007610:	fa20 f00e 	lsr.w	r0, r0, lr
 8007614:	d814      	bhi.n	8007640 <__lshift+0x94>
 8007616:	6048      	str	r0, [r1, #4]
 8007618:	b108      	cbz	r0, 800761e <__lshift+0x72>
 800761a:	f109 0502 	add.w	r5, r9, #2
 800761e:	3d01      	subs	r5, #1
 8007620:	4638      	mov	r0, r7
 8007622:	f8c8 5010 	str.w	r5, [r8, #16]
 8007626:	4621      	mov	r1, r4
 8007628:	f7ff fdf5 	bl	8007216 <_Bfree>
 800762c:	4640      	mov	r0, r8
 800762e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007632:	3101      	adds	r1, #1
 8007634:	005b      	lsls	r3, r3, #1
 8007636:	e7c7      	b.n	80075c8 <__lshift+0x1c>
 8007638:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800763c:	3301      	adds	r3, #1
 800763e:	e7cd      	b.n	80075dc <__lshift+0x30>
 8007640:	4651      	mov	r1, sl
 8007642:	e7dc      	b.n	80075fe <__lshift+0x52>
 8007644:	3904      	subs	r1, #4
 8007646:	f853 2b04 	ldr.w	r2, [r3], #4
 800764a:	f841 2f04 	str.w	r2, [r1, #4]!
 800764e:	459c      	cmp	ip, r3
 8007650:	d8f9      	bhi.n	8007646 <__lshift+0x9a>
 8007652:	e7e4      	b.n	800761e <__lshift+0x72>

08007654 <__mcmp>:
 8007654:	6903      	ldr	r3, [r0, #16]
 8007656:	690a      	ldr	r2, [r1, #16]
 8007658:	1a9b      	subs	r3, r3, r2
 800765a:	b530      	push	{r4, r5, lr}
 800765c:	d10c      	bne.n	8007678 <__mcmp+0x24>
 800765e:	0092      	lsls	r2, r2, #2
 8007660:	3014      	adds	r0, #20
 8007662:	3114      	adds	r1, #20
 8007664:	1884      	adds	r4, r0, r2
 8007666:	4411      	add	r1, r2
 8007668:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800766c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007670:	4295      	cmp	r5, r2
 8007672:	d003      	beq.n	800767c <__mcmp+0x28>
 8007674:	d305      	bcc.n	8007682 <__mcmp+0x2e>
 8007676:	2301      	movs	r3, #1
 8007678:	4618      	mov	r0, r3
 800767a:	bd30      	pop	{r4, r5, pc}
 800767c:	42a0      	cmp	r0, r4
 800767e:	d3f3      	bcc.n	8007668 <__mcmp+0x14>
 8007680:	e7fa      	b.n	8007678 <__mcmp+0x24>
 8007682:	f04f 33ff 	mov.w	r3, #4294967295
 8007686:	e7f7      	b.n	8007678 <__mcmp+0x24>

08007688 <__mdiff>:
 8007688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800768c:	460d      	mov	r5, r1
 800768e:	4607      	mov	r7, r0
 8007690:	4611      	mov	r1, r2
 8007692:	4628      	mov	r0, r5
 8007694:	4614      	mov	r4, r2
 8007696:	f7ff ffdd 	bl	8007654 <__mcmp>
 800769a:	1e06      	subs	r6, r0, #0
 800769c:	d108      	bne.n	80076b0 <__mdiff+0x28>
 800769e:	4631      	mov	r1, r6
 80076a0:	4638      	mov	r0, r7
 80076a2:	f7ff fd84 	bl	80071ae <_Balloc>
 80076a6:	2301      	movs	r3, #1
 80076a8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80076ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076b0:	bfa4      	itt	ge
 80076b2:	4623      	movge	r3, r4
 80076b4:	462c      	movge	r4, r5
 80076b6:	4638      	mov	r0, r7
 80076b8:	6861      	ldr	r1, [r4, #4]
 80076ba:	bfa6      	itte	ge
 80076bc:	461d      	movge	r5, r3
 80076be:	2600      	movge	r6, #0
 80076c0:	2601      	movlt	r6, #1
 80076c2:	f7ff fd74 	bl	80071ae <_Balloc>
 80076c6:	692b      	ldr	r3, [r5, #16]
 80076c8:	60c6      	str	r6, [r0, #12]
 80076ca:	6926      	ldr	r6, [r4, #16]
 80076cc:	f105 0914 	add.w	r9, r5, #20
 80076d0:	f104 0214 	add.w	r2, r4, #20
 80076d4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80076d8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80076dc:	f100 0514 	add.w	r5, r0, #20
 80076e0:	f04f 0e00 	mov.w	lr, #0
 80076e4:	f852 ab04 	ldr.w	sl, [r2], #4
 80076e8:	f859 4b04 	ldr.w	r4, [r9], #4
 80076ec:	fa1e f18a 	uxtah	r1, lr, sl
 80076f0:	b2a3      	uxth	r3, r4
 80076f2:	1ac9      	subs	r1, r1, r3
 80076f4:	0c23      	lsrs	r3, r4, #16
 80076f6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80076fa:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80076fe:	b289      	uxth	r1, r1
 8007700:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007704:	45c8      	cmp	r8, r9
 8007706:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800770a:	4694      	mov	ip, r2
 800770c:	f845 3b04 	str.w	r3, [r5], #4
 8007710:	d8e8      	bhi.n	80076e4 <__mdiff+0x5c>
 8007712:	45bc      	cmp	ip, r7
 8007714:	d304      	bcc.n	8007720 <__mdiff+0x98>
 8007716:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800771a:	b183      	cbz	r3, 800773e <__mdiff+0xb6>
 800771c:	6106      	str	r6, [r0, #16]
 800771e:	e7c5      	b.n	80076ac <__mdiff+0x24>
 8007720:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007724:	fa1e f381 	uxtah	r3, lr, r1
 8007728:	141a      	asrs	r2, r3, #16
 800772a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800772e:	b29b      	uxth	r3, r3
 8007730:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007734:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8007738:	f845 3b04 	str.w	r3, [r5], #4
 800773c:	e7e9      	b.n	8007712 <__mdiff+0x8a>
 800773e:	3e01      	subs	r6, #1
 8007740:	e7e9      	b.n	8007716 <__mdiff+0x8e>
	...

08007744 <__ulp>:
 8007744:	4b12      	ldr	r3, [pc, #72]	; (8007790 <__ulp+0x4c>)
 8007746:	ee10 2a90 	vmov	r2, s1
 800774a:	401a      	ands	r2, r3
 800774c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8007750:	2b00      	cmp	r3, #0
 8007752:	dd04      	ble.n	800775e <__ulp+0x1a>
 8007754:	2000      	movs	r0, #0
 8007756:	4619      	mov	r1, r3
 8007758:	ec41 0b10 	vmov	d0, r0, r1
 800775c:	4770      	bx	lr
 800775e:	425b      	negs	r3, r3
 8007760:	151b      	asrs	r3, r3, #20
 8007762:	2b13      	cmp	r3, #19
 8007764:	f04f 0000 	mov.w	r0, #0
 8007768:	f04f 0100 	mov.w	r1, #0
 800776c:	dc04      	bgt.n	8007778 <__ulp+0x34>
 800776e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007772:	fa42 f103 	asr.w	r1, r2, r3
 8007776:	e7ef      	b.n	8007758 <__ulp+0x14>
 8007778:	3b14      	subs	r3, #20
 800777a:	2b1e      	cmp	r3, #30
 800777c:	f04f 0201 	mov.w	r2, #1
 8007780:	bfda      	itte	le
 8007782:	f1c3 031f 	rsble	r3, r3, #31
 8007786:	fa02 f303 	lslle.w	r3, r2, r3
 800778a:	4613      	movgt	r3, r2
 800778c:	4618      	mov	r0, r3
 800778e:	e7e3      	b.n	8007758 <__ulp+0x14>
 8007790:	7ff00000 	.word	0x7ff00000

08007794 <__b2d>:
 8007794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007796:	6905      	ldr	r5, [r0, #16]
 8007798:	f100 0714 	add.w	r7, r0, #20
 800779c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80077a0:	1f2e      	subs	r6, r5, #4
 80077a2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80077a6:	4620      	mov	r0, r4
 80077a8:	f7ff fdc5 	bl	8007336 <__hi0bits>
 80077ac:	f1c0 0320 	rsb	r3, r0, #32
 80077b0:	280a      	cmp	r0, #10
 80077b2:	600b      	str	r3, [r1, #0]
 80077b4:	f8df c074 	ldr.w	ip, [pc, #116]	; 800782c <__b2d+0x98>
 80077b8:	dc14      	bgt.n	80077e4 <__b2d+0x50>
 80077ba:	f1c0 0e0b 	rsb	lr, r0, #11
 80077be:	fa24 f10e 	lsr.w	r1, r4, lr
 80077c2:	42b7      	cmp	r7, r6
 80077c4:	ea41 030c 	orr.w	r3, r1, ip
 80077c8:	bf34      	ite	cc
 80077ca:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80077ce:	2100      	movcs	r1, #0
 80077d0:	3015      	adds	r0, #21
 80077d2:	fa04 f000 	lsl.w	r0, r4, r0
 80077d6:	fa21 f10e 	lsr.w	r1, r1, lr
 80077da:	ea40 0201 	orr.w	r2, r0, r1
 80077de:	ec43 2b10 	vmov	d0, r2, r3
 80077e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077e4:	42b7      	cmp	r7, r6
 80077e6:	bf3a      	itte	cc
 80077e8:	f1a5 0608 	subcc.w	r6, r5, #8
 80077ec:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80077f0:	2100      	movcs	r1, #0
 80077f2:	380b      	subs	r0, #11
 80077f4:	d015      	beq.n	8007822 <__b2d+0x8e>
 80077f6:	4084      	lsls	r4, r0
 80077f8:	f1c0 0520 	rsb	r5, r0, #32
 80077fc:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8007800:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8007804:	42be      	cmp	r6, r7
 8007806:	fa21 fc05 	lsr.w	ip, r1, r5
 800780a:	ea44 030c 	orr.w	r3, r4, ip
 800780e:	bf8c      	ite	hi
 8007810:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007814:	2400      	movls	r4, #0
 8007816:	fa01 f000 	lsl.w	r0, r1, r0
 800781a:	40ec      	lsrs	r4, r5
 800781c:	ea40 0204 	orr.w	r2, r0, r4
 8007820:	e7dd      	b.n	80077de <__b2d+0x4a>
 8007822:	ea44 030c 	orr.w	r3, r4, ip
 8007826:	460a      	mov	r2, r1
 8007828:	e7d9      	b.n	80077de <__b2d+0x4a>
 800782a:	bf00      	nop
 800782c:	3ff00000 	.word	0x3ff00000

08007830 <__d2b>:
 8007830:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007834:	460e      	mov	r6, r1
 8007836:	2101      	movs	r1, #1
 8007838:	ec59 8b10 	vmov	r8, r9, d0
 800783c:	4615      	mov	r5, r2
 800783e:	f7ff fcb6 	bl	80071ae <_Balloc>
 8007842:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007846:	4607      	mov	r7, r0
 8007848:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800784c:	bb34      	cbnz	r4, 800789c <__d2b+0x6c>
 800784e:	9301      	str	r3, [sp, #4]
 8007850:	f1b8 0300 	subs.w	r3, r8, #0
 8007854:	d027      	beq.n	80078a6 <__d2b+0x76>
 8007856:	a802      	add	r0, sp, #8
 8007858:	f840 3d08 	str.w	r3, [r0, #-8]!
 800785c:	f7ff fd8a 	bl	8007374 <__lo0bits>
 8007860:	9900      	ldr	r1, [sp, #0]
 8007862:	b1f0      	cbz	r0, 80078a2 <__d2b+0x72>
 8007864:	9a01      	ldr	r2, [sp, #4]
 8007866:	f1c0 0320 	rsb	r3, r0, #32
 800786a:	fa02 f303 	lsl.w	r3, r2, r3
 800786e:	430b      	orrs	r3, r1
 8007870:	40c2      	lsrs	r2, r0
 8007872:	617b      	str	r3, [r7, #20]
 8007874:	9201      	str	r2, [sp, #4]
 8007876:	9b01      	ldr	r3, [sp, #4]
 8007878:	61bb      	str	r3, [r7, #24]
 800787a:	2b00      	cmp	r3, #0
 800787c:	bf14      	ite	ne
 800787e:	2102      	movne	r1, #2
 8007880:	2101      	moveq	r1, #1
 8007882:	6139      	str	r1, [r7, #16]
 8007884:	b1c4      	cbz	r4, 80078b8 <__d2b+0x88>
 8007886:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800788a:	4404      	add	r4, r0
 800788c:	6034      	str	r4, [r6, #0]
 800788e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007892:	6028      	str	r0, [r5, #0]
 8007894:	4638      	mov	r0, r7
 8007896:	b003      	add	sp, #12
 8007898:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800789c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80078a0:	e7d5      	b.n	800784e <__d2b+0x1e>
 80078a2:	6179      	str	r1, [r7, #20]
 80078a4:	e7e7      	b.n	8007876 <__d2b+0x46>
 80078a6:	a801      	add	r0, sp, #4
 80078a8:	f7ff fd64 	bl	8007374 <__lo0bits>
 80078ac:	9b01      	ldr	r3, [sp, #4]
 80078ae:	617b      	str	r3, [r7, #20]
 80078b0:	2101      	movs	r1, #1
 80078b2:	6139      	str	r1, [r7, #16]
 80078b4:	3020      	adds	r0, #32
 80078b6:	e7e5      	b.n	8007884 <__d2b+0x54>
 80078b8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80078bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80078c0:	6030      	str	r0, [r6, #0]
 80078c2:	6918      	ldr	r0, [r3, #16]
 80078c4:	f7ff fd37 	bl	8007336 <__hi0bits>
 80078c8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80078cc:	e7e1      	b.n	8007892 <__d2b+0x62>

080078ce <__ratio>:
 80078ce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078d2:	4688      	mov	r8, r1
 80078d4:	4669      	mov	r1, sp
 80078d6:	4681      	mov	r9, r0
 80078d8:	f7ff ff5c 	bl	8007794 <__b2d>
 80078dc:	a901      	add	r1, sp, #4
 80078de:	4640      	mov	r0, r8
 80078e0:	ec57 6b10 	vmov	r6, r7, d0
 80078e4:	f7ff ff56 	bl	8007794 <__b2d>
 80078e8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80078ec:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80078f0:	eba3 0c02 	sub.w	ip, r3, r2
 80078f4:	e9dd 3200 	ldrd	r3, r2, [sp]
 80078f8:	1a9b      	subs	r3, r3, r2
 80078fa:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80078fe:	ec5b ab10 	vmov	sl, fp, d0
 8007902:	2b00      	cmp	r3, #0
 8007904:	bfce      	itee	gt
 8007906:	463a      	movgt	r2, r7
 8007908:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800790c:	465a      	movle	r2, fp
 800790e:	4659      	mov	r1, fp
 8007910:	463d      	mov	r5, r7
 8007912:	bfd4      	ite	le
 8007914:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8007918:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800791c:	4630      	mov	r0, r6
 800791e:	ee10 2a10 	vmov	r2, s0
 8007922:	460b      	mov	r3, r1
 8007924:	4629      	mov	r1, r5
 8007926:	f7f8 ffb9 	bl	800089c <__aeabi_ddiv>
 800792a:	ec41 0b10 	vmov	d0, r0, r1
 800792e:	b003      	add	sp, #12
 8007930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007934 <__copybits>:
 8007934:	3901      	subs	r1, #1
 8007936:	b510      	push	{r4, lr}
 8007938:	1149      	asrs	r1, r1, #5
 800793a:	6914      	ldr	r4, [r2, #16]
 800793c:	3101      	adds	r1, #1
 800793e:	f102 0314 	add.w	r3, r2, #20
 8007942:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007946:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800794a:	42a3      	cmp	r3, r4
 800794c:	4602      	mov	r2, r0
 800794e:	d303      	bcc.n	8007958 <__copybits+0x24>
 8007950:	2300      	movs	r3, #0
 8007952:	428a      	cmp	r2, r1
 8007954:	d305      	bcc.n	8007962 <__copybits+0x2e>
 8007956:	bd10      	pop	{r4, pc}
 8007958:	f853 2b04 	ldr.w	r2, [r3], #4
 800795c:	f840 2b04 	str.w	r2, [r0], #4
 8007960:	e7f3      	b.n	800794a <__copybits+0x16>
 8007962:	f842 3b04 	str.w	r3, [r2], #4
 8007966:	e7f4      	b.n	8007952 <__copybits+0x1e>

08007968 <__any_on>:
 8007968:	f100 0214 	add.w	r2, r0, #20
 800796c:	6900      	ldr	r0, [r0, #16]
 800796e:	114b      	asrs	r3, r1, #5
 8007970:	4298      	cmp	r0, r3
 8007972:	b510      	push	{r4, lr}
 8007974:	db11      	blt.n	800799a <__any_on+0x32>
 8007976:	dd0a      	ble.n	800798e <__any_on+0x26>
 8007978:	f011 011f 	ands.w	r1, r1, #31
 800797c:	d007      	beq.n	800798e <__any_on+0x26>
 800797e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007982:	fa24 f001 	lsr.w	r0, r4, r1
 8007986:	fa00 f101 	lsl.w	r1, r0, r1
 800798a:	428c      	cmp	r4, r1
 800798c:	d10b      	bne.n	80079a6 <__any_on+0x3e>
 800798e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007992:	4293      	cmp	r3, r2
 8007994:	d803      	bhi.n	800799e <__any_on+0x36>
 8007996:	2000      	movs	r0, #0
 8007998:	bd10      	pop	{r4, pc}
 800799a:	4603      	mov	r3, r0
 800799c:	e7f7      	b.n	800798e <__any_on+0x26>
 800799e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80079a2:	2900      	cmp	r1, #0
 80079a4:	d0f5      	beq.n	8007992 <__any_on+0x2a>
 80079a6:	2001      	movs	r0, #1
 80079a8:	e7f6      	b.n	8007998 <__any_on+0x30>

080079aa <_calloc_r>:
 80079aa:	b538      	push	{r3, r4, r5, lr}
 80079ac:	fb02 f401 	mul.w	r4, r2, r1
 80079b0:	4621      	mov	r1, r4
 80079b2:	f000 f857 	bl	8007a64 <_malloc_r>
 80079b6:	4605      	mov	r5, r0
 80079b8:	b118      	cbz	r0, 80079c2 <_calloc_r+0x18>
 80079ba:	4622      	mov	r2, r4
 80079bc:	2100      	movs	r1, #0
 80079be:	f7fc fd37 	bl	8004430 <memset>
 80079c2:	4628      	mov	r0, r5
 80079c4:	bd38      	pop	{r3, r4, r5, pc}
	...

080079c8 <_free_r>:
 80079c8:	b538      	push	{r3, r4, r5, lr}
 80079ca:	4605      	mov	r5, r0
 80079cc:	2900      	cmp	r1, #0
 80079ce:	d045      	beq.n	8007a5c <_free_r+0x94>
 80079d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079d4:	1f0c      	subs	r4, r1, #4
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	bfb8      	it	lt
 80079da:	18e4      	addlt	r4, r4, r3
 80079dc:	f000 fa36 	bl	8007e4c <__malloc_lock>
 80079e0:	4a1f      	ldr	r2, [pc, #124]	; (8007a60 <_free_r+0x98>)
 80079e2:	6813      	ldr	r3, [r2, #0]
 80079e4:	4610      	mov	r0, r2
 80079e6:	b933      	cbnz	r3, 80079f6 <_free_r+0x2e>
 80079e8:	6063      	str	r3, [r4, #4]
 80079ea:	6014      	str	r4, [r2, #0]
 80079ec:	4628      	mov	r0, r5
 80079ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079f2:	f000 ba2c 	b.w	8007e4e <__malloc_unlock>
 80079f6:	42a3      	cmp	r3, r4
 80079f8:	d90c      	bls.n	8007a14 <_free_r+0x4c>
 80079fa:	6821      	ldr	r1, [r4, #0]
 80079fc:	1862      	adds	r2, r4, r1
 80079fe:	4293      	cmp	r3, r2
 8007a00:	bf04      	itt	eq
 8007a02:	681a      	ldreq	r2, [r3, #0]
 8007a04:	685b      	ldreq	r3, [r3, #4]
 8007a06:	6063      	str	r3, [r4, #4]
 8007a08:	bf04      	itt	eq
 8007a0a:	1852      	addeq	r2, r2, r1
 8007a0c:	6022      	streq	r2, [r4, #0]
 8007a0e:	6004      	str	r4, [r0, #0]
 8007a10:	e7ec      	b.n	80079ec <_free_r+0x24>
 8007a12:	4613      	mov	r3, r2
 8007a14:	685a      	ldr	r2, [r3, #4]
 8007a16:	b10a      	cbz	r2, 8007a1c <_free_r+0x54>
 8007a18:	42a2      	cmp	r2, r4
 8007a1a:	d9fa      	bls.n	8007a12 <_free_r+0x4a>
 8007a1c:	6819      	ldr	r1, [r3, #0]
 8007a1e:	1858      	adds	r0, r3, r1
 8007a20:	42a0      	cmp	r0, r4
 8007a22:	d10b      	bne.n	8007a3c <_free_r+0x74>
 8007a24:	6820      	ldr	r0, [r4, #0]
 8007a26:	4401      	add	r1, r0
 8007a28:	1858      	adds	r0, r3, r1
 8007a2a:	4282      	cmp	r2, r0
 8007a2c:	6019      	str	r1, [r3, #0]
 8007a2e:	d1dd      	bne.n	80079ec <_free_r+0x24>
 8007a30:	6810      	ldr	r0, [r2, #0]
 8007a32:	6852      	ldr	r2, [r2, #4]
 8007a34:	605a      	str	r2, [r3, #4]
 8007a36:	4401      	add	r1, r0
 8007a38:	6019      	str	r1, [r3, #0]
 8007a3a:	e7d7      	b.n	80079ec <_free_r+0x24>
 8007a3c:	d902      	bls.n	8007a44 <_free_r+0x7c>
 8007a3e:	230c      	movs	r3, #12
 8007a40:	602b      	str	r3, [r5, #0]
 8007a42:	e7d3      	b.n	80079ec <_free_r+0x24>
 8007a44:	6820      	ldr	r0, [r4, #0]
 8007a46:	1821      	adds	r1, r4, r0
 8007a48:	428a      	cmp	r2, r1
 8007a4a:	bf04      	itt	eq
 8007a4c:	6811      	ldreq	r1, [r2, #0]
 8007a4e:	6852      	ldreq	r2, [r2, #4]
 8007a50:	6062      	str	r2, [r4, #4]
 8007a52:	bf04      	itt	eq
 8007a54:	1809      	addeq	r1, r1, r0
 8007a56:	6021      	streq	r1, [r4, #0]
 8007a58:	605c      	str	r4, [r3, #4]
 8007a5a:	e7c7      	b.n	80079ec <_free_r+0x24>
 8007a5c:	bd38      	pop	{r3, r4, r5, pc}
 8007a5e:	bf00      	nop
 8007a60:	2000040c 	.word	0x2000040c

08007a64 <_malloc_r>:
 8007a64:	b570      	push	{r4, r5, r6, lr}
 8007a66:	1ccd      	adds	r5, r1, #3
 8007a68:	f025 0503 	bic.w	r5, r5, #3
 8007a6c:	3508      	adds	r5, #8
 8007a6e:	2d0c      	cmp	r5, #12
 8007a70:	bf38      	it	cc
 8007a72:	250c      	movcc	r5, #12
 8007a74:	2d00      	cmp	r5, #0
 8007a76:	4606      	mov	r6, r0
 8007a78:	db01      	blt.n	8007a7e <_malloc_r+0x1a>
 8007a7a:	42a9      	cmp	r1, r5
 8007a7c:	d903      	bls.n	8007a86 <_malloc_r+0x22>
 8007a7e:	230c      	movs	r3, #12
 8007a80:	6033      	str	r3, [r6, #0]
 8007a82:	2000      	movs	r0, #0
 8007a84:	bd70      	pop	{r4, r5, r6, pc}
 8007a86:	f000 f9e1 	bl	8007e4c <__malloc_lock>
 8007a8a:	4a21      	ldr	r2, [pc, #132]	; (8007b10 <_malloc_r+0xac>)
 8007a8c:	6814      	ldr	r4, [r2, #0]
 8007a8e:	4621      	mov	r1, r4
 8007a90:	b991      	cbnz	r1, 8007ab8 <_malloc_r+0x54>
 8007a92:	4c20      	ldr	r4, [pc, #128]	; (8007b14 <_malloc_r+0xb0>)
 8007a94:	6823      	ldr	r3, [r4, #0]
 8007a96:	b91b      	cbnz	r3, 8007aa0 <_malloc_r+0x3c>
 8007a98:	4630      	mov	r0, r6
 8007a9a:	f000 f98f 	bl	8007dbc <_sbrk_r>
 8007a9e:	6020      	str	r0, [r4, #0]
 8007aa0:	4629      	mov	r1, r5
 8007aa2:	4630      	mov	r0, r6
 8007aa4:	f000 f98a 	bl	8007dbc <_sbrk_r>
 8007aa8:	1c43      	adds	r3, r0, #1
 8007aaa:	d124      	bne.n	8007af6 <_malloc_r+0x92>
 8007aac:	230c      	movs	r3, #12
 8007aae:	6033      	str	r3, [r6, #0]
 8007ab0:	4630      	mov	r0, r6
 8007ab2:	f000 f9cc 	bl	8007e4e <__malloc_unlock>
 8007ab6:	e7e4      	b.n	8007a82 <_malloc_r+0x1e>
 8007ab8:	680b      	ldr	r3, [r1, #0]
 8007aba:	1b5b      	subs	r3, r3, r5
 8007abc:	d418      	bmi.n	8007af0 <_malloc_r+0x8c>
 8007abe:	2b0b      	cmp	r3, #11
 8007ac0:	d90f      	bls.n	8007ae2 <_malloc_r+0x7e>
 8007ac2:	600b      	str	r3, [r1, #0]
 8007ac4:	50cd      	str	r5, [r1, r3]
 8007ac6:	18cc      	adds	r4, r1, r3
 8007ac8:	4630      	mov	r0, r6
 8007aca:	f000 f9c0 	bl	8007e4e <__malloc_unlock>
 8007ace:	f104 000b 	add.w	r0, r4, #11
 8007ad2:	1d23      	adds	r3, r4, #4
 8007ad4:	f020 0007 	bic.w	r0, r0, #7
 8007ad8:	1ac3      	subs	r3, r0, r3
 8007ada:	d0d3      	beq.n	8007a84 <_malloc_r+0x20>
 8007adc:	425a      	negs	r2, r3
 8007ade:	50e2      	str	r2, [r4, r3]
 8007ae0:	e7d0      	b.n	8007a84 <_malloc_r+0x20>
 8007ae2:	428c      	cmp	r4, r1
 8007ae4:	684b      	ldr	r3, [r1, #4]
 8007ae6:	bf16      	itet	ne
 8007ae8:	6063      	strne	r3, [r4, #4]
 8007aea:	6013      	streq	r3, [r2, #0]
 8007aec:	460c      	movne	r4, r1
 8007aee:	e7eb      	b.n	8007ac8 <_malloc_r+0x64>
 8007af0:	460c      	mov	r4, r1
 8007af2:	6849      	ldr	r1, [r1, #4]
 8007af4:	e7cc      	b.n	8007a90 <_malloc_r+0x2c>
 8007af6:	1cc4      	adds	r4, r0, #3
 8007af8:	f024 0403 	bic.w	r4, r4, #3
 8007afc:	42a0      	cmp	r0, r4
 8007afe:	d005      	beq.n	8007b0c <_malloc_r+0xa8>
 8007b00:	1a21      	subs	r1, r4, r0
 8007b02:	4630      	mov	r0, r6
 8007b04:	f000 f95a 	bl	8007dbc <_sbrk_r>
 8007b08:	3001      	adds	r0, #1
 8007b0a:	d0cf      	beq.n	8007aac <_malloc_r+0x48>
 8007b0c:	6025      	str	r5, [r4, #0]
 8007b0e:	e7db      	b.n	8007ac8 <_malloc_r+0x64>
 8007b10:	2000040c 	.word	0x2000040c
 8007b14:	20000410 	.word	0x20000410

08007b18 <__ssputs_r>:
 8007b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b1c:	688e      	ldr	r6, [r1, #8]
 8007b1e:	429e      	cmp	r6, r3
 8007b20:	4682      	mov	sl, r0
 8007b22:	460c      	mov	r4, r1
 8007b24:	4690      	mov	r8, r2
 8007b26:	4699      	mov	r9, r3
 8007b28:	d837      	bhi.n	8007b9a <__ssputs_r+0x82>
 8007b2a:	898a      	ldrh	r2, [r1, #12]
 8007b2c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007b30:	d031      	beq.n	8007b96 <__ssputs_r+0x7e>
 8007b32:	6825      	ldr	r5, [r4, #0]
 8007b34:	6909      	ldr	r1, [r1, #16]
 8007b36:	1a6f      	subs	r7, r5, r1
 8007b38:	6965      	ldr	r5, [r4, #20]
 8007b3a:	2302      	movs	r3, #2
 8007b3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b40:	fb95 f5f3 	sdiv	r5, r5, r3
 8007b44:	f109 0301 	add.w	r3, r9, #1
 8007b48:	443b      	add	r3, r7
 8007b4a:	429d      	cmp	r5, r3
 8007b4c:	bf38      	it	cc
 8007b4e:	461d      	movcc	r5, r3
 8007b50:	0553      	lsls	r3, r2, #21
 8007b52:	d530      	bpl.n	8007bb6 <__ssputs_r+0x9e>
 8007b54:	4629      	mov	r1, r5
 8007b56:	f7ff ff85 	bl	8007a64 <_malloc_r>
 8007b5a:	4606      	mov	r6, r0
 8007b5c:	b950      	cbnz	r0, 8007b74 <__ssputs_r+0x5c>
 8007b5e:	230c      	movs	r3, #12
 8007b60:	f8ca 3000 	str.w	r3, [sl]
 8007b64:	89a3      	ldrh	r3, [r4, #12]
 8007b66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b6a:	81a3      	strh	r3, [r4, #12]
 8007b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b74:	463a      	mov	r2, r7
 8007b76:	6921      	ldr	r1, [r4, #16]
 8007b78:	f7ff fb0e 	bl	8007198 <memcpy>
 8007b7c:	89a3      	ldrh	r3, [r4, #12]
 8007b7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007b82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b86:	81a3      	strh	r3, [r4, #12]
 8007b88:	6126      	str	r6, [r4, #16]
 8007b8a:	6165      	str	r5, [r4, #20]
 8007b8c:	443e      	add	r6, r7
 8007b8e:	1bed      	subs	r5, r5, r7
 8007b90:	6026      	str	r6, [r4, #0]
 8007b92:	60a5      	str	r5, [r4, #8]
 8007b94:	464e      	mov	r6, r9
 8007b96:	454e      	cmp	r6, r9
 8007b98:	d900      	bls.n	8007b9c <__ssputs_r+0x84>
 8007b9a:	464e      	mov	r6, r9
 8007b9c:	4632      	mov	r2, r6
 8007b9e:	4641      	mov	r1, r8
 8007ba0:	6820      	ldr	r0, [r4, #0]
 8007ba2:	f000 f93a 	bl	8007e1a <memmove>
 8007ba6:	68a3      	ldr	r3, [r4, #8]
 8007ba8:	1b9b      	subs	r3, r3, r6
 8007baa:	60a3      	str	r3, [r4, #8]
 8007bac:	6823      	ldr	r3, [r4, #0]
 8007bae:	441e      	add	r6, r3
 8007bb0:	6026      	str	r6, [r4, #0]
 8007bb2:	2000      	movs	r0, #0
 8007bb4:	e7dc      	b.n	8007b70 <__ssputs_r+0x58>
 8007bb6:	462a      	mov	r2, r5
 8007bb8:	f000 f94a 	bl	8007e50 <_realloc_r>
 8007bbc:	4606      	mov	r6, r0
 8007bbe:	2800      	cmp	r0, #0
 8007bc0:	d1e2      	bne.n	8007b88 <__ssputs_r+0x70>
 8007bc2:	6921      	ldr	r1, [r4, #16]
 8007bc4:	4650      	mov	r0, sl
 8007bc6:	f7ff feff 	bl	80079c8 <_free_r>
 8007bca:	e7c8      	b.n	8007b5e <__ssputs_r+0x46>

08007bcc <_svfiprintf_r>:
 8007bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bd0:	461d      	mov	r5, r3
 8007bd2:	898b      	ldrh	r3, [r1, #12]
 8007bd4:	061f      	lsls	r7, r3, #24
 8007bd6:	b09d      	sub	sp, #116	; 0x74
 8007bd8:	4680      	mov	r8, r0
 8007bda:	460c      	mov	r4, r1
 8007bdc:	4616      	mov	r6, r2
 8007bde:	d50f      	bpl.n	8007c00 <_svfiprintf_r+0x34>
 8007be0:	690b      	ldr	r3, [r1, #16]
 8007be2:	b96b      	cbnz	r3, 8007c00 <_svfiprintf_r+0x34>
 8007be4:	2140      	movs	r1, #64	; 0x40
 8007be6:	f7ff ff3d 	bl	8007a64 <_malloc_r>
 8007bea:	6020      	str	r0, [r4, #0]
 8007bec:	6120      	str	r0, [r4, #16]
 8007bee:	b928      	cbnz	r0, 8007bfc <_svfiprintf_r+0x30>
 8007bf0:	230c      	movs	r3, #12
 8007bf2:	f8c8 3000 	str.w	r3, [r8]
 8007bf6:	f04f 30ff 	mov.w	r0, #4294967295
 8007bfa:	e0c8      	b.n	8007d8e <_svfiprintf_r+0x1c2>
 8007bfc:	2340      	movs	r3, #64	; 0x40
 8007bfe:	6163      	str	r3, [r4, #20]
 8007c00:	2300      	movs	r3, #0
 8007c02:	9309      	str	r3, [sp, #36]	; 0x24
 8007c04:	2320      	movs	r3, #32
 8007c06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c0a:	2330      	movs	r3, #48	; 0x30
 8007c0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c10:	9503      	str	r5, [sp, #12]
 8007c12:	f04f 0b01 	mov.w	fp, #1
 8007c16:	4637      	mov	r7, r6
 8007c18:	463d      	mov	r5, r7
 8007c1a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007c1e:	b10b      	cbz	r3, 8007c24 <_svfiprintf_r+0x58>
 8007c20:	2b25      	cmp	r3, #37	; 0x25
 8007c22:	d13e      	bne.n	8007ca2 <_svfiprintf_r+0xd6>
 8007c24:	ebb7 0a06 	subs.w	sl, r7, r6
 8007c28:	d00b      	beq.n	8007c42 <_svfiprintf_r+0x76>
 8007c2a:	4653      	mov	r3, sl
 8007c2c:	4632      	mov	r2, r6
 8007c2e:	4621      	mov	r1, r4
 8007c30:	4640      	mov	r0, r8
 8007c32:	f7ff ff71 	bl	8007b18 <__ssputs_r>
 8007c36:	3001      	adds	r0, #1
 8007c38:	f000 80a4 	beq.w	8007d84 <_svfiprintf_r+0x1b8>
 8007c3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c3e:	4453      	add	r3, sl
 8007c40:	9309      	str	r3, [sp, #36]	; 0x24
 8007c42:	783b      	ldrb	r3, [r7, #0]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	f000 809d 	beq.w	8007d84 <_svfiprintf_r+0x1b8>
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8007c50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c54:	9304      	str	r3, [sp, #16]
 8007c56:	9307      	str	r3, [sp, #28]
 8007c58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c5c:	931a      	str	r3, [sp, #104]	; 0x68
 8007c5e:	462f      	mov	r7, r5
 8007c60:	2205      	movs	r2, #5
 8007c62:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007c66:	4850      	ldr	r0, [pc, #320]	; (8007da8 <_svfiprintf_r+0x1dc>)
 8007c68:	f7f8 fae2 	bl	8000230 <memchr>
 8007c6c:	9b04      	ldr	r3, [sp, #16]
 8007c6e:	b9d0      	cbnz	r0, 8007ca6 <_svfiprintf_r+0xda>
 8007c70:	06d9      	lsls	r1, r3, #27
 8007c72:	bf44      	itt	mi
 8007c74:	2220      	movmi	r2, #32
 8007c76:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007c7a:	071a      	lsls	r2, r3, #28
 8007c7c:	bf44      	itt	mi
 8007c7e:	222b      	movmi	r2, #43	; 0x2b
 8007c80:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007c84:	782a      	ldrb	r2, [r5, #0]
 8007c86:	2a2a      	cmp	r2, #42	; 0x2a
 8007c88:	d015      	beq.n	8007cb6 <_svfiprintf_r+0xea>
 8007c8a:	9a07      	ldr	r2, [sp, #28]
 8007c8c:	462f      	mov	r7, r5
 8007c8e:	2000      	movs	r0, #0
 8007c90:	250a      	movs	r5, #10
 8007c92:	4639      	mov	r1, r7
 8007c94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c98:	3b30      	subs	r3, #48	; 0x30
 8007c9a:	2b09      	cmp	r3, #9
 8007c9c:	d94d      	bls.n	8007d3a <_svfiprintf_r+0x16e>
 8007c9e:	b1b8      	cbz	r0, 8007cd0 <_svfiprintf_r+0x104>
 8007ca0:	e00f      	b.n	8007cc2 <_svfiprintf_r+0xf6>
 8007ca2:	462f      	mov	r7, r5
 8007ca4:	e7b8      	b.n	8007c18 <_svfiprintf_r+0x4c>
 8007ca6:	4a40      	ldr	r2, [pc, #256]	; (8007da8 <_svfiprintf_r+0x1dc>)
 8007ca8:	1a80      	subs	r0, r0, r2
 8007caa:	fa0b f000 	lsl.w	r0, fp, r0
 8007cae:	4318      	orrs	r0, r3
 8007cb0:	9004      	str	r0, [sp, #16]
 8007cb2:	463d      	mov	r5, r7
 8007cb4:	e7d3      	b.n	8007c5e <_svfiprintf_r+0x92>
 8007cb6:	9a03      	ldr	r2, [sp, #12]
 8007cb8:	1d11      	adds	r1, r2, #4
 8007cba:	6812      	ldr	r2, [r2, #0]
 8007cbc:	9103      	str	r1, [sp, #12]
 8007cbe:	2a00      	cmp	r2, #0
 8007cc0:	db01      	blt.n	8007cc6 <_svfiprintf_r+0xfa>
 8007cc2:	9207      	str	r2, [sp, #28]
 8007cc4:	e004      	b.n	8007cd0 <_svfiprintf_r+0x104>
 8007cc6:	4252      	negs	r2, r2
 8007cc8:	f043 0302 	orr.w	r3, r3, #2
 8007ccc:	9207      	str	r2, [sp, #28]
 8007cce:	9304      	str	r3, [sp, #16]
 8007cd0:	783b      	ldrb	r3, [r7, #0]
 8007cd2:	2b2e      	cmp	r3, #46	; 0x2e
 8007cd4:	d10c      	bne.n	8007cf0 <_svfiprintf_r+0x124>
 8007cd6:	787b      	ldrb	r3, [r7, #1]
 8007cd8:	2b2a      	cmp	r3, #42	; 0x2a
 8007cda:	d133      	bne.n	8007d44 <_svfiprintf_r+0x178>
 8007cdc:	9b03      	ldr	r3, [sp, #12]
 8007cde:	1d1a      	adds	r2, r3, #4
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	9203      	str	r2, [sp, #12]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	bfb8      	it	lt
 8007ce8:	f04f 33ff 	movlt.w	r3, #4294967295
 8007cec:	3702      	adds	r7, #2
 8007cee:	9305      	str	r3, [sp, #20]
 8007cf0:	4d2e      	ldr	r5, [pc, #184]	; (8007dac <_svfiprintf_r+0x1e0>)
 8007cf2:	7839      	ldrb	r1, [r7, #0]
 8007cf4:	2203      	movs	r2, #3
 8007cf6:	4628      	mov	r0, r5
 8007cf8:	f7f8 fa9a 	bl	8000230 <memchr>
 8007cfc:	b138      	cbz	r0, 8007d0e <_svfiprintf_r+0x142>
 8007cfe:	2340      	movs	r3, #64	; 0x40
 8007d00:	1b40      	subs	r0, r0, r5
 8007d02:	fa03 f000 	lsl.w	r0, r3, r0
 8007d06:	9b04      	ldr	r3, [sp, #16]
 8007d08:	4303      	orrs	r3, r0
 8007d0a:	3701      	adds	r7, #1
 8007d0c:	9304      	str	r3, [sp, #16]
 8007d0e:	7839      	ldrb	r1, [r7, #0]
 8007d10:	4827      	ldr	r0, [pc, #156]	; (8007db0 <_svfiprintf_r+0x1e4>)
 8007d12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d16:	2206      	movs	r2, #6
 8007d18:	1c7e      	adds	r6, r7, #1
 8007d1a:	f7f8 fa89 	bl	8000230 <memchr>
 8007d1e:	2800      	cmp	r0, #0
 8007d20:	d038      	beq.n	8007d94 <_svfiprintf_r+0x1c8>
 8007d22:	4b24      	ldr	r3, [pc, #144]	; (8007db4 <_svfiprintf_r+0x1e8>)
 8007d24:	bb13      	cbnz	r3, 8007d6c <_svfiprintf_r+0x1a0>
 8007d26:	9b03      	ldr	r3, [sp, #12]
 8007d28:	3307      	adds	r3, #7
 8007d2a:	f023 0307 	bic.w	r3, r3, #7
 8007d2e:	3308      	adds	r3, #8
 8007d30:	9303      	str	r3, [sp, #12]
 8007d32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d34:	444b      	add	r3, r9
 8007d36:	9309      	str	r3, [sp, #36]	; 0x24
 8007d38:	e76d      	b.n	8007c16 <_svfiprintf_r+0x4a>
 8007d3a:	fb05 3202 	mla	r2, r5, r2, r3
 8007d3e:	2001      	movs	r0, #1
 8007d40:	460f      	mov	r7, r1
 8007d42:	e7a6      	b.n	8007c92 <_svfiprintf_r+0xc6>
 8007d44:	2300      	movs	r3, #0
 8007d46:	3701      	adds	r7, #1
 8007d48:	9305      	str	r3, [sp, #20]
 8007d4a:	4619      	mov	r1, r3
 8007d4c:	250a      	movs	r5, #10
 8007d4e:	4638      	mov	r0, r7
 8007d50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d54:	3a30      	subs	r2, #48	; 0x30
 8007d56:	2a09      	cmp	r2, #9
 8007d58:	d903      	bls.n	8007d62 <_svfiprintf_r+0x196>
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d0c8      	beq.n	8007cf0 <_svfiprintf_r+0x124>
 8007d5e:	9105      	str	r1, [sp, #20]
 8007d60:	e7c6      	b.n	8007cf0 <_svfiprintf_r+0x124>
 8007d62:	fb05 2101 	mla	r1, r5, r1, r2
 8007d66:	2301      	movs	r3, #1
 8007d68:	4607      	mov	r7, r0
 8007d6a:	e7f0      	b.n	8007d4e <_svfiprintf_r+0x182>
 8007d6c:	ab03      	add	r3, sp, #12
 8007d6e:	9300      	str	r3, [sp, #0]
 8007d70:	4622      	mov	r2, r4
 8007d72:	4b11      	ldr	r3, [pc, #68]	; (8007db8 <_svfiprintf_r+0x1ec>)
 8007d74:	a904      	add	r1, sp, #16
 8007d76:	4640      	mov	r0, r8
 8007d78:	f7fc fbf6 	bl	8004568 <_printf_float>
 8007d7c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007d80:	4681      	mov	r9, r0
 8007d82:	d1d6      	bne.n	8007d32 <_svfiprintf_r+0x166>
 8007d84:	89a3      	ldrh	r3, [r4, #12]
 8007d86:	065b      	lsls	r3, r3, #25
 8007d88:	f53f af35 	bmi.w	8007bf6 <_svfiprintf_r+0x2a>
 8007d8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d8e:	b01d      	add	sp, #116	; 0x74
 8007d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d94:	ab03      	add	r3, sp, #12
 8007d96:	9300      	str	r3, [sp, #0]
 8007d98:	4622      	mov	r2, r4
 8007d9a:	4b07      	ldr	r3, [pc, #28]	; (8007db8 <_svfiprintf_r+0x1ec>)
 8007d9c:	a904      	add	r1, sp, #16
 8007d9e:	4640      	mov	r0, r8
 8007da0:	f7fc fe98 	bl	8004ad4 <_printf_i>
 8007da4:	e7ea      	b.n	8007d7c <_svfiprintf_r+0x1b0>
 8007da6:	bf00      	nop
 8007da8:	08008094 	.word	0x08008094
 8007dac:	0800809a 	.word	0x0800809a
 8007db0:	0800809e 	.word	0x0800809e
 8007db4:	08004569 	.word	0x08004569
 8007db8:	08007b19 	.word	0x08007b19

08007dbc <_sbrk_r>:
 8007dbc:	b538      	push	{r3, r4, r5, lr}
 8007dbe:	4c06      	ldr	r4, [pc, #24]	; (8007dd8 <_sbrk_r+0x1c>)
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	4605      	mov	r5, r0
 8007dc4:	4608      	mov	r0, r1
 8007dc6:	6023      	str	r3, [r4, #0]
 8007dc8:	f7f9 ff16 	bl	8001bf8 <_sbrk>
 8007dcc:	1c43      	adds	r3, r0, #1
 8007dce:	d102      	bne.n	8007dd6 <_sbrk_r+0x1a>
 8007dd0:	6823      	ldr	r3, [r4, #0]
 8007dd2:	b103      	cbz	r3, 8007dd6 <_sbrk_r+0x1a>
 8007dd4:	602b      	str	r3, [r5, #0]
 8007dd6:	bd38      	pop	{r3, r4, r5, pc}
 8007dd8:	200005e4 	.word	0x200005e4

08007ddc <strncmp>:
 8007ddc:	b510      	push	{r4, lr}
 8007dde:	b16a      	cbz	r2, 8007dfc <strncmp+0x20>
 8007de0:	3901      	subs	r1, #1
 8007de2:	1884      	adds	r4, r0, r2
 8007de4:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007de8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d103      	bne.n	8007df8 <strncmp+0x1c>
 8007df0:	42a0      	cmp	r0, r4
 8007df2:	d001      	beq.n	8007df8 <strncmp+0x1c>
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d1f5      	bne.n	8007de4 <strncmp+0x8>
 8007df8:	1a98      	subs	r0, r3, r2
 8007dfa:	bd10      	pop	{r4, pc}
 8007dfc:	4610      	mov	r0, r2
 8007dfe:	e7fc      	b.n	8007dfa <strncmp+0x1e>

08007e00 <__ascii_wctomb>:
 8007e00:	b149      	cbz	r1, 8007e16 <__ascii_wctomb+0x16>
 8007e02:	2aff      	cmp	r2, #255	; 0xff
 8007e04:	bf85      	ittet	hi
 8007e06:	238a      	movhi	r3, #138	; 0x8a
 8007e08:	6003      	strhi	r3, [r0, #0]
 8007e0a:	700a      	strbls	r2, [r1, #0]
 8007e0c:	f04f 30ff 	movhi.w	r0, #4294967295
 8007e10:	bf98      	it	ls
 8007e12:	2001      	movls	r0, #1
 8007e14:	4770      	bx	lr
 8007e16:	4608      	mov	r0, r1
 8007e18:	4770      	bx	lr

08007e1a <memmove>:
 8007e1a:	4288      	cmp	r0, r1
 8007e1c:	b510      	push	{r4, lr}
 8007e1e:	eb01 0302 	add.w	r3, r1, r2
 8007e22:	d807      	bhi.n	8007e34 <memmove+0x1a>
 8007e24:	1e42      	subs	r2, r0, #1
 8007e26:	4299      	cmp	r1, r3
 8007e28:	d00a      	beq.n	8007e40 <memmove+0x26>
 8007e2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e2e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007e32:	e7f8      	b.n	8007e26 <memmove+0xc>
 8007e34:	4283      	cmp	r3, r0
 8007e36:	d9f5      	bls.n	8007e24 <memmove+0xa>
 8007e38:	1881      	adds	r1, r0, r2
 8007e3a:	1ad2      	subs	r2, r2, r3
 8007e3c:	42d3      	cmn	r3, r2
 8007e3e:	d100      	bne.n	8007e42 <memmove+0x28>
 8007e40:	bd10      	pop	{r4, pc}
 8007e42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e46:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007e4a:	e7f7      	b.n	8007e3c <memmove+0x22>

08007e4c <__malloc_lock>:
 8007e4c:	4770      	bx	lr

08007e4e <__malloc_unlock>:
 8007e4e:	4770      	bx	lr

08007e50 <_realloc_r>:
 8007e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e52:	4607      	mov	r7, r0
 8007e54:	4614      	mov	r4, r2
 8007e56:	460e      	mov	r6, r1
 8007e58:	b921      	cbnz	r1, 8007e64 <_realloc_r+0x14>
 8007e5a:	4611      	mov	r1, r2
 8007e5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007e60:	f7ff be00 	b.w	8007a64 <_malloc_r>
 8007e64:	b922      	cbnz	r2, 8007e70 <_realloc_r+0x20>
 8007e66:	f7ff fdaf 	bl	80079c8 <_free_r>
 8007e6a:	4625      	mov	r5, r4
 8007e6c:	4628      	mov	r0, r5
 8007e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e70:	f000 f814 	bl	8007e9c <_malloc_usable_size_r>
 8007e74:	42a0      	cmp	r0, r4
 8007e76:	d20f      	bcs.n	8007e98 <_realloc_r+0x48>
 8007e78:	4621      	mov	r1, r4
 8007e7a:	4638      	mov	r0, r7
 8007e7c:	f7ff fdf2 	bl	8007a64 <_malloc_r>
 8007e80:	4605      	mov	r5, r0
 8007e82:	2800      	cmp	r0, #0
 8007e84:	d0f2      	beq.n	8007e6c <_realloc_r+0x1c>
 8007e86:	4631      	mov	r1, r6
 8007e88:	4622      	mov	r2, r4
 8007e8a:	f7ff f985 	bl	8007198 <memcpy>
 8007e8e:	4631      	mov	r1, r6
 8007e90:	4638      	mov	r0, r7
 8007e92:	f7ff fd99 	bl	80079c8 <_free_r>
 8007e96:	e7e9      	b.n	8007e6c <_realloc_r+0x1c>
 8007e98:	4635      	mov	r5, r6
 8007e9a:	e7e7      	b.n	8007e6c <_realloc_r+0x1c>

08007e9c <_malloc_usable_size_r>:
 8007e9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ea0:	1f18      	subs	r0, r3, #4
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	bfbc      	itt	lt
 8007ea6:	580b      	ldrlt	r3, [r1, r0]
 8007ea8:	18c0      	addlt	r0, r0, r3
 8007eaa:	4770      	bx	lr

08007eac <_init>:
 8007eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eae:	bf00      	nop
 8007eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eb2:	bc08      	pop	{r3}
 8007eb4:	469e      	mov	lr, r3
 8007eb6:	4770      	bx	lr

08007eb8 <_fini>:
 8007eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eba:	bf00      	nop
 8007ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ebe:	bc08      	pop	{r3}
 8007ec0:	469e      	mov	lr, r3
 8007ec2:	4770      	bx	lr
